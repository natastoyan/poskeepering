using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ApplicationCore.Models;

namespace Infrastructure.Data
{
    public partial class ModelContext : DbContext
    {
        //public ModelContext()
        //{
        //}

        public ModelContext(DbContextOptions<ModelContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Accessrights> Accessrights { get; set; }
        public virtual DbSet<Accessrules> Accessrules { get; set; }
        public virtual DbSet<Acrbinterest> Acrbinterest { get; set; }
        public virtual DbSet<AdSettings> AdSettings { get; set; }
        public virtual DbSet<AqMqmsgInQtab> AqMqmsgInQtab { get; set; }
        public virtual DbSet<AqMqmsgInQtabF> AqMqmsgInQtabF { get; set; }
        public virtual DbSet<Assetlocks> Assetlocks { get; set; }
        public virtual DbSet<AthenaMatch> AthenaMatch { get; set; }
        public virtual DbSet<AthenaXdates> AthenaXdates { get; set; }
        public virtual DbSet<AtheneimportedFx> AtheneimportedFx { get; set; }
        public virtual DbSet<AtheneimportedMm> AtheneimportedMm { get; set; }
        public virtual DbSet<AtheneimportedPaym> AtheneimportedPaym { get; set; }
        public virtual DbSet<AtheneimportedPaymsum> AtheneimportedPaymsum { get; set; }
        public virtual DbSet<AthenepaymMatch> AthenepaymMatch { get; set; }
        public virtual DbSet<Availablecolumns> Availablecolumns { get; set; }
        public virtual DbSet<Availablecolumntypes> Availablecolumntypes { get; set; }
        public virtual DbSet<Availablefields> Availablefields { get; set; }
        public virtual DbSet<Availablefieldtypes> Availablefieldtypes { get; set; }
        public virtual DbSet<Availablegroups> Availablegroups { get; set; }
        public virtual DbSet<Basereports> Basereports { get; set; }
        public virtual DbSet<Bbgerrors> Bbgerrors { get; set; }
        public virtual DbSet<Bondstat> Bondstat { get; set; }
        public virtual DbSet<Books> Books { get; set; }
        public virtual DbSet<Briefdict> Briefdict { get; set; }
        public virtual DbSet<Brokers> Brokers { get; set; }
        public virtual DbSet<Capital> Capital { get; set; }
        public virtual DbSet<Clientpl> Clientpl { get; set; }
        public virtual DbSet<Closedbonds> Closedbonds { get; set; }
        public virtual DbSet<Closedbondsdeliv> Closedbondsdeliv { get; set; }
        public virtual DbSet<Closedbondsdelivrub> Closedbondsdelivrub { get; set; }
        public virtual DbSet<Closedequities> Closedequities { get; set; }
        public virtual DbSet<Collistline> Collistline { get; set; }
        public virtual DbSet<Columnlists> Columnlists { get; set; }
        public virtual DbSet<Counterlimits> Counterlimits { get; set; }
        public virtual DbSet<Couponcalcmethod> Couponcalcmethod { get; set; }
        public virtual DbSet<Couponmatrix> Couponmatrix { get; set; }
        public virtual DbSet<Createdusers> Createdusers { get; set; }
        public virtual DbSet<Crosscountergroups> Crosscountergroups { get; set; }
        public virtual DbSet<Crsrequests> Crsrequests { get; set; }
        public virtual DbSet<CurraccOld> CurraccOld { get; set; }
        public virtual DbSet<Curraccdefault> Curraccdefault { get; set; }
        public virtual DbSet<Curracctypes> Curracctypes { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<Currlimits> Currlimits { get; set; }
        public virtual DbSet<Currpair> Currpair { get; set; }
        public virtual DbSet<Currpaym> Currpaym { get; set; }
        public virtual DbSet<Currratehist> Currratehist { get; set; }
        public virtual DbSet<Currweights> Currweights { get; set; }
        public virtual DbSet<Customreports> Customreports { get; set; }
        public virtual DbSet<Dayperiods> Dayperiods { get; set; }
        public virtual DbSet<Dealers> Dealers { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Depo> Depo { get; set; }
        public virtual DbSet<DepoDelrecord> DepoDelrecord { get; set; }
        public virtual DbSet<Depogaprates> Depogaprates { get; set; }
        public virtual DbSet<DiAddress> DiAddress { get; set; }
        public virtual DbSet<DiCompany> DiCompany { get; set; }
        public virtual DbSet<DiIndividual> DiIndividual { get; set; }
        public virtual DbSet<DiMarketcode> DiMarketcode { get; set; }
        public virtual DbSet<Dictname> Dictname { get; set; }
        public virtual DbSet<Eqbooks> Eqbooks { get; set; }
        public virtual DbSet<Eqchangedate> Eqchangedate { get; set; }
        public virtual DbSet<Eqchangereason> Eqchangereason { get; set; }
        public virtual DbSet<Eqdealers> Eqdealers { get; set; }
        public virtual DbSet<Eqdiasoftexchange> Eqdiasoftexchange { get; set; }
        public virtual DbSet<Eqprices> Eqprices { get; set; }
        public virtual DbSet<EqpricesErms> EqpricesErms { get; set; }
        public virtual DbSet<Eqproducts> Eqproducts { get; set; }
        public virtual DbSet<Eqproducttype> Eqproducttype { get; set; }
        public virtual DbSet<Eqrecres> Eqrecres { get; set; }
        public virtual DbSet<Eqrepo> Eqrepo { get; set; }
        public virtual DbSet<Eqreposums> Eqreposums { get; set; }
        public virtual DbSet<Equitingdeals> Equitingdeals { get; set; }
        public virtual DbSet<EquitingdealsAudit> EquitingdealsAudit { get; set; }
        public virtual DbSet<Ert> Ert { get; set; }
        public virtual DbSet<EventClass> EventClass { get; set; }
        public virtual DbSet<EventType> EventType { get; set; }
        public virtual DbSet<Evtable> Evtable { get; set; }
        public virtual DbSet<Expplusfx2> Expplusfx2 { get; set; }
        public virtual DbSet<Favoritsystem> Favoritsystem { get; set; }
        public virtual DbSet<Filters> Filters { get; set; }
        public virtual DbSet<Fixpriceshistory> Fixpriceshistory { get; set; }
        public virtual DbSet<Forex> Forex { get; set; }
        public virtual DbSet<ForexDelrecord> ForexDelrecord { get; set; }
        public virtual DbSet<ForexNettBo> ForexNettBo { get; set; }
        public virtual DbSet<ForexNettRm> ForexNettRm { get; set; }
        public virtual DbSet<ForexNettTr> ForexNettTr { get; set; }
        public virtual DbSet<Forextype> Forextype { get; set; }
        public virtual DbSet<Forms> Forms { get; set; }
        public virtual DbSet<Futures> Futures { get; set; }
        public virtual DbSet<FuturesDelrecord> FuturesDelrecord { get; set; }
        public virtual DbSet<FvsTestAutoinsert> FvsTestAutoinsert { get; set; }
        public virtual DbSet<FvsTestStrnum> FvsTestStrnum { get; set; }
        public virtual DbSet<Fvsupdates> Fvsupdates { get; set; }
        public virtual DbSet<Fxbal2> Fxbal2 { get; set; }
        public virtual DbSet<Fxpair2> Fxpair2 { get; set; }
        public virtual DbSet<Fxsumbuy> Fxsumbuy { get; set; }
        public virtual DbSet<Fxsumbuy2> Fxsumbuy2 { get; set; }
        public virtual DbSet<Fxsumsell> Fxsumsell { get; set; }
        public virtual DbSet<Fxsumsell2> Fxsumsell2 { get; set; }
        public virtual DbSet<Graphtest> Graphtest { get; set; }
        public virtual DbSet<Groupconds> Groupconds { get; set; }
        public virtual DbSet<Groupcondsline> Groupcondsline { get; set; }
        public virtual DbSet<Holidays> Holidays { get; set; }
        public virtual DbSet<Idtab> Idtab { get; set; }
        public virtual DbSet<IeActionjobWork> IeActionjobWork { get; set; }
        public virtual DbSet<IeEvents> IeEvents { get; set; }
        public virtual DbSet<IeExportfile> IeExportfile { get; set; }
        public virtual DbSet<IeExportfilerecords> IeExportfilerecords { get; set; }
        public virtual DbSet<IeExternalinterface> IeExternalinterface { get; set; }
        public virtual DbSet<IeImportfile> IeImportfile { get; set; }
        public virtual DbSet<IeImportfilerecords> IeImportfilerecords { get; set; }
        public virtual DbSet<IeInterfacedealstatus> IeInterfacedealstatus { get; set; }
        public virtual DbSet<IeInterfacedealstatuslog> IeInterfacedealstatuslog { get; set; }
        public virtual DbSet<IeLaunch> IeLaunch { get; set; }
        public virtual DbSet<IeLaunchsettings> IeLaunchsettings { get; set; }
        public virtual DbSet<IeMails> IeMails { get; set; }
        public virtual DbSet<IeMqGetput> IeMqGetput { get; set; }
        public virtual DbSet<IeQuikorgsexport> IeQuikorgsexport { get; set; }
        public virtual DbSet<Importlog> Importlog { get; set; }
        public virtual DbSet<IngGeishaTrades> IngGeishaTrades { get; set; }
        public virtual DbSet<Interoffpaym> Interoffpaym { get; set; }
        public virtual DbSet<Limitweightrisk> Limitweightrisk { get; set; }
        public virtual DbSet<Limtrend2> Limtrend2 { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<LogSettings> LogSettings { get; set; }
        public virtual DbSet<Logrecord> Logrecord { get; set; }
        public virtual DbSet<Mappingproductcond> Mappingproductcond { get; set; }
        public virtual DbSet<Mappingproducts> Mappingproducts { get; set; }
        public virtual DbSet<Margincalls> Margincalls { get; set; }
        public virtual DbSet<Nettdata> Nettdata { get; set; }
        public virtual DbSet<Netting> Netting { get; set; }
        public virtual DbSet<Norm6coeff> Norm6coeff { get; set; }
        public virtual DbSet<Norm6limit> Norm6limit { get; set; }
        public virtual DbSet<Ocpdata> Ocpdata { get; set; }
        public virtual DbSet<Ocpplusfx> Ocpplusfx { get; set; }
        public virtual DbSet<Ocpplusfx2> Ocpplusfx2 { get; set; }
        public virtual DbSet<Offmarketratesfx> Offmarketratesfx { get; set; }
        public virtual DbSet<Offmarketratesmm> Offmarketratesmm { get; set; }
        public virtual DbSet<Offmarkettradesmm> Offmarkettradesmm { get; set; }
        public virtual DbSet<Olddates> Olddates { get; set; }
        public virtual DbSet<Operation> Operation { get; set; }
        public virtual DbSet<Orgs> Orgs { get; set; }
        public virtual DbSet<Orgstype> Orgstype { get; set; }
        public virtual DbSet<Ourbank> Ourbank { get; set; }
        public virtual DbSet<Ourbankcapital> Ourbankcapital { get; set; }
        public virtual DbSet<PRemsonocp3> PRemsonocp3 { get; set; }
        public virtual DbSet<PRemsonocpForliq> PRemsonocpForliq { get; set; }
        public virtual DbSet<PVClientpl> PVClientpl { get; set; }
        public virtual DbSet<PVPositionreeval> PVPositionreeval { get; set; }
        public virtual DbSet<PVRates2> PVRates2 { get; set; }
        public virtual DbSet<Paympurpose> Paympurpose { get; set; }
        public virtual DbSet<Periodstoproducts> Periodstoproducts { get; set; }
        public virtual DbSet<PkAggrpaym> PkAggrpaym { get; set; }
        public virtual DbSet<PkAssetlocks> PkAssetlocks { get; set; }
        public virtual DbSet<PkClientacc> PkClientacc { get; set; }
        public virtual DbSet<PkClientpaym> PkClientpaym { get; set; }
        public virtual DbSet<PkClientpaymSettings> PkClientpaymSettings { get; set; }
        public virtual DbSet<PkCurracc> PkCurracc { get; set; }
        public virtual DbSet<PkCurrpaym> PkCurrpaym { get; set; }
        public virtual DbSet<PkCurrweights> PkCurrweights { get; set; }
        public virtual DbSet<PkLoropaym> PkLoropaym { get; set; }
        public virtual DbSet<PkNettdata> PkNettdata { get; set; }
        public virtual DbSet<PkOption> PkOption { get; set; }
        public virtual DbSet<PkOptions> PkOptions { get; set; }
        public virtual DbSet<PkOrgnett> PkOrgnett { get; set; }
        public virtual DbSet<PkQuikclasses> PkQuikclasses { get; set; }
        public virtual DbSet<PkQuikclassesDetail> PkQuikclassesDetail { get; set; }
        public virtual DbSet<PkRacepaym> PkRacepaym { get; set; }
        public virtual DbSet<PkRatecbrf> PkRatecbrf { get; set; }
        public virtual DbSet<PkRecres> PkRecres { get; set; }
        public virtual DbSet<PkRemains> PkRemains { get; set; }
        public virtual DbSet<PkRepo> PkRepo { get; set; }
        public virtual DbSet<PkRepoPerform> PkRepoPerform { get; set; }
        public virtual DbSet<PkSbsec> PkSbsec { get; set; }
        public virtual DbSet<PkSecprice> PkSecprice { get; set; }
        public virtual DbSet<PkTrans> PkTrans { get; set; }
        public virtual DbSet<PkTranshes> PkTranshes { get; set; }
        public virtual DbSet<PlanTable> PlanTable { get; set; }
        public virtual DbSet<Pldata> Pldata { get; set; }
        public virtual DbSet<Plfin> Plfin { get; set; }
        public virtual DbSet<PlsqlProfilerData> PlsqlProfilerData { get; set; }
        public virtual DbSet<PlsqlProfilerRuns> PlsqlProfilerRuns { get; set; }
        public virtual DbSet<PlsqlProfilerUnits> PlsqlProfilerUnits { get; set; }
        public virtual DbSet<Pricesource> Pricesource { get; set; }
        public virtual DbSet<Productbookmapping> Productbookmapping { get; set; }
        public virtual DbSet<QuikParamsHistory> QuikParamsHistory { get; set; }
        public virtual DbSet<QuikclassesOld> QuikclassesOld { get; set; }
        public virtual DbSet<Quikerrors> Quikerrors { get; set; }
        public virtual DbSet<Ratecbrf> Ratecbrf { get; set; }
        public virtual DbSet<Rates> Rates { get; set; }
        public virtual DbSet<Recres> Recres { get; set; }
        public virtual DbSet<RegulusAudit> RegulusAudit { get; set; }
        public virtual DbSet<Regvolume> Regvolume { get; set; }
        public virtual DbSet<Remains> Remains { get; set; }
        public virtual DbSet<Remainsbysec> Remainsbysec { get; set; }
        public virtual DbSet<Remainsbytransh> Remainsbytransh { get; set; }
        public virtual DbSet<Remfromcp> Remfromcp { get; set; }
        public virtual DbSet<Remsonocp> Remsonocp { get; set; }
        public virtual DbSet<Remsonocp2> Remsonocp2 { get; set; }
        public virtual DbSet<Repbyexample> Repbyexample { get; set; }
        public virtual DbSet<Repo> Repo { get; set; }
        public virtual DbSet<RepoDelrecord> RepoDelrecord { get; set; }
        public virtual DbSet<RepoOld> RepoOld { get; set; }
        public virtual DbSet<Reportperiods> Reportperiods { get; set; }
        public virtual DbSet<Reportstat> Reportstat { get; set; }
        public virtual DbSet<Reposums> Reposums { get; set; }
        public virtual DbSet<ReposumsDelrecord> ReposumsDelrecord { get; set; }
        public virtual DbSet<Riskcrosslimit> Riskcrosslimit { get; set; }
        public virtual DbSet<Riskgroups> Riskgroups { get; set; }
        public virtual DbSet<Riskperiods> Riskperiods { get; set; }
        public virtual DbSet<Riskperiodscodes> Riskperiodscodes { get; set; }
        public virtual DbSet<Riskweightings> Riskweightings { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<RolesBak> RolesBak { get; set; }
        public virtual DbSet<Rurrepo> Rurrepo { get; set; }
        public virtual DbSet<RurrepoDelrecord> RurrepoDelrecord { get; set; }
        public virtual DbSet<RurrepoOld> RurrepoOld { get; set; }
        public virtual DbSet<Rurreposums> Rurreposums { get; set; }
        public virtual DbSet<RurreposumsDelrecord> RurreposumsDelrecord { get; set; }
        public virtual DbSet<SbsecDeleted> SbsecDeleted { get; set; }
        public virtual DbSet<SbsecDelrecord> SbsecDelrecord { get; set; }
        public virtual DbSet<SbsecOld> SbsecOld { get; set; }
        public virtual DbSet<Secacc> Secacc { get; set; }
        public virtual DbSet<Secaccdefault> Secaccdefault { get; set; }
        public virtual DbSet<Secacctypes> Secacctypes { get; set; }
        public virtual DbSet<Secpaym> Secpaym { get; set; }
        public virtual DbSet<Secprice> Secprice { get; set; }
        public virtual DbSet<Securities> Securities { get; set; }
        public virtual DbSet<Securityprofiles> Securityprofiles { get; set; }
        public virtual DbSet<Seldefault> Seldefault { get; set; }
        public virtual DbSet<Selectconds> Selectconds { get; set; }
        public virtual DbSet<Selectcondsline> Selectcondsline { get; set; }
        public virtual DbSet<Servreq> Servreq { get; set; }
        public virtual DbSet<Statustype> Statustype { get; set; }
        public virtual DbSet<Subperioddays> Subperioddays { get; set; }
        public virtual DbSet<Subperiods> Subperiods { get; set; }
        public virtual DbSet<Subriskgroups> Subriskgroups { get; set; }
        public virtual DbSet<Summitdeal> Summitdeal { get; set; }
        public virtual DbSet<SummitdealLast> SummitdealLast { get; set; }
        public virtual DbSet<Swap> Swap { get; set; }
        public virtual DbSet<SystemEvents> SystemEvents { get; set; }
        public virtual DbSet<Systemmenu> Systemmenu { get; set; }
        public virtual DbSet<TabLog> TabLog { get; set; }
        public virtual DbSet<TestCrs> TestCrs { get; set; }
        public virtual DbSet<Ticketprint> Ticketprint { get; set; }
        public virtual DbSet<Tmp> Tmp { get; set; }
        public virtual DbSet<Tmp111> Tmp111 { get; set; }
        public virtual DbSet<Tmp2> Tmp2 { get; set; }
        public virtual DbSet<TmpAivReconFedFav> TmpAivReconFedFav { get; set; }
        public virtual DbSet<TmpAthenepaym> TmpAthenepaym { get; set; }
        public virtual DbSet<TmpBondsstat> TmpBondsstat { get; set; }
        public virtual DbSet<TmpForex> TmpForex { get; set; }
        public virtual DbSet<TmpForexT> TmpForexT { get; set; }
        public virtual DbSet<TmpMurexfavoritmapping> TmpMurexfavoritmapping { get; set; }
        public virtual DbSet<TmpNettingfx> TmpNettingfx { get; set; }
        public virtual DbSet<TmpNorm6> TmpNorm6 { get; set; }
        public virtual DbSet<TmpNorm6coeff> TmpNorm6coeff { get; set; }
        public virtual DbSet<TmpNorm6detail> TmpNorm6detail { get; set; }
        public virtual DbSet<TmpNorm6pot> TmpNorm6pot { get; set; }
        public virtual DbSet<TmpRemains> TmpRemains { get; set; }
        public virtual DbSet<TmpSbsecForInsert> TmpSbsecForInsert { get; set; }
        public virtual DbSet<TmpSbsecSummitstatus> TmpSbsecSummitstatus { get; set; }
        public virtual DbSet<TmpSummitdeal> TmpSummitdeal { get; set; }
        public virtual DbSet<TmpSummitdealLast> TmpSummitdealLast { get; set; }
        public virtual DbSet<TmpTest> TmpTest { get; set; }
        public virtual DbSet<TmpVtmDeporeport> TmpVtmDeporeport { get; set; }
        public virtual DbSet<TmpVtmFxreport> TmpVtmFxreport { get; set; }
        public virtual DbSet<TmpVtmRecon> TmpVtmRecon { get; set; }
        public virtual DbSet<TmpVtmSbsecreport> TmpVtmSbsecreport { get; set; }
        public virtual DbSet<Tmpirrdata> Tmpirrdata { get; set; }
        public virtual DbSet<Tmpirrdata2> Tmpirrdata2 { get; set; }
        public virtual DbSet<Tmpsbsec> Tmpsbsec { get; set; }
        public virtual DbSet<Tradeplaceprint> Tradeplaceprint { get; set; }
        public virtual DbSet<Trans> Trans { get; set; }
        public virtual DbSet<Transhes> Transhes { get; set; }
        public virtual DbSet<Transhes2> Transhes2 { get; set; }
        public virtual DbSet<Tries> Tries { get; set; }
        public virtual DbSet<Uniqcounters> Uniqcounters { get; set; }
        public virtual DbSet<Usedpasswords> Usedpasswords { get; set; }
        public virtual DbSet<Userprofiles> Userprofiles { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<VAccessrights> VAccessrights { get; set; }
        public virtual DbSet<VAccessrules> VAccessrules { get; set; }
        public virtual DbSet<VActpass> VActpass { get; set; }
        public virtual DbSet<VActpass2> VActpass2 { get; set; }
        public virtual DbSet<VAdddepodata> VAdddepodata { get; set; }
        public virtual DbSet<VAddrepodata> VAddrepodata { get; set; }
        public virtual DbSet<VAthenematchDifftypeFx> VAthenematchDifftypeFx { get; set; }
        public virtual DbSet<VAthenematchDifftypeMm> VAthenematchDifftypeMm { get; set; }
        public virtual DbSet<VAthenematchFx> VAthenematchFx { get; set; }
        public virtual DbSet<VAthenematchMm> VAthenematchMm { get; set; }
        public virtual DbSet<VAthenematchNdfc> VAthenematchNdfc { get; set; }
        public virtual DbSet<VAthenematchpaymAthena> VAthenematchpaymAthena { get; set; }
        public virtual DbSet<VAthenematchpaymFavorit> VAthenematchpaymFavorit { get; set; }
        public virtual DbSet<VAthenematchpaymMatch> VAthenematchpaymMatch { get; set; }
        public virtual DbSet<VAthenematchpaymUnmatch> VAthenematchpaymUnmatch { get; set; }
        public virtual DbSet<VBalanceforocp> VBalanceforocp { get; set; }
        public virtual DbSet<VBankballance> VBankballance { get; set; }
        public virtual DbSet<VBondcoupons> VBondcoupons { get; set; }
        public virtual DbSet<VBookdeals> VBookdeals { get; set; }
        public virtual DbSet<VCashatm> VCashatm { get; set; }
        public virtual DbSet<VCbrfRates> VCbrfRates { get; set; }
        public virtual DbSet<VClientpl> VClientpl { get; set; }
        public virtual DbSet<VClosebonds> VClosebonds { get; set; }
        public virtual DbSet<VClosebonds2> VClosebonds2 { get; set; }
        public virtual DbSet<VClosedequitiesGroup> VClosedequitiesGroup { get; set; }
        public virtual DbSet<VClosedequitiesGroup1> VClosedequitiesGroup1 { get; set; }
        public virtual DbSet<VCounterlimShort> VCounterlimShort { get; set; }
        public virtual DbSet<VCounterlimShort1> VCounterlimShort1 { get; set; }
        public virtual DbSet<VCounterlimcom> VCounterlimcom { get; set; }
        public virtual DbSet<VCouponmatrix> VCouponmatrix { get; set; }
        public virtual DbSet<VCsrvfunding> VCsrvfunding { get; set; }
        public virtual DbSet<VCurrentfxexp> VCurrentfxexp { get; set; }
        public virtual DbSet<VCurrpaym> VCurrpaym { get; set; }
        public virtual DbSet<VCurrpos03> VCurrpos03 { get; set; }
        public virtual DbSet<VCurrpos1> VCurrpos1 { get; set; }
        public virtual DbSet<VCurrpos2> VCurrpos2 { get; set; }
        public virtual DbSet<VDaylyportb> VDaylyportb { get; set; }
        public virtual DbSet<VDaylyportb2> VDaylyportb2 { get; set; }
        public virtual DbSet<VDealerocpx> VDealerocpx { get; set; }
        public virtual DbSet<VDealerocpx2> VDealerocpx2 { get; set; }
        public virtual DbSet<VDepoutil> VDepoutil { get; set; }
        public virtual DbSet<VDepoutil2> VDepoutil2 { get; set; }
        public virtual DbSet<VDiasoftXeqdeals> VDiasoftXeqdeals { get; set; }
        public virtual DbSet<VDiasoftXeqdealsInternal> VDiasoftXeqdealsInternal { get; set; }
        public virtual DbSet<VDpldepo> VDpldepo { get; set; }
        public virtual DbSet<VEqIntfx> VEqIntfx { get; set; }
        public virtual DbSet<VEqIsDeals> VEqIsDeals { get; set; }
        public virtual DbSet<VEqIsDealsTab> VEqIsDealsTab { get; set; }
        public virtual DbSet<VEqSettl> VEqSettl { get; set; }
        public virtual DbSet<VEqflip> VEqflip { get; set; }
        public virtual DbSet<VEqpos> VEqpos { get; set; }
        public virtual DbSet<VEqposdetail> VEqposdetail { get; set; }
        public virtual DbSet<VEqutil> VEqutil { get; set; }
        public virtual DbSet<VEqutil03> VEqutil03 { get; set; }
        public virtual DbSet<VEqutil2> VEqutil2 { get; set; }
        public virtual DbSet<VErmsExport> VErmsExport { get; set; }
        public virtual DbSet<VErt> VErt { get; set; }
        public virtual DbSet<VFilemonitoring> VFilemonitoring { get; set; }
        public virtual DbSet<VForexdeal> VForexdeal { get; set; }
        public virtual DbSet<VForexdealNett> VForexdealNett { get; set; }
        public virtual DbSet<VFullcouponmatrix> VFullcouponmatrix { get; set; }
        public virtual DbSet<VFxbal2> VFxbal2 { get; set; }
        public virtual DbSet<VFxexp> VFxexp { get; set; }
        public virtual DbSet<VFxexpdtl> VFxexpdtl { get; set; }
        public virtual DbSet<VFxexpplusfx> VFxexpplusfx { get; set; }
        public virtual DbSet<VFxn> VFxn { get; set; }
        public virtual DbSet<VFxn1> VFxn1 { get; set; }
        public virtual DbSet<VFxn2> VFxn2 { get; set; }
        public virtual DbSet<VFxocp2> VFxocp2 { get; set; }
        public virtual DbSet<VFxocp21> VFxocp21 { get; set; }
        public virtual DbSet<VFxocp3> VFxocp3 { get; set; }
        public virtual DbSet<VFxocp31> VFxocp31 { get; set; }
        public virtual DbSet<VFxop2> VFxop2 { get; set; }
        public virtual DbSet<VFxpair2> VFxpair2 { get; set; }
        public virtual DbSet<VFxreeval> VFxreeval { get; set; }
        public virtual DbSet<VFxreeval2> VFxreeval2 { get; set; }
        public virtual DbSet<VFxreeval2Nett> VFxreeval2Nett { get; set; }
        public virtual DbSet<VFxreevalNett> VFxreevalNett { get; set; }
        public virtual DbSet<VGkoofzdpl> VGkoofzdpl { get; set; }
        public virtual DbSet<VGkoofzdpl4> VGkoofzdpl4 { get; set; }
        public virtual DbSet<VGkoofzdplnew> VGkoofzdplnew { get; set; }
        public virtual DbSet<VIeAthenaCurrrate> VIeAthenaCurrrate { get; set; }
        public virtual DbSet<VIeBtrtCurrrate> VIeBtrtCurrrate { get; set; }
        public virtual DbSet<VIeDealapgcm> VIeDealapgcm { get; set; }
        public virtual DbSet<VIeDealathena> VIeDealathena { get; set; }
        public virtual DbSet<VIeDealatlas> VIeDealatlas { get; set; }
        public virtual DbSet<VIeDealcrs> VIeDealcrs { get; set; }
        public virtual DbSet<VIeDealdiasoftEq> VIeDealdiasoftEq { get; set; }
        public virtual DbSet<VIeDealdiasoftFm> VIeDealdiasoftFm { get; set; }
        public virtual DbSet<VIeDealmoex> VIeDealmoex { get; set; }
        public virtual DbSet<VIeDealregulus> VIeDealregulus { get; set; }
        public virtual DbSet<VIeDealsummit> VIeDealsummit { get; set; }
        public virtual DbSet<VIeDiasoftlocks> VIeDiasoftlocks { get; set; }
        public virtual DbSet<VIeEqPrice> VIeEqPrice { get; set; }
        public virtual DbSet<VIeEqYeldPrice> VIeEqYeldPrice { get; set; }
        public virtual DbSet<VIeErms> VIeErms { get; set; }
        public virtual DbSet<VIeFile> VIeFile { get; set; }
        public virtual DbSet<VIeFilerecords> VIeFilerecords { get; set; }
        public virtual DbSet<VIeInterfacedealstatus> VIeInterfacedealstatus { get; set; }
        public virtual DbSet<VIeLaunch> VIeLaunch { get; set; }
        public virtual DbSet<VIeLaunchsettings> VIeLaunchsettings { get; set; }
        public virtual DbSet<VIeLoropayents> VIeLoropayents { get; set; }
        public virtual DbSet<VIeLoropaymets> VIeLoropaymets { get; set; }
        public virtual DbSet<VIeNostropayments> VIeNostropayments { get; set; }
        public virtual DbSet<VIePaymentsCurr> VIePaymentsCurr { get; set; }
        public virtual DbSet<VIePaymentsRub> VIePaymentsRub { get; set; }
        public virtual DbSet<VIeQuiklocks> VIeQuiklocks { get; set; }
        public virtual DbSet<VIeRepodeals> VIeRepodeals { get; set; }
        public virtual DbSet<VIeSmvistaCurrrate> VIeSmvistaCurrrate { get; set; }
        public virtual DbSet<VIntswap> VIntswap { get; set; }
        public virtual DbSet<VIrr> VIrr { get; set; }
        public virtual DbSet<VIrr2> VIrr2 { get; set; }
        public virtual DbSet<VLastSummitdeal> VLastSummitdeal { get; set; }
        public virtual DbSet<VLimtrend> VLimtrend { get; set; }
        public virtual DbSet<VLiq3mm> VLiq3mm { get; set; }
        public virtual DbSet<VListoffxdeal> VListoffxdeal { get; set; }
        public virtual DbSet<VListofmmdeal> VListofmmdeal { get; set; }
        public virtual DbSet<VMinfindpl> VMinfindpl { get; set; }
        public virtual DbSet<VMinfindplnew> VMinfindplnew { get; set; }
        public virtual DbSet<VMmgap> VMmgap { get; set; }
        public virtual DbSet<VMmgapnew> VMmgapnew { get; set; }
        public virtual DbSet<VMmopl2> VMmopl2 { get; set; }
        public virtual DbSet<VMmopl21> VMmopl21 { get; set; }
        public virtual DbSet<VMmroll3Rider> VMmroll3Rider { get; set; }
        public virtual DbSet<VMmrollLt1> VMmrollLt1 { get; set; }
        public virtual DbSet<VMmrollRider> VMmrollRider { get; set; }
        public virtual DbSet<VMmrollT1> VMmrollT1 { get; set; }
        public virtual DbSet<VNetting> VNetting { get; set; }
        public virtual DbSet<VNetting1> VNetting1 { get; set; }
        public virtual DbSet<VNetting2> VNetting2 { get; set; }
        public virtual DbSet<VNettpos> VNettpos { get; set; }
        public virtual DbSet<VNettpos1> VNettpos1 { get; set; }
        public virtual DbSet<VNettpos2> VNettpos2 { get; set; }
        public virtual DbSet<VNettpos3> VNettpos3 { get; set; }
        public virtual DbSet<VNettposfx> VNettposfx { get; set; }
        public virtual DbSet<VNorm6coeff> VNorm6coeff { get; set; }
        public virtual DbSet<VOffmarkettradesfx> VOffmarkettradesfx { get; set; }
        public virtual DbSet<VOffmarkettradesmm> VOffmarkettradesmm { get; set; }
        public virtual DbSet<VOpenbonds> VOpenbonds { get; set; }
        public virtual DbSet<VOpenbonds2> VOpenbonds2 { get; set; }
        public virtual DbSet<VOpenbondsDelivRub> VOpenbondsDelivRub { get; set; }
        public virtual DbSet<VOpenbondsReconc> VOpenbondsReconc { get; set; }
        public virtual DbSet<VOpenbondsUndelivRub> VOpenbondsUndelivRub { get; set; }
        public virtual DbSet<VOrgs> VOrgs { get; set; }
        public virtual DbSet<VPkAggrpaym> VPkAggrpaym { get; set; }
        public virtual DbSet<VPkAssetlocks> VPkAssetlocks { get; set; }
        public virtual DbSet<VPkAssetlocksTree> VPkAssetlocksTree { get; set; }
        public virtual DbSet<VPkAssetlocksTree1> VPkAssetlocksTree1 { get; set; }
        public virtual DbSet<VPkBooks> VPkBooks { get; set; }
        public virtual DbSet<VPkBrief> VPkBrief { get; set; }
        public virtual DbSet<VPkBriefdict> VPkBriefdict { get; set; }
        public virtual DbSet<VPkBroker> VPkBroker { get; set; }
        public virtual DbSet<VPkClientacc> VPkClientacc { get; set; }
        public virtual DbSet<VPkClientpaym> VPkClientpaym { get; set; }
        public virtual DbSet<VPkClientpaymSettings> VPkClientpaymSettings { get; set; }
        public virtual DbSet<VPkCurracc> VPkCurracc { get; set; }
        public virtual DbSet<VPkCurrency> VPkCurrency { get; set; }
        public virtual DbSet<VPkCurrpaym> VPkCurrpaym { get; set; }
        public virtual DbSet<VPkCurrweights> VPkCurrweights { get; set; }
        public virtual DbSet<VPkDealers> VPkDealers { get; set; }
        public virtual DbSet<VPkEqproducts> VPkEqproducts { get; set; }
        public virtual DbSet<VPkEqproducts2> VPkEqproducts2 { get; set; }
        public virtual DbSet<VPkLoropaym> VPkLoropaym { get; set; }
        public virtual DbSet<VPkNettdata> VPkNettdata { get; set; }
        public virtual DbSet<VPkOption> VPkOption { get; set; }
        public virtual DbSet<VPkOptions> VPkOptions { get; set; }
        public virtual DbSet<VPkOrgnett> VPkOrgnett { get; set; }
        public virtual DbSet<VPkOrgs> VPkOrgs { get; set; }
        public virtual DbSet<VPkPkBrief> VPkPkBrief { get; set; }
        public virtual DbSet<VPkQuikclasses> VPkQuikclasses { get; set; }
        public virtual DbSet<VPkQuikclassesDetail> VPkQuikclassesDetail { get; set; }
        public virtual DbSet<VPkRacepaym> VPkRacepaym { get; set; }
        public virtual DbSet<VPkRatecbrf> VPkRatecbrf { get; set; }
        public virtual DbSet<VPkRecres> VPkRecres { get; set; }
        public virtual DbSet<VPkRemains> VPkRemains { get; set; }
        public virtual DbSet<VPkRepo> VPkRepo { get; set; }
        public virtual DbSet<VPkRepoPerform> VPkRepoPerform { get; set; }
        public virtual DbSet<VPkSbsec> VPkSbsec { get; set; }
        public virtual DbSet<VPkSecacc> VPkSecacc { get; set; }
        public virtual DbSet<VPkSecprice> VPkSecprice { get; set; }
        public virtual DbSet<VPkSecurities> VPkSecurities { get; set; }
        public virtual DbSet<VPkTranshes> VPkTranshes { get; set; }
        public virtual DbSet<VPkTranshes2> VPkTranshes2 { get; set; }
        public virtual DbSet<VPkVtm1> VPkVtm1 { get; set; }
        public virtual DbSet<VPl> VPl { get; set; }
        public virtual DbSet<VPlQuery> VPlQuery { get; set; }
        public virtual DbSet<VPositionreeval> VPositionreeval { get; set; }
        public virtual DbSet<VRates2> VRates2 { get; set; }
        public virtual DbSet<VRegulusDepo> VRegulusDepo { get; set; }
        public virtual DbSet<VRegulusForex1> VRegulusForex1 { get; set; }
        public virtual DbSet<VRegulusForex2> VRegulusForex2 { get; set; }
        public virtual DbSet<VRemrurliq> VRemrurliq { get; set; }
        public virtual DbSet<VRepo> VRepo { get; set; }
        public virtual DbSet<VRepoProv1> VRepoProv1 { get; set; }
        public virtual DbSet<VRepoProv2> VRepoProv2 { get; set; }
        public virtual DbSet<VRepoProv3> VRepoProv3 { get; set; }
        public virtual DbSet<VRepoProv4> VRepoProv4 { get; set; }
        public virtual DbSet<VReportstatTick> VReportstatTick { get; set; }
        public virtual DbSet<VReposums> VReposums { get; set; }
        public virtual DbSet<VRoles> VRoles { get; set; }
        public virtual DbSet<VRptDepoatlas> VRptDepoatlas { get; set; }
        public virtual DbSet<VRptForexPlrub> VRptForexPlrub { get; set; }
        public virtual DbSet<VRptGkorskBook> VRptGkorskBook { get; set; }
        public virtual DbSet<VRptGkorskBook1> VRptGkorskBook1 { get; set; }
        public virtual DbSet<VRptGkorskBook10> VRptGkorskBook10 { get; set; }
        public virtual DbSet<VRptGkorskBook11> VRptGkorskBook11 { get; set; }
        public virtual DbSet<VRptGkorskBookPl> VRptGkorskBookPl { get; set; }
        public virtual DbSet<VRptPos1> VRptPos1 { get; set; }
        public virtual DbSet<VRptRepobrockClientposition> VRptRepobrockClientposition { get; set; }
        public virtual DbSet<VRptRepobrockMatch> VRptRepobrockMatch { get; set; }
        public virtual DbSet<VRptRepobrockTurnover> VRptRepobrockTurnover { get; set; }
        public virtual DbSet<VRurbondscurr> VRurbondscurr { get; set; }
        public virtual DbSet<VRurbondsinfo> VRurbondsinfo { get; set; }
        public virtual DbSet<VRurbsc2> VRurbsc2 { get; set; }
        public virtual DbSet<VRurrepoProv> VRurrepoProv { get; set; }
        public virtual DbSet<VRurrepopl> VRurrepopl { get; set; }
        public virtual DbSet<VSalespersons> VSalespersons { get; set; }
        public virtual DbSet<VSbsec> VSbsec { get; set; }
        public virtual DbSet<VSbsecminnom> VSbsecminnom { get; set; }
        public virtual DbSet<VSbsecsaldo> VSbsecsaldo { get; set; }
        public virtual DbSet<VSecop> VSecop { get; set; }
        public virtual DbSet<VSecop2> VSecop2 { get; set; }
        public virtual DbSet<VSecprice> VSecprice { get; set; }
        public virtual DbSet<VSecrates> VSecrates { get; set; }
        public virtual DbSet<VSecrates2> VSecrates2 { get; set; }
        public virtual DbSet<VSecurityprofiles> VSecurityprofiles { get; set; }
        public virtual DbSet<VSummitDepo> VSummitDepo { get; set; }
        public virtual DbSet<VSummitFi> VSummitFi { get; set; }
        public virtual DbSet<VSummitForex> VSummitForex { get; set; }
        public virtual DbSet<VSummitFutures> VSummitFutures { get; set; }
        public virtual DbSet<VSummitRepoi> VSummitRepoi { get; set; }
        public virtual DbSet<VSummitSbsec> VSummitSbsec { get; set; }
        public virtual DbSet<VSwappos> VSwappos { get; set; }
        public virtual DbSet<VSwappos1> VSwappos1 { get; set; }
        public virtual DbSet<VSwappos2> VSwappos2 { get; set; }
        public virtual DbSet<VSwappos3> VSwappos3 { get; set; }
        public virtual DbSet<VSwappos4> VSwappos4 { get; set; }
        public virtual DbSet<VSwpdpl> VSwpdpl { get; set; }
        public virtual DbSet<VSystem> VSystem { get; set; }
        public virtual DbSet<VSystemmenu> VSystemmenu { get; set; }
        public virtual DbSet<VSystemmenu3> VSystemmenu3 { get; set; }
        public virtual DbSet<VTmpNorm6> VTmpNorm6 { get; set; }
        public virtual DbSet<VTmpNorm6detail> VTmpNorm6detail { get; set; }
        public virtual DbSet<VTmpsbsec> VTmpsbsec { get; set; }
        public virtual DbSet<VTotpaym> VTotpaym { get; set; }
        public virtual DbSet<VTotpaymsettl> VTotpaymsettl { get; set; }
        public virtual DbSet<VTransferdepts> VTransferdepts { get; set; }
        public virtual DbSet<VTries> VTries { get; set; }
        public virtual DbSet<VUsedpasswords> VUsedpasswords { get; set; }
        public virtual DbSet<VUserCurrratehist> VUserCurrratehist { get; set; }
        public virtual DbSet<VUserCurrratehistory> VUserCurrratehistory { get; set; }
        public virtual DbSet<VUserprofiles> VUserprofiles { get; set; }
        public virtual DbSet<VUserroles> VUserroles { get; set; }
        public virtual DbSet<VUsers> VUsers { get; set; }
        public virtual DbSet<VVtm1> VVtm1 { get; set; }
        public virtual DbSet<VVtmAfinaSelect> VVtmAfinaSelect { get; set; }
        public virtual DbSet<VVtmDepoClients> VVtmDepoClients { get; set; }
        public virtual DbSet<VVtmFxClients> VVtmFxClients { get; set; }
        public virtual DbSet<VVtmSbsecClients> VVtmSbsecClients { get; set; }
        public virtual DbSet<VYearequiv> VYearequiv { get; set; }
        public virtual DbSet<Valuedictionary> Valuedictionary { get; set; }
        public virtual DbSet<Vcurrpos> Vcurrpos { get; set; }
        public virtual DbSet<VtmCodes> VtmCodes { get; set; }
        public virtual DbSet<VtmPeriods> VtmPeriods { get; set; }
        public virtual DbSet<VtmProducts> VtmProducts { get; set; }
        public virtual DbSet<VtmSpreads> VtmSpreads { get; set; }
        public virtual DbSet<VxFxn> VxFxn { get; set; }
        public virtual DbSet<VxFxn2a> VxFxn2a { get; set; }
        public virtual DbSet<VxFxn4a> VxFxn4a { get; set; }
        public virtual DbSet<VxNetting> VxNetting { get; set; }
        public virtual DbSet<VxNetting2a> VxNetting2a { get; set; }
        public virtual DbSet<Workspaces> Workspaces { get; set; }
        public virtual DbSet<Xcurrratehist> Xcurrratehist { get; set; }
        public virtual DbSet<Xdates> Xdates { get; set; }
        public virtual DbSet<Xdepo> Xdepo { get; set; }
        public virtual DbSet<Xeqdeals> Xeqdeals { get; set; }
        public virtual DbSet<Xeqdeals2> Xeqdeals2 { get; set; }
        public virtual DbSet<XeqdealsH> XeqdealsH { get; set; }
        public virtual DbSet<XeqdealsH1> XeqdealsH1 { get; set; }
        public virtual DbSet<XeqdealsHForm> XeqdealsHForm { get; set; }
        public virtual DbSet<XeqdealsPrints> XeqdealsPrints { get; set; }
        public virtual DbSet<Xforex> Xforex { get; set; }
        public virtual DbSet<XforexNett> XforexNett { get; set; }
        public virtual DbSet<XforexNettBo> XforexNettBo { get; set; }
        public virtual DbSet<XforexNettRm> XforexNettRm { get; set; }
        public virtual DbSet<Xfutures> Xfutures { get; set; }
        public virtual DbSet<Xinteroffpaym> Xinteroffpaym { get; set; }
        public virtual DbSet<Xrepo> Xrepo { get; set; }
        public virtual DbSet<Xreposums> Xreposums { get; set; }
        public virtual DbSet<Xrurrepo> Xrurrepo { get; set; }
        public virtual DbSet<Xrurreposums> Xrurreposums { get; set; }
        public virtual DbSet<Xsbsec> Xsbsec { get; set; }
        public virtual DbSet<Xsbsecreval> Xsbsecreval { get; set; }
        public virtual DbSet<Xticketprint> Xticketprint { get; set; }
        public virtual DbSet<Xtrans> Xtrans { get; set; }
        public virtual DbSet<Yieldcvalue> Yieldcvalue { get; set; }
        public virtual DbSet<Yieldperiods> Yieldperiods { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseOracle("User Id=poskeeper;Password=poskeeper;Data Source=172.18.2.105:1521/fvsdb;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:DefaultSchema", "POSKEEPER");

            modelBuilder.Entity<Accessrights>(entity =>
            {
                entity.HasKey(e => e.Naccrightkey)
                    .HasName("SYS_C008041");

                entity.ToTable("ACCESSRIGHTS");

                entity.HasIndex(e => e.Caccrightcode)
                    .HasName("XAK1ACCESSRIGHTS")
                    .IsUnique();

                entity.HasIndex(e => e.Nrighttypekey)
                    .HasName("XIF2ACCESSRIGHTS");

                entity.Property(e => e.Naccrightkey)
                    .HasColumnName("NACCRIGHTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Caccrightcode)
                    .HasColumnName("CACCRIGHTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Caccrightname)
                    .HasColumnName("CACCRIGHTNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nrighttypekey)
                    .HasColumnName("NRIGHTTYPEKEY")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Accessrules>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACCESSRULES");

                entity.Property(e => e.Baddtosystem)
                    .HasColumnName("BADDTOSYSTEM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccrightkey)
                    .HasColumnName("NACCRIGHTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmenukey)
                    .HasColumnName("NMENUKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrolekey)
                    .HasColumnName("NROLEKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NrolekeyNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Nrolekey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C009992");
            });

            modelBuilder.Entity<Acrbinterest>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Ntranshkey });

                entity.ToTable("ACRBINTEREST");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrsum)
                    .HasColumnName("NACRSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<AdSettings>(entity =>
            {
                entity.HasKey(e => e.Nsettingkey)
                    .HasName("AD_SETTINGS_PK");

                entity.ToTable("AD_SETTINGS");

                entity.Property(e => e.Nsettingkey)
                    .HasColumnName("NSETTINGKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csettingname)
                    .HasColumnName("CSETTINGNAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Csettingvalue)
                    .HasColumnName("CSETTINGVALUE")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AqMqmsgInQtab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AQ$MQMSG_IN_QTAB");
            });

            modelBuilder.Entity<AqMqmsgInQtabF>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AQ$_MQMSG_IN_QTAB_F");
            });

            modelBuilder.Entity<Assetlocks>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ASSETLOCKS");

                entity.Property(e => e.Casset)
                    .HasColumnName("CASSET")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradercode)
                    .HasColumnName("CTRADERCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nid)
                    .HasColumnName("NID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlocked)
                    .HasColumnName("NLOCKED")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<AthenaMatch>(entity =>
            {
                entity.HasKey(e => e.Ndealkey);

                entity.ToTable("ATHENA_MATCH");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ctable)
                    .HasColumnName("CTABLE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasDefaultValueSql(@"0
");
            });

            modelBuilder.Entity<AthenaXdates>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ATHENA_XDATES");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Itype)
                    .HasColumnName("ITYPE")
                    .HasColumnType("CHAR(1)");
            });

            modelBuilder.Entity<AtheneimportedFx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ATHENEIMPORTED_FX");

                entity.HasIndex(e => e.Ddealdate)
                    .HasName("I1_ATHENEIMPORTED_FX");

                entity.HasIndex(e => e.Dmodifdate)
                    .HasName("I0_ATHENEIMPORTED_FX");

                entity.HasIndex(e => e.Dvaluedateb)
                    .HasName("I2_ATHENEIMPORTED_FX");

                entity.HasIndex(e => e.Dvaluedates)
                    .HasName("I3_ATHENEIMPORTED_FX");

                entity.HasIndex(e => new { e.Ddealdate, e.Imatchstatus })
                    .HasName("I6_ATHENEIMPORTED_FX");

                entity.Property(e => e.Bnondeliverable).HasColumnName("BNONDELIVERABLE");

                entity.Property(e => e.Cathenebookcode)
                    .HasColumnName("CATHENEBOOKCODE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cgridid)
                    .HasColumnName("CGRIDID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ddealdate)
                    .HasColumnName("DDEALDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dealtypelabel)
                    .HasColumnName("DEALTYPELABEL")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dmodifdate)
                    .HasColumnName("DMODIFDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Imatchstatus)
                    .HasColumnName("IMATCHSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfavoritid)
                    .HasColumnName("NFAVORITID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<AtheneimportedMm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ATHENEIMPORTED_MM");

                entity.HasIndex(e => e.Ddealdate)
                    .HasName("I1_ATHENEIMPORTED_MM");

                entity.HasIndex(e => e.Dmodifdate)
                    .HasName("I0_ATHENEIMPORTED_MM");

                entity.HasIndex(e => e.Dvaluedate)
                    .HasName("I2_ATHENEIMPORTED_MM");

                entity.HasIndex(e => e.Dvaluedate2)
                    .HasName("I3_ATHENEIMPORTED_MM");

                entity.HasIndex(e => new { e.Ddealdate, e.Imatchstatus })
                    .HasName("I6_ATHENEIMPORTED_MM");

                entity.Property(e => e.Cathenebookcode)
                    .HasColumnName("CATHENEBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cgridid)
                    .HasColumnName("CGRIDID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ddealdate)
                    .HasColumnName("DDEALDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dealtypelabel)
                    .HasColumnName("DEALTYPELABEL")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dmodifdate)
                    .HasColumnName("DMODIFDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Imatchstatus)
                    .HasColumnName("IMATCHSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfavoritid)
                    .HasColumnName("NFAVORITID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<AtheneimportedPaym>(entity =>
            {
                entity.HasKey(e => e.Npaymkey);

                entity.ToTable("ATHENEIMPORTED_PAYM");

                entity.Property(e => e.Npaymkey)
                    .HasColumnName("NPAYMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bposition)
                    .HasColumnName("BPOSITION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cgridid)
                    .HasColumnName("CGRIDID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Imatchstatus)
                    .HasColumnName("IMATCHSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfavoritid)
                    .HasColumnName("NFAVORITID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<AtheneimportedPaymsum>(entity =>
            {
                entity.HasKey(e => e.Npaymkey);

                entity.ToTable("ATHENEIMPORTED_PAYMSUM");

                entity.Property(e => e.Npaymkey)
                    .HasColumnName("NPAYMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bposition)
                    .HasColumnName("BPOSITION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cgridid)
                    .HasColumnName("CGRIDID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Imatchstatus)
                    .HasColumnName("IMATCHSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfavoritid)
                    .HasColumnName("NFAVORITID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<AthenepaymMatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ATHENEPAYM_MATCH");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<Availablecolumns>(entity =>
            {
                entity.HasKey(e => e.Navailcolkey)
                    .HasName("SYS_C008059");

                entity.ToTable("AVAILABLECOLUMNS");

                entity.Property(e => e.Navailcolkey)
                    .HasColumnName("NAVAILCOLKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cavailcolname)
                    .HasColumnName("CAVAILCOLNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cavailcoltypecode)
                    .HasColumnName("CAVAILCOLTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfield)
                    .HasColumnName("CFIELD")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CavailcoltypecodeNavigation)
                    .WithMany(p => p.Availablecolumns)
                    .HasForeignKey(d => d.Cavailcoltypecode)
                    .HasConstraintName("SYS_C009994");

                entity.HasOne(d => d.NrepkeyNavigation)
                    .WithMany(p => p.Availablecolumns)
                    .HasForeignKey(d => d.Nrepkey)
                    .HasConstraintName("SYS_C009993");
            });

            modelBuilder.Entity<Availablecolumntypes>(entity =>
            {
                entity.HasKey(e => e.Cavailcoltypecode)
                    .HasName("SYS_C008061");

                entity.ToTable("AVAILABLECOLUMNTYPES");

                entity.Property(e => e.Cavailcoltypecode)
                    .HasColumnName("CAVAILCOLTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Availablefields>(entity =>
            {
                entity.HasKey(e => e.Navailfkey)
                    .HasName("SYS_C008065");

                entity.ToTable("AVAILABLEFIELDS");

                entity.Property(e => e.Navailfkey)
                    .HasColumnName("NAVAILFKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cavailfname)
                    .HasColumnName("CAVAILFNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cavailtypecode)
                    .HasColumnName("CAVAILTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrystalexpr)
                    .HasColumnName("CCRYSTALEXPR")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cdict)
                    .HasColumnName("CDICT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfield)
                    .HasColumnName("CFIELD")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Clookupfield)
                    .HasColumnName("CLOOKUPFIELD")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Clookuptable)
                    .HasColumnName("CLOOKUPTABLE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nclassifkey)
                    .HasColumnName("NCLASSIFKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CavailtypecodeNavigation)
                    .WithMany(p => p.Availablefields)
                    .HasForeignKey(d => d.Cavailtypecode)
                    .HasConstraintName("SYS_C009996");

                entity.HasOne(d => d.NclassifkeyNavigation)
                    .WithMany(p => p.Availablefields)
                    .HasForeignKey(d => d.Nclassifkey)
                    .HasConstraintName("SYS_C009995");

                entity.HasOne(d => d.NrepkeyNavigation)
                    .WithMany(p => p.Availablefields)
                    .HasForeignKey(d => d.Nrepkey)
                    .HasConstraintName("SYS_C009997");
            });

            modelBuilder.Entity<Availablefieldtypes>(entity =>
            {
                entity.HasKey(e => e.Cavailtypecode)
                    .HasName("SYS_C008067");

                entity.ToTable("AVAILABLEFIELDTYPES");

                entity.Property(e => e.Cavailtypecode)
                    .HasColumnName("CAVAILTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Availablegroups>(entity =>
            {
                entity.HasKey(e => e.Navalgrkey)
                    .HasName("SYS_C008070");

                entity.ToTable("AVAILABLEGROUPS");

                entity.Property(e => e.Navalgrkey)
                    .HasColumnName("NAVALGRKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cavailgrname)
                    .HasColumnName("CAVAILGRNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cfield)
                    .HasColumnName("CFIELD")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NrepkeyNavigation)
                    .WithMany(p => p.Availablegroups)
                    .HasForeignKey(d => d.Nrepkey)
                    .HasConstraintName("SYS_C009998");
            });

            modelBuilder.Entity<Basereports>(entity =>
            {
                entity.HasKey(e => e.Nrepkey)
                    .HasName("SYS_C008072");

                entity.ToTable("BASEREPORTS");

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccrystalfile)
                    .HasColumnName("CCRYSTALFILE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cexcelfile)
                    .HasColumnName("CEXCELFILE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Crepname)
                    .HasColumnName("CREPNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ctable)
                    .HasColumnName("CTABLE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nactivevar)
                    .HasColumnName("NACTIVEVAR")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Bbgerrors>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BBGERRORS");

                entity.HasIndex(e => e.Ddate)
                    .HasName("BBGERRORS_I2");

                entity.HasIndex(e => e.Ntradenum)
                    .HasName("BBGERRORS_I1");

                entity.Property(e => e.Bprocess).HasColumnName("BPROCESS");

                entity.Property(e => e.Cerror)
                    .HasColumnName("CERROR")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nkey)
                    .HasColumnName("NKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Bondstat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BONDSTAT");

                entity.HasIndex(e => e.Ntranshkey)
                    .HasName("I1_BONDSTAT");

                entity.HasIndex(e => new { e.Ndealkey, e.Ddealdate })
                    .HasName("I2_BONDSTAT");

                entity.Property(e => e.Ddealdate)
                    .HasColumnName("DDEALDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealprice)
                    .HasColumnName("NDEALPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposafter)
                    .HasColumnName("NPOSAFTER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposbefore)
                    .HasColumnName("NPOSBEFORE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nweightedprice)
                    .HasColumnName("NWEIGHTEDPRICE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Books>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("SYS_C008078");

                entity.ToTable("BOOKS");

                entity.Property(e => e.Id)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasDefaultValueSql(@"1
");

                entity.Property(e => e.Bathenaintexport)
                    .HasColumnName("BATHENAINTEXPORT")
                    .HasDefaultValueSql(@"1
");

                entity.Property(e => e.Batlasexport)
                    .HasColumnName("BATLASEXPORT")
                    .HasDefaultValueSql("1 ");

                entity.Property(e => e.Bcrsexport)
                    .HasColumnName("BCRSEXPORT")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bprintmmdepartment)
                    .HasColumnName("BPRINTMMDEPARTMENT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bsummitexport)
                    .HasColumnName("BSUMMITEXPORT")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Cathenabookcode)
                    .HasColumnName("CATHENABOOKCODE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Catlasbookcode)
                    .HasColumnName("CATLASBOOKCODE")
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cblombergbook)
                    .HasColumnName("CBLOMBERGBOOK")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cblomberglogin)
                    .HasColumnName("CBLOMBERGLOGIN")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookname)
                    .HasColumnName("CBOOKNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccompany)
                    .HasColumnName("CCOMPANY")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql(@"'INGMOS'
");

                entity.Property(e => e.Ccounterparty)
                    .HasColumnName("CCOUNTERPARTY")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccrsbookcode)
                    .HasColumnName("CCRSBOOKCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdiasoftbookcode)
                    .HasColumnName("CDIASOFTBOOKCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitbookcode)
                    .HasColumnName("CSUMMITBOOKCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitdeskcode)
                    .HasColumnName("CSUMMITDESKCODE")
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CcounterpartyNavigation)
                    .WithMany(p => p.Books)
                    .HasForeignKey(d => d.Ccounterparty)
                    .HasConstraintName("FK1_BOOKS");
            });

            modelBuilder.Entity<Briefdict>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BRIEFDICT");

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CorgcodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Corgcode)
                    .HasConstraintName("FK1_BRIEFDICT");
            });

            modelBuilder.Entity<Brokers>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("SYS_C008081");

                entity.ToTable("BROKERS");

                entity.HasIndex(e => e.Ccode)
                    .HasName("U1_BROKERS")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("NBROKERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Creutercode)
                    .HasColumnName("CREUTERCODE")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Capital>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Ccurrcode })
                    .HasName("SYS_C008085");

                entity.ToTable("CAPITAL");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ncapital)
                    .HasColumnName("NCAPITAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlimit)
                    .HasColumnName("NLIMIT")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.Capital)
                    .HasForeignKey(d => d.Ccurrcode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010002");
            });

            modelBuilder.Entity<Clientpl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CLIENTPL");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Corgcode)
                    .IsRequired()
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .IsRequired()
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Depoday)
                    .HasColumnName("DEPODAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Depomonth)
                    .HasColumnName("DEPOMONTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Depoweek)
                    .HasColumnName("DEPOWEEK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Depoyear)
                    .HasColumnName("DEPOYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxday)
                    .HasColumnName("FXDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxmonth)
                    .HasColumnName("FXMONTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxweek)
                    .HasColumnName("FXWEEK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxyear)
                    .HasColumnName("FXYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Gkoday)
                    .HasColumnName("GKODAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Gkomonth)
                    .HasColumnName("GKOMONTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Gkoweek)
                    .HasColumnName("GKOWEEK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Gkoyear)
                    .HasColumnName("GKOYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mofday)
                    .HasColumnName("MOFDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mofmonth)
                    .HasColumnName("MOFMONTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mofweek)
                    .HasColumnName("MOFWEEK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mofyear)
                    .HasColumnName("MOFYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Strday)
                    .HasColumnName("STRDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Strmonth)
                    .HasColumnName("STRMONTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Strweek)
                    .HasColumnName("STRWEEK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Stryear)
                    .HasColumnName("STRYEAR")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Closedbonds>(entity =>
            {
                entity.HasKey(e => new { e.Dportdate, e.Ntranshkey, e.Nselldealkey, e.Nbuydealkey })
                    .HasName("SYS_C008087");

             

                entity.ToTable("CLOSEDBONDS");

                entity.HasIndex(e => new { e.Dportdate, e.Nbuydealkey })
                    .HasName("I_CLOSEDBONDS1");

                entity.Property(e => e.Dportdate)
                    .HasColumnName("DPORTDATE")
                    .HasColumnType("DATE");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
                  //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nselldealkey)
                    .HasColumnName("NSELLDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbuydealkey)
                    .HasColumnName("NBUYDEALKEY")
                    .HasColumnType("NUMBER");
                   // .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icpf)
                    .HasColumnName("ICPF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytm)
                    .HasColumnName("NYTM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Closedbondsdeliv>(entity =>
            {
                entity.HasKey(e => new { e.Dportdate, e.Ntranshkey, e.Nselldealkey, e.Nbuydealkey })
                    .HasName("SYS_C008092");

                entity.ToTable("CLOSEDBONDSDELIV");

                entity.HasIndex(e => new { e.Dportdate, e.Nbuydealkey })
                    .HasName("I_CLOSEDBONDSDELIV2");

                entity.Property(e => e.Dportdate)
                    .HasColumnName("DPORTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselldealkey)
                    .HasColumnName("NSELLDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuydealkey)
                    .HasColumnName("NBUYDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icpf)
                    .HasColumnName("ICPF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytm)
                    .HasColumnName("NYTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Closedbondsdelivrub>(entity =>
            {
                entity.HasKey(e => new { e.Dportdate, e.Ntranshkey, e.Nselldealkey, e.Nbuydealkey })
                    .HasName("SYS_C008097");

                entity.ToTable("CLOSEDBONDSDELIVRUB");

                entity.HasIndex(e => new { e.Dportdate, e.Nbuydealkey })
                    .HasName("I_CLOSEDBONDSDELIVRUB2");

                entity.Property(e => e.Dportdate)
                    .HasColumnName("DPORTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselldealkey)
                    .HasColumnName("NSELLDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuydealkey)
                    .HasColumnName("NBUYDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icpf)
                    .HasColumnName("ICPF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytm)
                    .HasColumnName("NYTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Closedequities>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CLOSEDEQUITIES");

                entity.HasIndex(e => e.Dchangedatetime)
                    .HasName("I2_CLEQ_DCHANGEDATETIME");

                entity.HasIndex(e => new { e.Ddate, e.Nequitykey })
                    .HasName("I1_CLOSEDEQUITIES");

                entity.HasIndex(e => new { e.Deqsettdate, e.Nequitykey })
                    .HasName("I3_CLOSEDEQUITIES");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrency)
                    .HasColumnName("CTRADECURRENCY")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Deqsettdate)
                    .HasColumnName("DEQSETTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbuydealkey)
                    .HasColumnName("NBUYDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricebuy)
                    .HasColumnName("NPRICEBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricesell)
                    .HasColumnName("NPRICESELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselldealkey)
                    .HasColumnName("NSELLDEALKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NequitykeyNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Nequitykey)
                    .HasConstraintName("SYS_C0010006");
            });

            modelBuilder.Entity<Collistline>(entity =>
            {
                entity.HasKey(e => e.Ncollistlinekey)
                    .HasName("SYS_C008101");

                entity.ToTable("COLLISTLINE");

                entity.Property(e => e.Ncollistlinekey)
                    .HasColumnName("NCOLLISTLINEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navailcolkey)
                    .HasColumnName("NAVAILCOLKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncollistkey)
                    .HasColumnName("NCOLLISTKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NavailcolkeyNavigation)
                    .WithMany(p => p.Collistline)
                    .HasForeignKey(d => d.Navailcolkey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C0010007");

                entity.HasOne(d => d.NcollistkeyNavigation)
                    .WithMany(p => p.Collistline)
                    .HasForeignKey(d => d.Ncollistkey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C0010008");
            });

            modelBuilder.Entity<Columnlists>(entity =>
            {
                entity.HasKey(e => e.Ncollistkey)
                    .HasName("SYS_C008103");

                entity.ToTable("COLUMNLISTS");

                entity.Property(e => e.Ncollistkey)
                    .HasColumnName("NCOLLISTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccollistname)
                    .HasColumnName("CCOLLISTNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NrepkeyNavigation)
                    .WithMany(p => p.Columnlists)
                    .HasForeignKey(d => d.Nrepkey)
                    .HasConstraintName("SYS_C0010009");
            });

            modelBuilder.Entity<Counterlimits>(entity =>
            {
                entity.HasKey(e => e.Nlimitkey)
                    .HasName("SYS_C008109");

                entity.ToTable("COUNTERLIMITS");

                entity.HasIndex(e => new { e.Corgcode, e.Dlimitdate })
                    .HasName("I1_COUNTERLIMITS");

                entity.Property(e => e.Nlimitkey)
                    .HasColumnName("NLIMITKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrossgroupcode)
                    .HasColumnName("CCROSSGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Criskgroupcode)
                    .HasColumnName("CRISKGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csubperiodcode)
                    .HasColumnName("CSUBPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dlimitdate)
                    .HasColumnName("DLIMITDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dlimitdateto)
                    .HasColumnName("DLIMITDATETO")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncommonlimit)
                    .HasColumnName("NCOMMONLIMIT")
                    .HasColumnType("NUMBER(19,2)");

                entity.HasOne(d => d.CcrossgroupcodeNavigation)
                    .WithMany(p => p.Counterlimits)
                    .HasForeignKey(d => d.Ccrossgroupcode)
                    .HasConstraintName("SYS_C0010011");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.Counterlimits)
                    .HasForeignKey(d => d.Ccurrcode)
                    .HasConstraintName("SYS_C0010013");

                entity.HasOne(d => d.CperiodcodeNavigation)
                    .WithMany(p => p.Counterlimits)
                    .HasForeignKey(d => d.Cperiodcode)
                    .HasConstraintName("SYS_C0010014");

                entity.HasOne(d => d.CriskgroupcodeNavigation)
                    .WithMany(p => p.Counterlimits)
                    .HasForeignKey(d => d.Criskgroupcode)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C0010012");

                entity.HasOne(d => d.C)
                    .WithMany(p => p.Counterlimits)
                    .HasForeignKey(d => new { d.Csubperiodcode, d.Cperiodcode })
                    .HasConstraintName("SYS_C0010010");
            });

            modelBuilder.Entity<Couponcalcmethod>(entity =>
            {
                entity.HasKey(e => e.Csposcode)
                    .HasName("SYS_C008111");

                entity.ToTable("COUPONCALCMETHOD");

                entity.Property(e => e.Csposcode)
                    .HasColumnName("CSPOSCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csposname)
                    .HasColumnName("CSPOSNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Couponmatrix>(entity =>
            {
                entity.HasKey(e => new { e.Ntranshkey, e.Dcoupondate })
                    .HasName("SYS_C008114");

                entity.ToTable("COUPONMATRIX");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dcoupondate)
                    .HasColumnName("DCOUPONDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncouponcorr)
                    .HasColumnName("NCOUPONCORR")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Nkupsum)
                    .HasColumnName("NKUPSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Createdusers>(entity =>
            {
                entity.HasKey(e => e.Cusername)
                    .HasName("SYS_C008116");

                entity.ToTable("CREATEDUSERS");

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Crosscountergroups>(entity =>
            {
                entity.HasKey(e => e.Ccrossgroupcode)
                    .HasName("SYS_C008118");

                entity.ToTable("CROSSCOUNTERGROUPS");

                entity.Property(e => e.Ccrossgroupcode)
                    .HasColumnName("CCROSSGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrossgroupcomment)
                    .HasColumnName("CCROSSGROUPCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Crsrequests>(entity =>
            {
                entity.HasKey(e => e.Nrequestkey)
                    .HasName("SYS_C008124");

                entity.ToTable("CRSREQUESTS");

                entity.HasIndex(e => e.Dadddate)
                    .HasName("I5_CRSREQUESTS");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I1_CRSREQUESTS");

                entity.HasIndex(e => new { e.Creference, e.Iresponseresult })
                    .HasName("I4_CRSREQUESTS");

                entity.HasIndex(e => new { e.Dregdate, e.Ndealkey })
                    .HasName("I2_CRSREQUESTS");

                entity.HasIndex(e => new { e.Dsenddate, e.Copcode })
                    .HasName("I3_CRSREQUESTS");

                entity.Property(e => e.Nrequestkey)
                    .HasColumnName("NREQUESTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creference)
                    .HasColumnName("CREFERENCE")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Cresponse)
                    .HasColumnName("CRESPONSE")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasColumnType("CHAR(18)");

                entity.Property(e => e.Dadddate)
                    .HasColumnName("DADDDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("SYSDATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dresponsedate)
                    .HasColumnName("DRESPONSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dsenddate)
                    .HasColumnName("DSENDDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Irequesttype)
                    .HasColumnName("IREQUESTTYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iresponseresult)
                    .HasColumnName("IRESPONSERESULT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("5 ");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey2)
                    .HasColumnName("NDEALKEY2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<CurraccOld>(entity =>
            {
                entity.HasKey(e => e.Nacckey)
                    .HasName("SYS_C008133");

                entity.ToTable("CURRACC_OLD");

                entity.HasIndex(e => e.Cacctypecode)
                    .HasName("XIF78CURRACC");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("XIF140CURRACC");

                entity.HasIndex(e => e.Corgcode)
                    .HasName("XIF74CURRACC");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bincludedealpos)
                    .HasColumnName("BINCLUDEDEALPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Caccbal)
                    .HasColumnName("CACCBAL")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Caccnum)
                    .HasColumnName("CACCNUM")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cacctypecode)
                    .HasColumnName("CACCTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cathenenum)
                    .HasColumnName("CATHENENUM")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccorrcode)
                    .HasColumnName("CCORRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdefopers)
                    .HasColumnName("CDEFOPERS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftcode)
                    .HasColumnName("CDIASOFTCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpaymforinter)
                    .HasColumnName("CPAYMFORINTER")
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Crequivisits)
                    .HasColumnName("CREQUIVISITS")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradingvenue)
                    .HasColumnName("CTRADINGVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CacctypecodeNavigation)
                    .WithMany(p => p.CurraccOld)
                    .HasForeignKey(d => d.Cacctypecode)
                    .HasConstraintName("SYS_C0010019");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.CurraccOld)
                    .HasForeignKey(d => d.Ccurrcode)
                    .HasConstraintName("SYS_C0010018");
            });

            modelBuilder.Entity<Curraccdefault>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CURRACCDEFAULT");

                entity.HasIndex(e => e.Cacctypecode)
                    .HasName("XIF86CURRACCDEFAULT");

                entity.HasIndex(e => e.Copcode)
                    .HasName("XIF85CURRACCDEFAULT");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("XIF87CURRACCDEFAULT");

                entity.Property(e => e.Bbrok)
                    .HasColumnName("BBROK")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Cacctypecode)
                    .HasColumnName("CACCTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csectype)
                    .HasColumnName("CSECTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csetlplace)
                    .HasColumnName("CSETLPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csetltype)
                    .HasColumnName("CSETLTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CacctypecodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Cacctypecode)
                    .HasConstraintName("SYS_C0010016");

                entity.HasOne(d => d.CopcodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Copcode)
                    .HasConstraintName("SYS_C0010017");
            });

            modelBuilder.Entity<Curracctypes>(entity =>
            {
                entity.HasKey(e => e.Cacctypecode)
                    .HasName("SYS_C008135");

                entity.ToTable("CURRACCTYPES");

                entity.Property(e => e.Cacctypecode)
                    .HasColumnName("CACCTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cacctypename)
                    .HasColumnName("CACCTYPENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("SYS_C008137");

                entity.ToTable("CURRENCY");

                entity.Property(e => e.Id)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Batheneadvance)
                    .HasColumnName("BATHENEADVANCE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Beurgroup)
                    .HasColumnName("BEURGROUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccurrname)
                    .HasColumnName("CCURRNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iocporder)
                    .HasColumnName("IOCPORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER(38)")
                    .HasDefaultValueSql("1000");

                entity.Property(e => e.Neurrate)
                    .HasColumnName("NEURRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nisocode)
                    .HasColumnName("NISOCODE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecontype)
                    .HasColumnName("NRECONTYPE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Currlimits>(entity =>
            {
                entity.HasKey(e => new { e.Ccurrcode, e.Dsetdate })
                    .HasName("SYS_C008141");

                entity.ToTable("CURRLIMITS");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("XIF116CURRLIMITS");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dsetdate)
                    .HasColumnName("DSETDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nadd)
                    .HasColumnName("NADD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nballimit)
                    .HasColumnName("NBALLIMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nballimitshort)
                    .HasColumnName("NBALLIMITSHORT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncommonlimit)
                    .HasColumnName("NCOMMONLIMIT")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ncommonlimshort)
                    .HasColumnName("NCOMMONLIMSHORT")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nvneblimit)
                    .HasColumnName("NVNEBLIMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvneblimitshort)
                    .HasColumnName("NVNEBLIMITSHORT")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.Currlimits)
                    .HasForeignKey(d => d.Ccurrcode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010020");
            });

            modelBuilder.Entity<Currpair>(entity =>
            {
                entity.HasKey(e => e.Cpair)
                    .HasName("SYS_C008145");

                entity.ToTable("CURRPAIR");

                entity.HasIndex(e => e.Ccurrcode1)
                    .HasName("XIF161CURRPAIR");

                entity.HasIndex(e => e.Ccurrcode2)
                    .HasName("XIF160CURRPAIR");

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasColumnType("CHAR(3)");

                entity.HasOne(d => d.Ccurrcode1Navigation)
                    .WithMany(p => p.CurrpairCcurrcode1Navigation)
                    .HasForeignKey(d => d.Ccurrcode1)
                    .HasConstraintName("SYS_C0010021");

                entity.HasOne(d => d.Ccurrcode2Navigation)
                    .WithMany(p => p.CurrpairCcurrcode2Navigation)
                    .HasForeignKey(d => d.Ccurrcode2)
                    .HasConstraintName("SYS_C0010022");
            });

            modelBuilder.Entity<Currpaym>(entity =>
            {
                entity.HasKey(e => e.Ncurrpaymkey)
                    .HasName("SYS_C008155");

                entity.ToTable("CURRPAYM");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("XIF134CURRPAYM");

                entity.HasIndex(e => e.Copcode)
                    .HasName("XIF133CURRPAYM");

                entity.HasIndex(e => e.Cpaymtypecode)
                    .HasName("XIF165CURRPAYM");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("XIF132CURRPAYM");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I2_CURRPAYM");

                entity.HasIndex(e => e.Nlogreckey)
                    .HasName("XIF231CURRPAYM");

                entity.HasIndex(e => new { e.Dvaluedate, e.Copcode, e.Ccurrcode })
                    .HasName("XIE3CURRPAYM");

                entity.Property(e => e.Ncurrpaymkey)
                    .HasColumnName("NCURRPAYMKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bstorno)
                    .HasColumnName("BSTORNO")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Btrueflag)
                    .HasColumnName("BTRUEFLAG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpaymtypecode)
                    .HasColumnName("CPAYMTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nclcorr)
                    .HasColumnName("NCLCORR")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nremliq)
                    .HasColumnName("NREMLIQ")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nremocp)
                    .HasColumnName("NREMOCP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsettcred)
                    .HasColumnName("NSETTCRED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.NacckeyNavigation)
                    .WithMany(p => p.Currpaym)
                    .HasForeignKey(d => d.Nacckey)
                    .HasConstraintName("SYS_C0010023");
            });

            modelBuilder.Entity<Currratehist>(entity =>
            {
                entity.HasKey(e => e.Nchangekey);

                entity.ToTable("CURRRATEHIST");

                entity.HasIndex(e => e.Nservreqkey)
                    .HasName("I1_CURRRATEHIST");

                entity.HasIndex(e => new { e.Ccurr1, e.Ccurr2, e.Nboside, e.Nchangekey })
                    .HasName("I0_CURRRATEHIST");

                entity.Property(e => e.Nchangekey)
                    .HasColumnName("NCHANGEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccurr1)
                    .HasColumnName("CCURR1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurr2)
                    .HasColumnName("CCURR2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iatm)
                    .HasColumnName("IATM")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Nboside)
                    .HasColumnName("NBOSIDE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nservreqkey)
                    .HasColumnName("NSERVREQKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvalue)
                    .HasColumnName("NVALUE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Currweights>(entity =>
            {
                entity.HasKey(e => new { e.Ccurrcode2, e.Ccurrcode1 })
                    .HasName("SYS_C008166");

                entity.ToTable("CURRWEIGHTS");

                entity.HasIndex(e => e.Ccurrcode1)
                    .HasName("XIF54CURRWEIGHTS");

                entity.HasIndex(e => e.Ccurrcode2)
                    .HasName("XIF55CURRWEIGHTS");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bweight)
                    .HasColumnName("BWEIGHT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Iregulusweight)
                    .HasColumnName("IREGULUSWEIGHT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndelta)
                    .HasColumnName("NDELTA")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"0
");

                entity.HasOne(d => d.Ccurrcode1Navigation)
                    .WithMany(p => p.CurrweightsCcurrcode1Navigation)
                    .HasForeignKey(d => d.Ccurrcode1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010024");

                entity.HasOne(d => d.Ccurrcode2Navigation)
                    .WithMany(p => p.CurrweightsCcurrcode2Navigation)
                    .HasForeignKey(d => d.Ccurrcode2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010025");
            });

            modelBuilder.Entity<Customreports>(entity =>
            {
                entity.HasKey(e => new { e.Ngroupcondkey, e.Nselectcondkey, e.Ncollistkey })
                    .HasName("SYS_C008171");

                entity.ToTable("CUSTOMREPORTS");

                entity.Property(e => e.Ngroupcondkey)
                    .HasColumnName("NGROUPCONDKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselectcondkey)
                    .HasColumnName("NSELECTCONDKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncollistkey)
                    .HasColumnName("NCOLLISTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbasecell)
                    .HasColumnName("CBASECELL")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrystalfile)
                    .HasColumnName("CCRYSTALFILE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccustomrepname)
                    .HasColumnName("CCUSTOMREPNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cexcelfile)
                    .HasColumnName("CEXCELFILE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cexcellist)
                    .HasColumnName("CEXCELLIST")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NcollistkeyNavigation)
                    .WithMany(p => p.Customreports)
                    .HasForeignKey(d => d.Ncollistkey)
                    .HasConstraintName("SYS_C0010029");

                entity.HasOne(d => d.NgroupcondkeyNavigation)
                    .WithMany(p => p.Customreports)
                    .HasForeignKey(d => d.Ngroupcondkey)
                    .HasConstraintName("SYS_C0010026");

                entity.HasOne(d => d.NrepkeyNavigation)
                    .WithMany(p => p.Customreports)
                    .HasForeignKey(d => d.Nrepkey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C0010028");

                entity.HasOne(d => d.NselectcondkeyNavigation)
                    .WithMany(p => p.Customreports)
                    .HasForeignKey(d => d.Nselectcondkey)
                    .HasConstraintName("SYS_C0010027");
            });

            modelBuilder.Entity<Dayperiods>(entity =>
            {
                entity.HasKey(e => e.Nkey)
                    .HasName("SYS_C008173");

                entity.ToTable("DAYPERIODS");

                entity.HasIndex(e => new { e.Ddate, e.Ccurrcode, e.Ispos })
                    .HasName("I1_DAYPERIODS");

                entity.Property(e => e.Nkey)
                    .HasColumnName("NKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddatefrom)
                    .HasColumnName("DDATEFROM")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddateto)
                    .HasColumnName("DDATETO")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ialg)
                    .HasColumnName("IALG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iclass)
                    .HasColumnName("ICLASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Inumber)
                    .HasColumnName("INUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ispos)
                    .HasColumnName("ISPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nact)
                    .HasColumnName("NACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nactsum)
                    .HasColumnName("NACTSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nactsum2)
                    .HasColumnName("NACTSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgact)
                    .HasColumnName("NAVGACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgactsum)
                    .HasColumnName("NAVGACTSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgactsum2)
                    .HasColumnName("NAVGACTSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpass)
                    .HasColumnName("NAVGPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpasssum)
                    .HasColumnName("NAVGPASSSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpasssum2)
                    .HasColumnName("NAVGPASSSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npass)
                    .HasColumnName("NPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npasssum)
                    .HasColumnName("NPASSSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npasssum2)
                    .HasColumnName("NPASSSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Dealers>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("SYS_C008176");

                entity.ToTable("DEALERS");

                entity.HasIndex(e => e.Cbbgid)
                    .HasName("I1_DEALERS")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbbgid)
                    .HasColumnName("CBBGID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealername)
                    .HasColumnName("CDEALERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicexcode)
                    .HasColumnName("CMICEXCODE")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Cnamerus)
                    .HasColumnName("CNAMERUS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cquikclientcode)
                    .HasColumnName("CQUIKCLIENTCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cquikid)
                    .HasColumnName("CQUIKID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creutercode)
                    .HasColumnName("CREUTERCODE")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DEPARTMENT");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Depo>(entity =>
            {
                entity.HasKey(e => e.Id);

                entity.ToTable("DEPO");

                entity.HasIndex(e => e.Bsummitexported)
                    .HasName("I10_DEPO");

                entity.HasIndex(e => e.Cbookcode)
                    .HasName("XIF147DEPO");

                entity.HasIndex(e => e.Cclientcode)
                    .HasName("XIF127DEPO");

                entity.HasIndex(e => e.Ccontrcode)
                    .HasName("XIF126DEPO");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("XIF43DEPO");

                entity.HasIndex(e => e.Cdealercode)
                    .HasName("XIF125DEPO");

                entity.HasIndex(e => e.Cdepartcode)
                    .HasName("XIF148DEPO");

                entity.HasIndex(e => e.Copcode)
                    .HasName("XIF46DEPO");

                entity.HasIndex(e => e.Csalescreditcurr)
                    .HasName("XIF150DEPO");

                entity.HasIndex(e => e.Dcontrdate)
                    .HasName("XIE2DEPO");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("XIE1DEPO");

                entity.HasIndex(e => e.Dvaluedate)
                    .HasName("XIE3DEPO");

                entity.HasIndex(e => e.Dvaluedate2)
                    .HasName("XIE4DEPO");

                entity.HasIndex(e => e.Ireuterimpflag)
                    .HasName("IREIMP_DEPO");

                entity.HasIndex(e => e.Nlogreckey)
                    .HasName("XIF237DEPO");

                entity.HasIndex(e => e.Nsourcekey)
                    .HasName("XIF44DEPO");

                entity.HasIndex(e => new { e.Dvaluedate, e.Dvaluedate2, e.Ccurrcode })
                    .HasName("DEPO_TEST1");

                entity.HasIndex(e => new { e.Dcontrdate, e.Dvaluedate2, e.Ccurrcode, e.Isb })
                    .HasName("I1_DEPO");

                entity.HasIndex(e => new { e.Dvaluedate2, e.Ccurrcode, e.Ccontrcode, e.Dvaluedate, e.Boncall })
                    .HasName("DEPO_TEST2");

                entity.Property(e => e.Id)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bautoprint)
                    .HasColumnName("BAUTOPRINT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bcollateral)
                    .HasColumnName("BCOLLATERAL")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bkeeprubpaym)
                    .HasColumnName("BKEEPRUBPAYM")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Blong)
                    .HasColumnName("BLONG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting2)
                    .HasColumnName("BNETTING2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Boncall)
                    .HasColumnName("BONCALL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbroker)
                    .HasColumnName("CBROKER")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccommited)
                    .HasColumnName("CCOMMITED")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Clongref)
                    .HasColumnName("CLONGREF")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Crate)
                    .HasColumnName("CRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescredit)
                    .HasColumnName("CSALESCREDIT")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("'Gross'");

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("sysdate ");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dlineexpiry)
                    .HasColumnName("DLINEEXPIRY")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtranexpiry)
                    .HasColumnName("DTRANEXPIRY")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ibase)
                    .HasColumnName("IBASE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ibullet)
                    .HasColumnName("IBULLET")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninterest)
                    .HasColumnName("NINTEREST")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,6)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER(19,6)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CbookcodeNavigation)
                    .WithMany(p => p.Depo)
                    .HasForeignKey(d => d.Cbookcode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_DEPO_CBOOKCODE");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.DepoCcurrcodeNavigation)
                    .HasForeignKey(d => d.Ccurrcode)
                    .HasConstraintName("FK_DEPO_CCURRCODE");

                entity.HasOne(d => d.CdealercodeNavigation)
                    .WithMany(p => p.Depo)
                    .HasForeignKey(d => d.Cdealercode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_DEPO_CDEALERCODE");

                entity.HasOne(d => d.CsalescreditcurrNavigation)
                    .WithMany(p => p.DepoCsalescreditcurrNavigation)
                    .HasForeignKey(d => d.Csalescreditcurr)
                    .HasConstraintName("FK_DEPO_CSALESCREDITCURR");
            });

            modelBuilder.Entity<DepoDelrecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DEPO_DELRECORD");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I0_DEPO_DELRECORD")
                    .IsUnique();

                entity.Property(e => e.Bathenaexported)
                    .HasColumnName("BATHENAEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Blong)
                    .HasColumnName("BLONG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting2)
                    .HasColumnName("BNETTING2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Boncall)
                    .HasColumnName("BONCALL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap)
                    .HasColumnName("BSWAP")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Clongref)
                    .HasColumnName("CLONGREF")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Crate)
                    .HasColumnName("CRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescredit)
                    .HasColumnName("CSALESCREDIT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibase)
                    .HasColumnName("IBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterest)
                    .HasColumnName("NINTEREST")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nswapkey)
                    .HasColumnName("NSWAPKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Depogaprates>(entity =>
            {
                entity.HasKey(e => new { e.Ccurrcode, e.Ddate })
                    .HasName("SYS_C008198");

                entity.ToTable("DEPOGAPRATES");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"0
");
            });

            modelBuilder.Entity<DiAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DI_ADDRESS");

                entity.Property(e => e.Cbuilding)
                    .HasColumnName("CBUILDING")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccity)
                    .HasColumnName("CCITY")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountry)
                    .HasColumnName("CCOUNTRY")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cflat)
                    .HasColumnName("CFLAT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Chouse)
                    .HasColumnName("CHOUSE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Clocation)
                    .HasColumnName("CLOCATION")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cregion)
                    .HasColumnName("CREGION")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cstreet)
                    .HasColumnName("CSTREET")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DiCompany>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DI_COMPANY");

                entity.Property(e => e.Cfullname)
                    .HasColumnName("CFULLNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cshortname)
                    .HasColumnName("CSHORTNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DiIndividual>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DI_INDIVIDUAL");

                entity.Property(e => e.Cfirstname)
                    .HasColumnName("CFIRSTNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Clastname)
                    .HasColumnName("CLASTNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Csurname)
                    .HasColumnName("CSURNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DiMarketcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DI_MARKETCODE");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Dictname>(entity =>
            {
                entity.HasKey(e => e.Nclassifkey)
                    .HasName("SYS_C008200");

                entity.ToTable("DICTNAME");

                entity.Property(e => e.Nclassifkey)
                    .HasColumnName("NCLASSIFKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cclassifname)
                    .HasColumnName("CCLASSIFNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Eqbooks>(entity =>
            {
                entity.HasKey(e => e.Cbookcode)
                    .HasName("PK_CBOOKCODE");

                entity.ToTable("EQBOOKS");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bbrokerage)
                    .IsRequired()
                    .HasColumnName("BBROKERAGE")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Cbookname)
                    .HasColumnName("CBOOKNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsbookcode)
                    .HasColumnName("CCRSBOOKCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Eqchangedate>(entity =>
            {
                entity.HasKey(e => e.Ddate);

                entity.ToTable("EQCHANGEDATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.DdatetimeCh)
                    .HasColumnName("DDATETIME_CH")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<Eqchangereason>(entity =>
            {
                entity.HasKey(e => e.Ncode)
                    .HasName("PK_NCODE");

                entity.ToTable("EQCHANGEREASON");

                entity.Property(e => e.Ncode)
                    .HasColumnName("NCODE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Creason)
                    .HasColumnName("CREASON")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Eqdealers>(entity =>
            {
                entity.HasKey(e => e.Ccode)
                    .HasName("PK_CCODE");

                entity.ToTable("EQDEALERS");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasDefaultValueSql(@"1
");

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecode)
                    .HasColumnName("CTRADECODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Eqdiasoftexchange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EQDIASOFTEXCHANGE");

                entity.HasIndex(e => e.Cfilename)
                    .HasName("I1_EQDIASOFTEXCHANGE");

                entity.HasIndex(e => new { e.Ddate, e.Cstatus })
                    .HasName("I2_EQDIASOFTEXCHANGE");

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(264)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("sysdate ");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NdealkeyNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Ndealkey)
                    .HasConstraintName("SYS_C0010034");
            });

            modelBuilder.Entity<Eqprices>(entity =>
            {
                entity.HasKey(e => new { e.Nequitykey, e.Cclasscode, e.Ddate })
                    .HasName("SYS_C008213");

                entity.ToTable("EQPRICES");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cclasscode)
                    .HasColumnName("CCLASSCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csecurcode)
                    .HasColumnName("CSECURCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Nmarketprice)
                    .HasColumnName("NMARKETPRICE")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NequitykeyNavigation)
                    .WithMany(p => p.Eqprices)
                    .HasForeignKey(d => d.Nequitykey)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010035");
            });

            modelBuilder.Entity<EqpricesErms>(entity =>
            {
                entity.HasKey(e => new { e.Nequitykey, e.Ddate, e.Ccurr })
                    .HasName("SYS_C008216");

                entity.ToTable("EQPRICES_ERMS");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccurr)
                    .HasColumnName("CCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftcode)
                    .HasColumnName("CDIASOFTCODE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER(20,8)");

                entity.HasOne(d => d.NequitykeyNavigation)
                    .WithMany(p => p.EqpricesErms)
                    .HasForeignKey(d => d.Nequitykey)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010036");
            });

            modelBuilder.Entity<Eqproducts>(entity =>
            {
                entity.HasKey(e => e.Nequitykey)
                    .HasName("SYS_C008219");

                entity.ToTable("EQPRODUCTS");

                entity.HasIndex(e => e.Cisincode)
                    .HasName("I2_EQPRODUCTS");

                entity.HasIndex(e => e.Cmarketcode)
                    .HasName("I1_EQPRODUCTS");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bown).HasColumnName("BOWN");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cstateregistrationcode)
                    .HasColumnName("CSTATEREGISTRATIONCODE")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.CproducttypeNavigation)
                    .WithMany(p => p.Eqproducts)
                    .HasForeignKey(d => d.Cproducttype)
                    .HasConstraintName("SYS_C0010037");
            });

            modelBuilder.Entity<Eqproducttype>(entity =>
            {
                entity.HasKey(e => e.Cproducttypecode)
                    .HasName("SYS_C008221");

                entity.ToTable("EQPRODUCTTYPE");

                entity.Property(e => e.Cproducttypecode)
                    .HasColumnName("CPRODUCTTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Eqrecres>(entity =>
            {
                entity.HasKey(e => e.Ndealkey);

                entity.ToTable("EQRECRES");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlplace)
                    .HasColumnName("CSETTLPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ies).HasColumnName("IES");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsecrecres)
                    .HasColumnName("NSECRECRES")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Eqrepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EQREPO");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bopenpos).HasColumnName("BOPENPOS");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Creutersimportfile)
                    .HasColumnName("CREUTERSIMPORTFILE")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Irepobase)
                    .HasColumnName("IREPOBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum2)
                    .HasColumnName("NMARKETSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice2)
                    .HasColumnName("NPRICE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Eqreposums>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EQREPOSUMS");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposumkey)
                    .HasColumnName("NREPOSUMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Equitingdeals>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008249");

                entity.ToTable("EQUITINGDEALS");

                entity.HasIndex(e => e.Bisbrokbook)
                    .HasName("I15_EQUITINGDEALS");

                entity.HasIndex(e => e.Cbookcode)
                    .HasName("I12_EQUITINGDEALS");

                entity.HasIndex(e => e.Cdealnumber)
                    .HasName("I4_EQUITINGDEALS");

                entity.HasIndex(e => e.Cdiasoftstatus)
                    .HasName("I10_EQUITINGDEALS");

                entity.HasIndex(e => e.Csecondref)
                    .HasName("I9_EQUITINGDEALS");

                entity.HasIndex(e => e.Csetlplace)
                    .HasName("I16_EQUITINGDEALS");

                entity.HasIndex(e => e.Dcashsettldate)
                    .HasName("I3_EQUITINGDEALS");

                entity.HasIndex(e => e.Dchangedatetime)
                    .HasName("I5_EQ_DCHANGEDATETIME");

                entity.HasIndex(e => e.Deqsettldate)
                    .HasName("I2_EQUITINGDEALS");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("I8_EQUITINGDEALS");

                entity.HasIndex(e => e.Dtradedate)
                    .HasName("I1_EQUITINGDEALS");

                entity.HasIndex(e => e.Nfidessaversion)
                    .HasName("I18_EQUITINGDEALS");

                entity.HasIndex(e => e.Ninternalkey)
                    .HasName("I7_EQUITINGDEALS");

                entity.HasIndex(e => new { e.Bisbrokbook, e.Nequitykey })
                    .HasName("I14_EQUITINGDEALS");

                entity.HasIndex(e => new { e.Cbookcode, e.Nequitykey })
                    .HasName("I6_EQUITINGDEALS");

                entity.HasIndex(e => new { e.Norderkey, e.Cfidessaid })
                    .HasName("I11_EQUITINGDEALS");

                entity.HasIndex(e => new { e.Deqsettldate, e.Cbookcode, e.Nequitykey })
                    .HasName("I17_EQUITINGDEALS");

                entity.HasIndex(e => new { e.Dtradedate, e.Cbookcode, e.Nequitykey })
                    .HasName("I13_EQUITINGDEALS");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bcommpct)
                    .HasColumnName("BCOMMPCT")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bcpclient)
                    .HasColumnName("BCPCLIENT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bisbrokbook)
                    .HasColumnName("BISBROKBOOK")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Btrueagredate)
                    .HasColumnName("BTRUEAGREDATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Btruecashsettl)
                    .HasColumnName("BTRUECASHSETTL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Btrueeqsettl)
                    .HasColumnName("BTRUEEQSETTL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Camendcomment)
                    .HasColumnName("CAMENDCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccporgcode)
                    .HasColumnName("CCPORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfidessaid)
                    .HasColumnName("CFIDESSAID")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cinsttype)
                    .HasColumnName("CINSTTYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cnetgross)
                    .HasColumnName("CNETGROSS")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cordernum)
                    .HasColumnName("CORDERNUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csecondref)
                    .HasColumnName("CSECONDREF")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csetlplace)
                    .HasColumnName("CSETLPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlcurrcode)
                    .HasColumnName("CSETTLCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlecode)
                    .HasColumnName("CSETTLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlmenttype)
                    .HasColumnName("CSETTLMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dagreementdate)
                    .HasColumnName("DAGREEMENTDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcashsettldate)
                    .HasColumnName("DCASHSETTLDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Deqsettldate)
                    .HasColumnName("DEQSETTLDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql(@"sysdate
");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ibd)
                    .HasColumnName("IBD")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nchangereason)
                    .HasColumnName("NCHANGEREASON")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndayinc)
                    .HasColumnName("NDAYINC")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql(@"4
");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfidessaversion)
                    .HasColumnName("NFIDESSAVERSION")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER(16,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntotalamount)
                    .HasColumnName("NTOTALAMOUNT")
                    .HasColumnType("NUMBER(16,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradeprice)
                    .HasColumnName("NTRADEPRICE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nversion)
                    .HasColumnName("NVERSION")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CbookcodeNavigation)
                    .WithMany(p => p.Equitingdeals)
                    .HasForeignKey(d => d.Cbookcode)
                    .HasConstraintName("SYS_C0010042");

                entity.HasOne(d => d.CdealercodeNavigation)
                    .WithMany(p => p.Equitingdeals)
                    .HasForeignKey(d => d.Cdealercode)
                    .HasConstraintName("SYS_C0010043");

                entity.HasOne(d => d.CsalescreditcurrNavigation)
                    .WithMany(p => p.EquitingdealsCsalescreditcurrNavigation)
                    .HasForeignKey(d => d.Csalescreditcurr)
                    .HasConstraintName("SYS_C0010041");

                entity.HasOne(d => d.CsettlcurrcodeNavigation)
                    .WithMany(p => p.EquitingdealsCsettlcurrcodeNavigation)
                    .HasForeignKey(d => d.Csettlcurrcode)
                    .HasConstraintName("SYS_C0010040");

                entity.HasOne(d => d.CtradecurrcodeNavigation)
                    .WithMany(p => p.EquitingdealsCtradecurrcodeNavigation)
                    .HasForeignKey(d => d.Ctradecurrcode)
                    .HasConstraintName("SYS_C0010039");

                entity.HasOne(d => d.NequitykeyNavigation)
                    .WithMany(p => p.Equitingdeals)
                    .HasForeignKey(d => d.Nequitykey)
                    .HasConstraintName("SYS_C0010038");
            });

            modelBuilder.Entity<EquitingdealsAudit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EQUITINGDEALS_AUDIT");

                entity.HasIndex(e => e.Cdealnumber)
                    .HasName("I4_EQUITINGDEALS_AUDIT");

                entity.HasIndex(e => e.Cfidessaid)
                    .HasName("I5_EQUITINGDEALS_AUDIT");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I1_EQUITINGDEALS_AUDIT");

                entity.HasIndex(e => e.Nequitykey)
                    .HasName("I2_EQUITINGDEALS_AUDIT");

                entity.HasIndex(e => e.Nfidessaversion)
                    .HasName("I6_EQUITINGDEALS_AUDIT");

                entity.Property(e => e.Bcommpct).HasColumnName("BCOMMPCT");

                entity.Property(e => e.Bcpclient).HasColumnName("BCPCLIENT");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bsenttodiasoft).HasColumnName("BSENTTODIASOFT");

                entity.Property(e => e.Btrueagredate).HasColumnName("BTRUEAGREDATE");

                entity.Property(e => e.Btruecashsettl).HasColumnName("BTRUECASHSETTL");

                entity.Property(e => e.Btrueeqsettl).HasColumnName("BTRUEEQSETTL");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Camendcomment)
                    .HasColumnName("CAMENDCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ccporgcode)
                    .HasColumnName("CCPORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfidessaid)
                    .HasColumnName("CFIDESSAID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cinsttype)
                    .HasColumnName("CINSTTYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cnetgross)
                    .HasColumnName("CNETGROSS")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cordernum)
                    .HasColumnName("CORDERNUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csecondref)
                    .HasColumnName("CSECONDREF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csetlplace)
                    .HasColumnName("CSETLPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlcurrcode)
                    .HasColumnName("CSETTLCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlecode)
                    .HasColumnName("CSETTLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlmenttype)
                    .HasColumnName("CSETTLMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatusrec)
                    .HasColumnName("CSTATUSREC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Dagreementdate)
                    .HasColumnName("DAGREEMENTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcashsettldate)
                    .HasColumnName("DCASHSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Deqsettldate)
                    .HasColumnName("DEQSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql(@"sysdate
");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibd).HasColumnName("IBD");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nchangereason)
                    .HasColumnName("NCHANGEREASON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndayinc)
                    .HasColumnName("NDAYINC")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql(@"4
");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfidessaversion)
                    .HasColumnName("NFIDESSAVERSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntotalamount)
                    .HasColumnName("NTOTALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradeprice)
                    .HasColumnName("NTRADEPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nversion)
                    .HasColumnName("NVERSION")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Ert>(entity =>
            {
                entity.HasKey(e => new { e.Nertkey, e.DcreatedateTmp });

                entity.ToTable("ERT");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_ERT")
                    .IsUnique();

                entity.Property(e => e.Nertkey)
                    .HasColumnName("NERTKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ewrr)
                    .HasColumnName("EWRR")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<EventClass>(entity =>
            {
                entity.HasKey(e => e.Neventclasskey)
                    .HasName("SYS_C008253");

                entity.ToTable("EVENT_CLASS");

                entity.Property(e => e.Neventclasskey)
                    .HasColumnName("NEVENTCLASSKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Cengname)
                    .HasColumnName("CENGNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cprefix)
                    .HasColumnName("CPREFIX")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EventType>(entity =>
            {
                entity.HasKey(e => e.Neventtypekey)
                    .HasName("SYS_C008255");

                entity.ToTable("EVENT_TYPE");

                entity.Property(e => e.Neventtypekey)
                    .HasColumnName("NEVENTTYPEKEY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdescription)
                    .HasColumnName("CDESCRIPTION")
                    .IsUnicode(false);

                entity.Property(e => e.Cdescriptioneng)
                    .HasColumnName("CDESCRIPTIONENG")
                    .IsUnicode(false);

                entity.Property(e => e.Neventclasskey)
                    .HasColumnName("NEVENTCLASSKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Сfollowingactions)
                    .HasColumnName("СFOLLOWINGACTIONS")
                    .IsUnicode(false);

                entity.Property(e => e.Сfollowingactionseng)
                    .HasColumnName("СFOLLOWINGACTIONSENG")
                    .IsUnicode(false);

                entity.HasOne(d => d.NeventclasskeyNavigation)
                    .WithMany(p => p.EventType)
                    .HasForeignKey(d => d.Neventclasskey)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010044");
            });

            modelBuilder.Entity<Evtable>(entity =>
            {
                entity.HasKey(e => new { e.Cevcode, e.Dbegdate, e.Devdate })
                    .HasName("SYS_C008259");

                entity.ToTable("EVTABLE");

                entity.Property(e => e.Cevcode)
                    .HasColumnName("CEVCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dbegdate)
                    .HasColumnName("DBEGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Devdate)
                    .HasColumnName("DEVDATE")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<Expplusfx2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EXPPLUSFX2");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbnd)
                    .HasColumnName("NBND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexp)
                    .HasColumnName("NEXP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfx)
                    .HasColumnName("NFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvneb)
                    .HasColumnName("NVNEB")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Favoritsystem>(entity =>
            {
                entity.HasKey(e => e.Nsystemkey)
                    .HasName("SYS_C008263");

                entity.ToTable("FAVORITSYSTEM");

                entity.Property(e => e.Nsystemkey)
                    .HasColumnName("NSYSTEMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bmandatory)
                    .HasColumnName("BMANDATORY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csystemcode)
                    .HasColumnName("CSYSTEMCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csystemname)
                    .HasColumnName("CSYSTEMNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Filters>(entity =>
            {
                entity.HasKey(e => new { e.Iuserid, e.Cfieldname, e.Nselectcondkey })
                    .HasName("SYS_C008267");

                entity.ToTable("FILTERS");

                entity.Property(e => e.Iuserid)
                    .HasColumnName("IUSERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cfieldname)
                    .HasColumnName("CFIELDNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Nselectcondkey)
                    .HasColumnName("NSELECTCONDKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binterval)
                    .HasColumnName("BINTERVAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Btoday)
                    .HasColumnName("BTODAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Btoday2)
                    .HasColumnName("BTODAY2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bworkdays)
                    .HasColumnName("BWORKDAYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bworkdays2)
                    .HasColumnName("BWORKDAYS2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cmaxfieldvalue)
                    .HasColumnName("CMAXFIELDVALUE")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Cminfieldvalue)
                    .HasColumnName("CMINFIELDVALUE")
                    .IsUnicode(false);

                entity.Property(e => e.Ibindtype)
                    .HasColumnName("IBINDTYPE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Ndays)
                    .HasColumnName("NDAYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndays2)
                    .HasColumnName("NDAYS2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Noperator)
                    .HasColumnName("NOPERATOR")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NselectcondkeyNavigation)
                    .WithMany(p => p.Filters)
                    .HasForeignKey(d => d.Nselectcondkey)
                    .HasConstraintName("SYS_C0010045");
            });

            modelBuilder.Entity<Fixpriceshistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FIXPRICESHISTORY");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<Forex>(entity =>
            {
                entity.HasKey(e => e.Id);

                entity.ToTable("FOREX");

                entity.HasIndex(e => e.Bsummitexported)
                    .HasName("I10_FOREX");

                entity.HasIndex(e => e.Ccontrcode)
                    .HasName("I8_FOREX");

                entity.HasIndex(e => e.Cdealnumber)
                    .HasName("XAK1FOREX")
                    .IsUnique();

                entity.HasIndex(e => e.Cticket)
                    .HasName("I3_FOREX");

                entity.HasIndex(e => e.Dcontrdate)
                    .HasName("XIE1FOREX");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("XIE2FOREX");

                entity.HasIndex(e => e.Dvaluedateb)
                    .HasName("XIE3FOREX");

                entity.HasIndex(e => e.Dvaluedates)
                    .HasName("XIE4FOREX");

                entity.HasIndex(e => e.Ireuterimpflag)
                    .HasName("IREIMP_FOREX");

                entity.HasIndex(e => e.Nahenaclassified)
                    .HasName("I1_FOREX");

                entity.HasIndex(e => e.Nfixdeal)
                    .HasName("I6_FOREX");

                entity.HasIndex(e => e.Ninternalkey)
                    .HasName("I2_FOREX");

                entity.HasIndex(e => e.Nmurexoid)
                    .HasName("I7_FOREX");

                entity.HasIndex(e => e.Ntradenum)
                    .HasName("I5_FOREX");

                entity.HasIndex(e => new { e.Ccurrcodeb, e.Ccurrcodes })
                    .HasName("I4_FOREX");

                entity.HasIndex(e => new { e.Dvaluedateb, e.Ccurrcodeb, e.Dcontrdate })
                    .HasName("TEST_FX1");

                entity.HasIndex(e => new { e.Dvaluedates, e.Ccurrcodes, e.Dcontrdate })
                    .HasName("TEST_FX2");

                entity.Property(e => e.Id)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bathenaimported)
                    .HasColumnName("BATHENAIMPORTED")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bautoprint)
                    .HasColumnName("BAUTOPRINT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bdraftdeal)
                    .HasColumnName("BDRAFTDEAL")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bkeeprubpaym)
                    .HasColumnName("BKEEPRUBPAYM")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnoexchtrans)
                    .HasColumnName("BNOEXCHTRANS")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bswap)
                    .HasColumnName("BSWAP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbktcurrcode)
                    .HasColumnName("CBKTCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfirmid)
                    .HasColumnName("CFIRMID")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("sysdate ");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Iswaptype)
                    .HasColumnName("ISWAPTYPE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfxcount)
                    .HasColumnName("NFXCOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"1
");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nswapfwdday)
                    .HasColumnName("NSWAPFWDDAY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nswapkey)
                    .HasColumnName("NSWAPKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CbookcodeNavigation)
                    .WithMany(p => p.Forex)
                    .HasForeignKey(d => d.Cbookcode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_FOREX_CBOOKCODE");

                entity.HasOne(d => d.CcurrcodebNavigation)
                    .WithMany(p => p.ForexCcurrcodebNavigation)
                    .HasForeignKey(d => d.Ccurrcodeb)
                    .HasConstraintName("FK_FOREX_CCURRCODEB");

                entity.HasOne(d => d.CcurrcodesNavigation)
                    .WithMany(p => p.ForexCcurrcodesNavigation)
                    .HasForeignKey(d => d.Ccurrcodes)
                    .HasConstraintName("FK_FOREX_CCURRCODES");

                entity.HasOne(d => d.CdealercodeNavigation)
                    .WithMany(p => p.Forex)
                    .HasForeignKey(d => d.Cdealercode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_FOREX_CDEALERCODE");

                entity.HasOne(d => d.CsalescreditcurrNavigation)
                    .WithMany(p => p.ForexCsalescreditcurrNavigation)
                    .HasForeignKey(d => d.Csalescreditcurr)
                    .HasConstraintName("FK_FOREX_CSALESCREDITCURR");
            });

            modelBuilder.Entity<ForexDelrecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FOREX_DELRECORD");

                entity.HasIndex(e => e.Bsummitexported)
                    .HasName("I10_FOREX_DELRECORD");

                entity.HasIndex(e => e.Cdealnumber)
                    .HasName("I5_FOREX_DELRECORD");

                entity.HasIndex(e => e.Cticket)
                    .HasName("I3_FOREX_DELRECORD");

                entity.HasIndex(e => e.Dcontrdate)
                    .HasName("I6_FOREX_DELRECORD");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("I7_FOREX_DELRECORD");

                entity.HasIndex(e => e.Dvaluedateb)
                    .HasName("I8_FOREX_DELRECORD");

                entity.HasIndex(e => e.Dvaluedates)
                    .HasName("I9_FOREX_DELRECORD");

                entity.HasIndex(e => e.Ireuterimpflag)
                    .HasName("IREIMP_FOREX_DELRECORD");

                entity.HasIndex(e => e.Nahenaclassified)
                    .HasName("I1_FOREX_DELRECORD");

                entity.HasIndex(e => new { e.Ccurrcodeb, e.Ccurrcodes })
                    .HasName("I4_FOREX_DELRECORD");

                entity.HasIndex(e => new { e.Dvaluedateb, e.Ccurrcodeb, e.Dcontrdate })
                    .HasName("TEST_FOREX_DELRECORD1");

                entity.HasIndex(e => new { e.Dvaluedates, e.Ccurrcodes, e.Dcontrdate })
                    .HasName("TEST_FOREX_DELRECORD2");

                entity.Property(e => e.Bathenaexported)
                    .HasColumnName("BATHENAEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bdraftdeal)
                    .HasColumnName("BDRAFTDEAL")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bliquidityincluded).HasColumnName("BLIQUIDITYINCLUDED");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap)
                    .HasColumnName("BSWAP")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasColumnType("CHAR(18)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nswapkey)
                    .HasColumnName("NSWAPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<ForexNettBo>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008308");

                entity.ToTable("FOREX_NETT_BO");

                entity.HasIndex(e => e.Daudittimestamp)
                    .HasName("I1_FOREX_NETT_BO");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bathenaimported)
                    .HasColumnName("BATHENAIMPORTED")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bautoprint)
                    .HasColumnName("BAUTOPRINT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bswap)
                    .HasColumnName("BSWAP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("sysdate ");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfxcount)
                    .HasColumnName("NFXCOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"1
");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmirrdealkey)
                    .HasColumnName("NMIRRDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ForexNettRm>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008328");

                entity.ToTable("FOREX_NETT_RM");

                entity.HasIndex(e => e.Daudittimestamp)
                    .HasName("I1_FOREX_NETT_RM");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bautoprint)
                    .HasColumnName("BAUTOPRINT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap)
                    .HasColumnName("BSWAP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("sysdate ");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxcount)
                    .HasColumnName("NFXCOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"1
");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<ForexNettTr>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008348");

                entity.ToTable("FOREX_NETT_TR");

                entity.HasIndex(e => e.Daudittimestamp)
                    .HasName("I1_FOREX_NETT_TR");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bautoprint)
                    .HasColumnName("BAUTOPRINT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap)
                    .HasColumnName("BSWAP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("sysdate ");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxcount)
                    .HasColumnName("NFXCOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"1
");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Forextype>(entity =>
            {
                entity.HasKey(e => e.Ntypekey)
                    .HasName("PK_NTYPEKEY");

                entity.ToTable("FOREXTYPE");

                entity.HasIndex(e => e.Ctypecode)
                    .HasName("I1_FOREXTYPE");

                entity.Property(e => e.Ntypekey)
                    .HasColumnName("NTYPEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cathenatime)
                    .HasColumnName("CATHENATIME")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ctypecode)
                    .HasColumnName("CTYPECODE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ctypename)
                    .HasColumnName("CTYPENAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Forms>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FORMS");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Ccreator)
                    .HasColumnName("CCREATOR")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Cdescr)
                    .HasColumnName("CDESCR")
                    .HasColumnType("LONG RAW");

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Ctitle)
                    .HasColumnName("CTITLE")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Dcreationdate)
                    .HasColumnName("DCREATIONDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nformkey)
                    .HasColumnName("NFORMKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Futures>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008360");

                entity.ToTable("FUTURES");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontractname)
                    .HasColumnName("CCONTRACTNAME")
                    .HasMaxLength(254)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmonth)
                    .HasColumnName("CMONTH")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Dmaturitycont)
                    .HasColumnName("DMATURITYCONT")
                    .HasColumnType("DATE");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");
                //      .HasDefaultValueSql(@"0");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");
               //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER(19,7)");
                 //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");
                   // .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nvalue)
                    .HasColumnName("NVALUE")
                    .HasColumnType("NUMBER");
               //     .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<FuturesDelrecord>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008365");

                entity.ToTable("FUTURES_DELRECORD");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontractname)
                    .HasColumnName("CCONTRACTNAME")
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmonth)
                    .HasColumnName("CMONTH")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum).HasColumnName("NTRADENUM");

                entity.Property(e => e.Nvalue)
                    .HasColumnName("NVALUE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<FvsTestAutoinsert>(entity =>
            {
                entity.HasKey(e => e.Key)
                    .HasName("FVS_TEST_AUTOINSERT_PR");

                entity.ToTable("FVS_TEST_AUTOINSERT");

                entity.Property(e => e.Key)
                    .HasColumnName("KEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.ColChar50)
                    .HasColumnName("COL_CHAR_50")
                    .HasColumnType("CHAR(50)");

                entity.Property(e => e.ColNumber)
                    .HasColumnName("COL_NUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.ColNumber23)
                    .HasColumnName("COL_NUMBER_2_3")
                    .HasColumnType("NUMBER(2,3)");

                entity.Property(e => e.ColVarchar220)
                    .HasColumnName("COL_VARCHAR2_20")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.D).HasColumnType("DATE");

                entity.Property(e => e.Fk)
                    .HasColumnName("FK")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Fk1)
                    .HasColumnName("FK1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Number32)
                    .HasColumnName("NUMBER_3_2")
                    .HasColumnType("NUMBER(3,2)");

                entity.HasOne(d => d.FkNavigation)
                    .WithMany(p => p.FvsTestAutoinsertFkNavigation)
                    .HasForeignKey(d => d.Fk)
                    .HasConstraintName("FVS_TEST_AUTOINSERT_FR");

                entity.HasOne(d => d.Fk1Navigation)
                    .WithMany(p => p.FvsTestAutoinsertFk1Navigation)
                    .HasForeignKey(d => d.Fk1)
                    .HasConstraintName("FVS_TEST_AUTOINSERT_FK1");
            });

            modelBuilder.Entity<FvsTestStrnum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FVS_TEST_STRNUM");

                entity.Property(e => e.Str)
                    .HasColumnName("STR")
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Fvsupdates>(entity =>
            {
                entity.HasKey(e => e.Nupdatekey)
                    .HasName("SYS_C008368");

                entity.ToTable("FVSUPDATES");

                entity.Property(e => e.Nupdatekey)
                    .HasColumnName("NUPDATEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cupdatename)
                    .HasColumnName("CUPDATENAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cupdatetype)
                    .HasColumnName("CUPDATETYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql(@"'ALL'
");

                entity.Property(e => e.Dupdatecommit)
                    .HasColumnName("DUPDATECOMMIT")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dupdatedate)
                    .HasColumnName("DUPDATEDATE")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<Fxbal2>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Ccurrcode })
                    .HasName("SYS_C008371");

                entity.ToTable("FXBAL2");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Nbal)
                    .HasColumnName("NBAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nday)
                    .HasColumnName("NDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvneb)
                    .HasColumnName("NVNEB")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Fxpair2>(entity =>
            {
                entity.HasKey(e => new { e.Ccurrcode1, e.Ccurrcode2 })
                    .HasName("SYS_C008374");

                entity.ToTable("FXPAIR2");

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasColumnType("CHAR(3)");
            });

            modelBuilder.Entity<Fxsumbuy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FXSUMBUY");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Fxsumbuy2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FXSUMBUY2");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Fxsumsell>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FXSUMSELL");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Fxsumsell2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FXSUMSELL2");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Graphtest>(entity =>
            {
                entity.HasKey(e => e.Ngraphkey);

                entity.ToTable("GRAPHTEST");

                entity.Property(e => e.Ngraphkey)
                    .HasColumnName("NGRAPHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bdata)
                    .HasColumnName("BDATA")
                    .HasColumnType("BLOB");

                entity.Property(e => e.Nrepokey)
                    .HasColumnName("NREPOKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Groupconds>(entity =>
            {
                entity.HasKey(e => e.Ngroupcondkey)
                    .HasName("SYS_C008381");

                entity.ToTable("GROUPCONDS");

                entity.Property(e => e.Ngroupcondkey)
                    .HasColumnName("NGROUPCONDKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cgroupcondname)
                    .HasColumnName("CGROUPCONDNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NrepkeyNavigation)
                    .WithMany(p => p.Groupconds)
                    .HasForeignKey(d => d.Nrepkey)
                    .HasConstraintName("SYS_C0010053");
            });

            modelBuilder.Entity<Groupcondsline>(entity =>
            {
                entity.HasKey(e => e.Ncondlinegrkey)
                    .HasName("SYS_C008384");

                entity.ToTable("GROUPCONDSLINE");

                entity.Property(e => e.Ncondlinegrkey)
                    .HasColumnName("NCONDLINEGRKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bfooter)
                    .HasColumnName("BFOOTER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bheader)
                    .HasColumnName("BHEADER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navalgrkey)
                    .HasColumnName("NAVALGRKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngroupcondkey)
                    .HasColumnName("NGROUPCONDKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NavalgrkeyNavigation)
                    .WithMany(p => p.Groupcondsline)
                    .HasForeignKey(d => d.Navalgrkey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C0010054");

                entity.HasOne(d => d.NgroupcondkeyNavigation)
                    .WithMany(p => p.Groupcondsline)
                    .HasForeignKey(d => d.Ngroupcondkey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C0010055");
            });

            modelBuilder.Entity<Holidays>(entity =>
            {
                entity.HasKey(e => new { e.Dholdate, e.Ccurrcode });

                entity.ToTable("HOLIDAYS");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("I1_HOLIDAYS");

                entity.HasIndex(e => e.Dholdate)
                    .HasName("I2_HOLIDAYS");

                entity.Property(e => e.Dholdate)
                    .HasColumnName("DHOLDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bholiday)
                    .HasColumnName("BHOLIDAY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cholname)
                    .HasColumnName("CHOLNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Idtab>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IDTAB");

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Idnum)
                    .HasColumnName("IDNUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<IeActionjobWork>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IE_ACTIONJOB_WORK");

                entity.Property(e => e.Caction)
                    .HasColumnName("CACTION")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Carc)
                    .HasColumnName("CARC")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Ddatetime)
                    .HasColumnName("DDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nieinterfacekey)
                    .HasColumnName("NIEINTERFACEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nietype)
                    .HasColumnName("NIETYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlaunchkey)
                    .HasColumnName("NLAUNCHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<IeEvents>(entity =>
            {
                entity.HasKey(e => e.Neventkey)
                    .HasName("SYS_C008392");

                entity.ToTable("IE_EVENTS");

                entity.Property(e => e.Neventkey)
                    .HasColumnName("NEVENTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bedithtml)
                    .HasColumnName("BEDITHTML")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Benabled)
                    .HasColumnName("BENABLED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bhtml)
                    .HasColumnName("BHTML")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Cbody)
                    .HasColumnName("CBODY")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Cbodyrv)
                    .HasColumnName("CBODYRV")
                    .HasColumnType("BLOB");

                entity.Property(e => e.Ccopy)
                    .HasColumnName("CCOPY")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Ceventname)
                    .HasColumnName("CEVENTNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cparams)
                    .HasColumnName("CPARAMS")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Crecipient)
                    .HasColumnName("CRECIPIENT")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Csubject)
                    .HasColumnName("CSUBJECT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ninterfacekey)
                    .HasColumnName("NINTERFACEKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<IeExportfile>(entity =>
            {
                entity.HasKey(e => e.Nfilekey)
                    .HasName("SYS_C008397");

                entity.ToTable("IE_EXPORTFILE");

                entity.HasIndex(e => e.Dcreatedate)
                    .HasName("I4_IEEXPORTFILE");

                entity.HasIndex(e => e.Dprocessdate)
                    .HasName("I5_IEEXPORTFILE");

                entity.HasIndex(e => e.Nlaunchkey)
                    .HasName("I1_IE_EXPORTFILE");

                entity.Property(e => e.Nfilekey)
                    .HasColumnName("NFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cfile)
                    .HasColumnName("CFILE")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cfolder)
                    .HasColumnName("CFOLDER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cmessage)
                    .HasColumnName("CMESSAGE")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcreatedate)
                    .HasColumnName("DCREATEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dprocessdate)
                    .HasColumnName("DPROCESSDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dreadydate)
                    .HasColumnName("DREADYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nlaunchkey)
                    .HasColumnName("NLAUNCHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecordcount)
                    .HasColumnName("NRECORDCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettingkey)
                    .HasColumnName("NSETTINGKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<IeExportfilerecords>(entity =>
            {
                entity.HasKey(e => e.Nfilerecordkey)
                    .HasName("SYS_C008402");

                entity.ToTable("IE_EXPORTFILERECORDS");

                entity.Property(e => e.Nfilerecordkey)
                    .HasColumnName("NFILERECORDKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ctable)
                    .HasColumnName("CTABLE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Nfilekey)
                    .HasColumnName("NFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecordkey)
                    .HasColumnName("NRECORDKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<IeExternalinterface>(entity =>
            {
                entity.HasKey(e => e.Ninterfacekey)
                    .HasName("SYS_C008407");

                entity.ToTable("IE_EXTERNALINTERFACE");

                entity.Property(e => e.Ninterfacekey)
                    .HasColumnName("NINTERFACEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ballowpayments).HasColumnName("BALLOWPAYMENTS");

                entity.Property(e => e.Bmanual)
                    .HasColumnName("BMANUAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cdescription)
                    .HasColumnName("CDESCRIPTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Idirection)
                    .HasColumnName("IDIRECTION")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<IeImportfile>(entity =>
            {
                entity.HasKey(e => e.Nfilekey)
                    .HasName("SYS_C008412");

                entity.ToTable("IE_IMPORTFILE");

                entity.HasIndex(e => e.Dcreatedate)
                    .HasName("I4_IEIMPORTFILE");

                entity.HasIndex(e => e.Dprocessdate)
                    .HasName("I5_IEIMPORTFILE");

                entity.HasIndex(e => e.Nlaunchkey)
                    .HasName("I3_IEIMPORTFILE");

                entity.HasIndex(e => new { e.Nsettingkey, e.Cstatus })
                    .HasName("I0_IE_IMPORTFILE");

                entity.Property(e => e.Nfilekey)
                    .HasColumnName("NFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cfile)
                    .HasColumnName("CFILE")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cresult)
                    .HasColumnName("CRESULT")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcreatedate)
                    .HasColumnName("DCREATEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dprocessdate)
                    .HasColumnName("DPROCESSDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nlaunchkey)
                    .HasColumnName("NLAUNCHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecordcount)
                    .HasColumnName("NRECORDCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettingkey)
                    .HasColumnName("NSETTINGKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NlaunchkeyNavigation)
                    .WithMany(p => p.IeImportfile)
                    .HasForeignKey(d => d.Nlaunchkey)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010056");

                entity.HasOne(d => d.NsettingkeyNavigation)
                    .WithMany(p => p.IeImportfile)
                    .HasForeignKey(d => d.Nsettingkey)
                    .HasConstraintName("SYS_C0010057");
            });

            modelBuilder.Entity<IeImportfilerecords>(entity =>
            {
                entity.HasKey(e => e.Nfilerecordkey)
                    .HasName("SYS_C008417");

                entity.ToTable("IE_IMPORTFILERECORDS");

                entity.HasIndex(e => e.Nfilekey)
                    .HasName("I0_IE_IMPORTFILERECORDS");

                entity.Property(e => e.Nfilerecordkey)
                    .HasColumnName("NFILERECORDKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ctable)
                    .HasColumnName("CTABLE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Nfilekey)
                    .HasColumnName("NFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecordkey)
                    .HasColumnName("NRECORDKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NfilekeyNavigation)
                    .WithMany(p => p.IeImportfilerecords)
                    .HasForeignKey(d => d.Nfilekey)
                    .HasConstraintName("SYS_C0010058");
            });

            modelBuilder.Entity<IeInterfacedealstatus>(entity =>
            {
                entity.HasKey(e => e.Ninterfacedealstatuskey)
                    .HasName("SYS_C008419");

                entity.ToTable("IE_INTERFACEDEALSTATUS");

                entity.HasIndex(e => e.Cstatus)
                    .HasName("I4_IE_INTERFACEDEALSTATUS");

                entity.HasIndex(e => new { e.Ndealkey, e.Cstatus })
                    .HasName("I2_IE_INTERFACEDEALSTATUS");

                entity.HasIndex(e => new { e.Ndealkey, e.Ninterfacekey })
                    .HasName("I1_IE_INTERFACEDEALSTATUS")
                    .IsUnique();

                entity.Property(e => e.Ninterfacedealstatuskey)
                    .HasColumnName("NINTERFACEDEALSTATUSKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cmessage)
                    .HasColumnName("CMESSAGE")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninterfacekey)
                    .HasColumnName("NINTERFACEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.NinterfacekeyNavigation)
                    .WithMany(p => p.IeInterfacedealstatus)
                    .HasForeignKey(d => d.Ninterfacekey)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010059");
            });

            modelBuilder.Entity<IeInterfacedealstatuslog>(entity =>
            {
                entity.HasKey(e => e.Ninterfacedealstatuskey)
                    .HasName("SYS_C008422");

                entity.ToTable("IE_INTERFACEDEALSTATUSLOG");

                entity.HasIndex(e => new { e.Ndealkey, e.Ninterfacekey })
                    .HasName("I1_IE_INTERFACEDEALSTATUSLOG");

                entity.Property(e => e.Ninterfacedealstatuskey)
                    .HasColumnName("NINTERFACEDEALSTATUSKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cmessage)
                    .HasColumnName("CMESSAGE")
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterfacekey)
                    .HasColumnName("NINTERFACEKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NinterfacekeyNavigation)
                    .WithMany(p => p.IeInterfacedealstatuslog)
                    .HasForeignKey(d => d.Ninterfacekey)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010060");
            });

            modelBuilder.Entity<IeLaunch>(entity =>
            {
                entity.HasKey(e => e.Nlaunchkey)
                    .HasName("SYS_C008425");

                entity.ToTable("IE_LAUNCH");

                entity.HasIndex(e => e.Ddate)
                    .HasName("I3_IELAUNCH");

                entity.HasIndex(e => e.Nsettingkey)
                    .HasName("I1_IE_LAUNCH");

                entity.HasIndex(e => new { e.Cstatus, e.Ddate })
                    .HasName("I2_IELAUNCH");

                entity.Property(e => e.Nlaunchkey)
                    .HasColumnName("NLAUNCHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cresult)
                    .HasColumnName("CRESULT")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsettingkey)
                    .HasColumnName("NSETTINGKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<IeLaunchsettings>(entity =>
            {
                entity.HasKey(e => e.Nsettingkey)
                    .HasName("SYS_C008427");

                entity.ToTable("IE_LAUNCHSETTINGS");

                entity.Property(e => e.Nsettingkey)
                    .HasColumnName("NSETTINGKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Benabled)
                    .HasColumnName("BENABLED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Bmultiplefolders)
                    .HasColumnName("BMULTIPLEFOLDERS")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Carchivefolder)
                    .HasColumnName("CARCHIVEFOLDER")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdescription)
                    .HasColumnName("CDESCRIPTION")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfilenametemplate)
                    .HasColumnName("CFILENAMETEMPLATE")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cflagfile)
                    .HasColumnName("CFLAGFILE")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfolder)
                    .HasColumnName("CFOLDER")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cjobbody1)
                    .HasColumnName("CJOBBODY1")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cjobbody2)
                    .HasColumnName("CJOBBODY2")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cjobinterval)
                    .HasColumnName("CJOBINTERVAL")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cjobname)
                    .HasColumnName("CJOBNAME")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cjobparams)
                    .HasColumnName("CJOBPARAMS")
                    .HasColumnType("CLOB")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninterfacekey)
                    .HasColumnName("NINTERFACEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmaxrecordcount)
                    .HasColumnName("NMAXRECORDCOUNT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.NinterfacekeyNavigation)
                    .WithMany(p => p.IeLaunchsettings)
                    .HasForeignKey(d => d.Ninterfacekey)
                    .HasConstraintName("SYS_C0010061");
            });

            modelBuilder.Entity<IeMails>(entity =>
            {
                entity.HasKey(e => e.Nmailkey)
                    .HasName("SYS_C008429");

                entity.ToTable("IE_MAILS");

                entity.Property(e => e.Nmailkey)
                    .HasColumnName("NMAILKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bhtml).HasColumnName("BHTML");

                entity.Property(e => e.Cbody)
                    .HasColumnName("CBODY")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Cgenresult)
                    .HasColumnName("CGENRESULT")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Creason)
                    .HasColumnName("CREASON")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Crecipient)
                    .HasColumnName("CRECIPIENT")
                    .IsUnicode(false);

                entity.Property(e => e.Crecipientcopy)
                    .HasColumnName("CRECIPIENTCOPY")
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csubject)
                    .HasColumnName("CSUBJECT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Dcreatedate)
                    .HasColumnName("DCREATEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dprocessdate)
                    .HasColumnName("DPROCESSDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Neventkey)
                    .HasColumnName("NEVENTKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<IeMqGetput>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IE_MQ_GETPUT");

                entity.Property(e => e.Cqueuename)
                    .IsRequired()
                    .HasColumnName("CQUEUENAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cvalue)
                    .HasColumnName("CVALUE")
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Naction).HasColumnName("NACTION");
            });

            modelBuilder.Entity<IeQuikorgsexport>(entity =>
            {
                entity.HasKey(e => e.Nexportkey);

                entity.ToTable("IE_QUIKORGSEXPORT");

                entity.Property(e => e.Nexportkey)
                    .HasColumnName("NEXPORTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cresult)
                    .HasColumnName("CRESULT")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Dcreatedate)
                    .HasColumnName("DCREATEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dprocessdate)
                    .HasColumnName("DPROCESSDATE")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<Importlog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPORTLOG");

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ctext)
                    .HasColumnName("CTEXT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<IngGeishaTrades>(entity =>
            {
                entity.HasKey(e => new { e.ConnectionName, e.ExternalTradeSource, e.ExternalTradeId, e.VersionNum });

                entity.ToTable("ING_GEISHA_TRADES");

                entity.HasIndex(e => e.SequenceNumber)
                    .HasName("UK_GEISHA_SEQ_NMBR")
                    .IsUnique();

                entity.Property(e => e.ConnectionName)
                    .HasColumnName("CONNECTION_NAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalTradeSource)
                    .HasColumnName("EXTERNAL_TRADE_SOURCE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalTradeId)
                    .HasColumnName("EXTERNAL_TRADE_ID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VersionNum).HasColumnName("VERSION_NUM");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.BookId)
                    .HasColumnName("BOOK_ID")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ChargesAmount)
                    .HasColumnName("CHARGES_AMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Counterparty)
                    .HasColumnName("COUNTERPARTY")
                    .HasColumnType("NUMBER(8)");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CURRENCY_ID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.EqSettDate)
                    .HasColumnName("EQ_SETT_DATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fidessa2geishaVersionNum).HasColumnName("FIDESSA2GEISHA_VERSION_NUM");

                entity.Property(e => e.FxRate)
                    .HasColumnName("FX_RATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.InsertTradeDate)
                    .HasColumnName("INSERT_TRADE_DATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InsertTradeTime)
                    .HasColumnName("INSERT_TRADE_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InstrumentType)
                    .HasColumnName("INSTRUMENT_TYPE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasColumnName("NOTES")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalTradeId)
                    .HasColumnName("ORIGINAL_TRADE_ID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalTradePlace)
                    .HasColumnName("ORIGINAL_TRADE_PLACE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.SecIsin)
                    .HasColumnName("SEC_ISIN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SecQuantity)
                    .HasColumnName("SEC_QUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.SecTicker)
                    .HasColumnName("SEC_TICKER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SequenceNumber).HasColumnName("SEQUENCE_NUMBER");

                entity.Property(e => e.SettCurrencyId)
                    .HasColumnName("SETT_CURRENCY_ID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SettType)
                    .HasColumnName("SETT_TYPE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDate)
                    .HasColumnName("TRADE_DATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDirection)
                    .HasColumnName("TRADE_DIRECTION")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TradeTime)
                    .HasColumnName("TRADE_TIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TraderName)
                    .HasColumnName("TRADER_NAME")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Interoffpaym>(entity =>
            {
                entity.HasKey(e => new { e.Nacckeyfrom, e.Nacckeyto })
                    .HasName("SYS_C008438");

                entity.ToTable("INTEROFFPAYM");

                entity.Property(e => e.Nacckeyfrom)
                    .HasColumnName("NACCKEYFROM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckeyto)
                    .HasColumnName("NACCKEYTO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bsendathena).HasColumnName("BSENDATHENA");

                entity.Property(e => e.Burgentpayment).HasColumnName("BURGENTPAYMENT");

                entity.Property(e => e.Cbenacc)
                    .HasColumnName("CBENACC")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Cbenbankacc)
                    .HasColumnName("CBENBANKACC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbenbankbic)
                    .HasColumnName("CBENBANKBIC")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cbenbankname)
                    .HasColumnName("CBENBANKNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cbenbankplace)
                    .HasColumnName("CBENBANKPLACE")
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Cbenbankswift)
                    .HasColumnName("CBENBANKSWIFT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cbeninn)
                    .HasColumnName("CBENINN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbenkpp)
                    .HasColumnName("CBENKPP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbenname)
                    .HasColumnName("CBENNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cbenplace)
                    .HasColumnName("CBENPLACE")
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Cbenstate)
                    .HasColumnName("CBENSTATE")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Ccodstateben)
                    .HasColumnName("CCODSTATEBEN")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccommisaccount)
                    .HasColumnName("CCOMMISACCOUNT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cintermediary)
                    .HasColumnName("CINTERMEDIARY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cintermediaryaccount)
                    .HasColumnName("CINTERMEDIARYACCOUNT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cnostro)
                    .HasColumnName("CNOSTRO")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Coriginacorbankcode)
                    .HasColumnName("CORIGINACORBANKCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpayeracc)
                    .HasColumnName("CPAYERACC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpayeraddress)
                    .HasColumnName("CPAYERADDRESS")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cpayerbirthplace)
                    .HasColumnName("CPAYERBIRTHPLACE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cpayerinn)
                    .HasColumnName("CPAYERINN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpayerkpp)
                    .HasColumnName("CPAYERKPP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpayername)
                    .HasColumnName("CPAYERNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cpayertown)
                    .HasColumnName("CPAYERTOWN")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Cpaymforinter)
                    .HasColumnName("CPAYMFORINTER")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Cpaythruaccount)
                    .HasColumnName("CPAYTHRUACCOUNT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpaythrucode)
                    .HasColumnName("CPAYTHRUCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cresponsibleperson)
                    .HasColumnName("CRESPONSIBLEPERSON")
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Csign1)
                    .HasColumnName("CSIGN1")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Csign2)
                    .HasColumnName("CSIGN2")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Dpayerbirthdate)
                    .HasColumnName("DPAYERBIRTHDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrubtype)
                    .HasColumnName("NRUBTYPE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Limitweightrisk>(entity =>
            {
                entity.HasKey(e => new { e.Ccurrcode, e.Dsetdate })
                    .HasName("SYS_C008445");

                entity.ToTable("LIMITWEIGHTRISK");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("XIF114LIMITWEIGHTRISK");

                entity.HasIndex(e => e.Copcode)
                    .HasName("XIF115LIMITWEIGHTRISK");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dsetdate)
                    .HasColumnName("DSETDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Bflagdays)
                    .HasColumnName("BFLAGDAYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ipresettldays)
                    .HasColumnName("IPRESETTLDAYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nriskweight)
                    .HasColumnName("NRISKWEIGHT")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.Limitweightrisk)
                    .HasForeignKey(d => d.Ccurrcode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010063");

                entity.HasOne(d => d.CopcodeNavigation)
                    .WithMany(p => p.Limitweightrisk)
                    .HasForeignKey(d => d.Copcode)
                    .HasConstraintName("SYS_C0010062");
            });

            modelBuilder.Entity<Limtrend2>(entity =>
            {
                entity.HasKey(e => new { e.Ccontrcode, e.Cperiodcode, e.Ddate })
                    .HasName("SYS_C008449");

                entity.ToTable("LIMTREND2");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nlend)
                    .HasColumnName("NLEND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NlendL)
                    .HasColumnName("NLEND_L")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npre)
                    .HasColumnName("NPRE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NpreL)
                    .HasColumnName("NPRE_L")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettl)
                    .HasColumnName("NSETTL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NsettlL)
                    .HasColumnName("NSETTL_L")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LOG");

                entity.Property(e => e.Clog)
                    .HasColumnName("CLOG")
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LogSettings>(entity =>
            {
                entity.HasKey(e => e.Nsettingkey)
                    .HasName("SYS_C008453");

                entity.ToTable("LOG_SETTINGS");

                entity.Property(e => e.Nsettingkey)
                    .HasColumnName("NSETTINGKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cnote)
                    .HasColumnName("CNOTE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Cvalue)
                    .HasColumnName("CVALUE")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Logrecord>(entity =>
            {
                entity.HasKey(e => e.Nlogreckey)
                    .HasName("SYS_C008451");

                entity.ToTable("LOGRECORD");

                entity.HasIndex(e => e.Dcreatedate)
                    .HasName("I1_LOGRECORD");

                entity.HasIndex(e => e.Ddeldate)
                    .HasName("I5_LOGRECORD");

                entity.HasIndex(e => e.Dlastmodifydate)
                    .HasName("I2_LOGRECORD");

                entity.HasIndex(e => e.Ncreateuser)
                    .HasName("I3_LOGRECORD");

                entity.HasIndex(e => e.Nmodifyuser)
                    .HasName("I4_LOGRECORD");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cdealcomment)
                    .HasColumnName("CDEALCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Dcreatedate)
                    .HasColumnName("DCREATEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeldate)
                    .HasColumnName("DDELDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dlastmodifydate)
                    .HasColumnName("DLASTMODIFYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncreateuser)
                    .HasColumnName("NCREATEUSER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndeluser)
                    .HasColumnName("NDELUSER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmodifyuser)
                    .HasColumnName("NMODIFYUSER")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Mappingproductcond>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MAPPINGPRODUCTCOND");

                entity.Property(e => e.Cfieldname)
                    .HasColumnName("CFIELDNAME")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Coperator)
                    .HasColumnName("COPERATOR")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cproductcode)
                    .HasColumnName("CPRODUCTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cvalue)
                    .HasColumnName("CVALUE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.CproductcodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Cproductcode)
                    .HasConstraintName("SYS_C0010064");
            });

            modelBuilder.Entity<Mappingproducts>(entity =>
            {
                entity.HasKey(e => e.Cproductcode)
                    .HasName("SYS_C008455");

                entity.ToTable("MAPPINGPRODUCTS");

                entity.Property(e => e.Cproductcode)
                    .HasColumnName("CPRODUCTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cfieldlist)
                    .HasColumnName("CFIELDLIST")
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csql)
                    .HasColumnName("CSQL")
                    .IsUnicode(false);

                entity.Property(e => e.Ctable)
                    .HasColumnName("CTABLE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.CopcodeNavigation)
                    .WithMany(p => p.Mappingproducts)
                    .HasForeignKey(d => d.Copcode)
                    .HasConstraintName("SYS_C0010065");
            });

            modelBuilder.Entity<Margincalls>(entity =>
            {
                entity.HasKey(e => new { e.Ndealkey, e.Ntranshkey, e.Ddate })
                    .HasName("SYS_C008459");

                entity.ToTable("MARGINCALLS");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nmargin)
                    .HasColumnName("NMARGIN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarginsumlast)
                    .HasColumnName("NMARGINSUMLAST")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Nettdata>(entity =>
            {
                entity.HasKey(e => new { e.Dvaluedate, e.Ccurrcode, e.Cnettcode })
                    .HasName("SYS_C008463");

                entity.ToTable("NETTDATA");

                entity.HasIndex(e => e.Dvaluedate)
                    .HasName("I_NETTDATA1");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckeyminus)
                    .HasColumnName("NACCKEYMINUS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckeyplus)
                    .HasColumnName("NACCKEYPLUS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Netting>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008471");

                entity.ToTable("NETTING");

                entity.HasIndex(e => e.Cbookcode)
                    .HasName("XIF181NETTING");

                entity.HasIndex(e => e.Ccontrcode)
                    .HasName("XIF177NETTING");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("XIF179NETTING");

                entity.HasIndex(e => e.Copcode)
                    .HasName("XIF180NETTING");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("XIE1NETTING");

                entity.HasIndex(e => e.Dvaluedate)
                    .HasName("XIE2NETTING");

                entity.HasIndex(e => e.Nsourcekey)
                    .HasName("XIF178NETTING");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.HasOne(d => d.CbookcodeNavigation)
                    .WithMany(p => p.Netting)
                    .HasForeignKey(d => d.Cbookcode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010067");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.Netting)
                    .HasForeignKey(d => d.Ccurrcode)
                    .HasConstraintName("SYS_C0010068");
            });

            modelBuilder.Entity<Norm6coeff>(entity =>
            {
                entity.HasKey(e => new { e.Dvalidfrom, e.Dvalidto, e.Ndealtype, e.Bresident, e.Nperiodfrom })
                    .HasName("SYS_C008478");

                entity.ToTable("NORM6COEFF");

                entity.Property(e => e.Dvalidfrom)
                    .HasColumnName("DVALIDFROM")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvalidto)
                    .HasColumnName("DVALIDTO")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealtype)
                    .HasColumnName("NDEALTYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bresident)
                    .HasColumnName("BRESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nperiodfrom)
                    .HasColumnName("NPERIODFROM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncoeff)
                    .HasColumnName("NCOEFF")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Norm6limit>(entity =>
            {
                entity.HasKey(e => e.Ddate)
                    .HasName("SYS_C008481");

                entity.ToTable("NORM6LIMIT");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Npct)
                    .HasColumnName("NPCT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Ocpdata>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Ccurrcode })
                    .HasName("SYS_C008484");

                entity.ToTable("OCPDATA");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Bcurrlimit)
                    .HasColumnName("BCURRLIMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iocporder)
                    .HasColumnName("IOCPORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nballimit)
                    .HasColumnName("NBALLIMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbalrem)
                    .HasColumnName("NBALREM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncapital)
                    .HasColumnName("NCAPITAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncurrlimit)
                    .HasColumnName("NCURRLIMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfulllim)
                    .HasColumnName("NFULLLIM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrem)
                    .HasColumnName("NREM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumbal)
                    .HasColumnName("NSUMBAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumbalrur)
                    .HasColumnName("NSUMBALRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumrur)
                    .HasColumnName("NSUMRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumspot)
                    .HasColumnName("NSUMSPOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumvneb)
                    .HasColumnName("NSUMVNEB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumvnebrur)
                    .HasColumnName("NSUMVNEBRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvneblimit)
                    .HasColumnName("NVNEBLIMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebrem)
                    .HasColumnName("NVNEBREM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Ocpplusfx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OCPPLUSFX");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbnd)
                    .HasColumnName("NBND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfx)
                    .HasColumnName("NFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxbal)
                    .HasColumnName("NFXBAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxvneb)
                    .HasColumnName("NFXVNEB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nocp)
                    .HasColumnName("NOCP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nocptot)
                    .HasColumnName("NOCPTOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntot)
                    .HasColumnName("NTOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusdfxeq)
                    .HasColumnName("NUSDFXEQ")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Ocpplusfx2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OCPPLUSFX2");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbnd)
                    .HasColumnName("NBND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfx)
                    .HasColumnName("NFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nhfxb)
                    .HasColumnName("NHFXB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nhfxs)
                    .HasColumnName("NHFXS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nocp)
                    .HasColumnName("NOCP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nocptot)
                    .HasColumnName("NOCPTOT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Offmarketratesfx>(entity =>
            {
                entity.HasKey(e => e.Noffmrfxkey)
                    .HasName("SYS_C008488");

                entity.ToTable("OFFMARKETRATESFX");

                entity.HasIndex(e => new { e.Ddate, e.Nterm, e.Cccy })
                    .HasName("SYS_C008489")
                    .IsUnique();

                entity.Property(e => e.Noffmrfxkey)
                    .HasColumnName("NOFFMRFXKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cccy)
                    .HasColumnName("CCCY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nratemax)
                    .HasColumnName("NRATEMAX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nratemin)
                    .HasColumnName("NRATEMIN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nterm)
                    .HasColumnName("NTERM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Offmarketratesmm>(entity =>
            {
                entity.HasKey(e => e.Noffmrmmkey)
                    .HasName("SYS_C008493");

                entity.ToTable("OFFMARKETRATESMM");

                entity.HasIndex(e => new { e.Ddate, e.Nterm, e.Cccy })
                    .HasName("SYS_C008494")
                    .IsUnique();

                entity.Property(e => e.Noffmrmmkey)
                    .HasColumnName("NOFFMRMMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cccy)
                    .HasColumnName("CCCY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nratemax)
                    .HasColumnName("NRATEMAX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nratemin)
                    .HasColumnName("NRATEMIN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nterm)
                    .HasColumnName("NTERM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Offmarkettradesmm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OFFMARKETTRADESMM");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Blong)
                    .HasColumnName("BLONG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting2)
                    .HasColumnName("BNETTING2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Boncall)
                    .HasColumnName("BONCALL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccommited)
                    .HasColumnName("CCOMMITED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Clongref)
                    .HasColumnName("CLONGREF")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Crate)
                    .HasColumnName("CRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescredit)
                    .HasColumnName("CSALESCREDIT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dlineexpiry)
                    .HasColumnName("DLINEEXPIRY")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtranexpiry)
                    .HasColumnName("DTRANEXPIRY")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibase)
                    .HasColumnName("IBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterest)
                    .HasColumnName("NINTEREST")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<Olddates>(entity =>
            {
                entity.HasKey(e => e.Dolddate)
                    .HasName("SYS_C008496");

                entity.ToTable("OLDDATES");

                entity.Property(e => e.Dolddate)
                    .HasColumnName("DOLDDATE")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<Operation>(entity =>
            {
                entity.HasKey(e => e.Copcode)
                    .HasName("SYS_C008499");

                entity.ToTable("OPERATION");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurracctype)
                    .HasColumnName("CCURRACCTYPE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Copname)
                    .HasColumnName("COPNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Orgs>(entity =>
            {
                entity.HasKey(e => e.Id);

                entity.ToTable("ORGS");

                entity.HasIndex(e => e.Corgtypecode)
                    .HasName("XIF72ORGS");

                entity.HasIndex(e => e.Cquikclientcode)
                    .HasName("U0_ORGS")
                    .IsUnique();

                entity.HasIndex(e => e.Cvtmgroup)
                    .HasName("IORGS_CVTMGROUP");

                entity.HasIndex(e => e.Ngridid)
                    .HasName("IORGS_NGRIDID");

                entity.HasIndex(e => new { e.Corgtypecode, e.Id })
                    .HasName("XIE1ORGS");

                entity.Property(e => e.Id)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasDefaultValueSql(@"1
");

                entity.Property(e => e.Bcrsexpeq)
                    .HasColumnName("BCRSEXPEQ")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bcrsexper)
                    .HasColumnName("BCRSEXPER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bcrsexpfx)
                    .HasColumnName("BCRSEXPFX")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bcrsexpmm)
                    .HasColumnName("BCRSEXPMM")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bcrsexprg)
                    .HasColumnName("BCRSEXPRG")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bcrsexpss)
                    .HasColumnName("BCRSEXPSS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bdepopayments)
                    .HasColumnName("BDEPOPAYMENTS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bisbank)
                    .HasColumnName("BISBANK")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bisrazvit)
                    .HasColumnName("BISRAZVIT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bloroclient)
                    .HasColumnName("BLOROCLIENT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bmmdepart)
                    .HasColumnName("BMMDEPART")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnoocp)
                    .HasColumnName("BNOOCP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnoresident)
                    .HasColumnName("BNORESIDENT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bprefunding)
                    .HasColumnName("BPREFUNDING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bprincipalorbroker)
                    .HasColumnName("BPRINCIPALORBROKER")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Brubnetting)
                    .HasColumnName("BRUBNETTING")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Cathenacode)
                    .HasColumnName("CATHENACODE")
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbic)
                    .HasColumnName("CBIC")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbloombergcode)
                    .HasColumnName("CBLOOMBERGCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokagreementeq)
                    .HasColumnName("CBROKAGREEMENTEQ")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokagreementfm)
                    .HasColumnName("CBROKAGREEMENTFM")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccddstatus)
                    .HasColumnName("CCDDSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccpack)
                    .HasColumnName("CCPACK")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccpclient)
                    .HasColumnName("CCPCLIENT")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccpclientrub)
                    .HasColumnName("CCPCLIENTRUB")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfatcastatus)
                    .HasColumnName("CFATCASTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cgridname)
                    .HasColumnName("CGRIDNAME")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cgridtown)
                    .HasColumnName("CGRIDTOWN")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cingcode)
                    .HasColumnName("CINGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cinn)
                    .HasColumnName("CINN")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cinvestorcode)
                    .HasColumnName("CINVESTORCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmailnotification)
                    .HasColumnName("CMAILNOTIFICATION")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmicexcode)
                    .HasColumnName("CMICEXCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmicexfxcontr)
                    .HasColumnName("CMICEXFXCONTR")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cnamerus)
                    .HasColumnName("CNAMERUS")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codd)
                    .HasColumnName("CODD")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Corgtypecode)
                    .HasColumnName("CORGTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cparentcode)
                    .HasColumnName("CPARENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cprefsettcurr)
                    .HasColumnName("CPREFSETTCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cquikclientcode)
                    .HasColumnName("CQUIKCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Crequisites)
                    .HasColumnName("CREQUISITES")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creutercode)
                    .HasColumnName("CREUTERCODE")
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Crusname)
                    .HasColumnName("CRUSNAME")
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescredit)
                    .HasColumnName("CSALESCREDIT")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitcode)
                    .HasColumnName("CSUMMITCODE")
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradingvenue)
                    .HasColumnName("CTRADINGVENUE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cvtmgroup)
                    .HasColumnName("CVTMGROUP")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtimenotification)
                    .HasColumnName("DTIMENOTIFICATION")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsexportallow)
                    .HasColumnName("ICRSEXPORTALLOW")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                //entity.Property(e => e.Id)
                //    .HasColumnName("ID")
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Inettingtype)
                    .HasColumnName("INETTINGTYPE")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccountmanagerid)
                    .HasColumnName("NACCOUNTMANAGERID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nathenaclassified)
                    .HasColumnName("NATHENACLASSIFIED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncombps)
                    .HasColumnName("NCOMBPS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncountryid)
                    .HasColumnName("NCOUNTRYID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmmbase)
                    .HasColumnName("NMMBASE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nportionfm)
                    .HasColumnName("NPORTIONFM")
                    .HasColumnType("NUMBER(3,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npriority)
                    .HasColumnName("NPRIORITY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalesmanagerid)
                    .HasColumnName("NSALESMANAGERID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsegmentationid)
                    .HasColumnName("NSEGMENTATIONID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Сcddstatus)
                    .HasColumnName("СCDDSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Сcpack)
                    .HasColumnName("СCPACK")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Сfatcastatus)
                    .HasColumnName("СFATCASTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Сodd)
                    .HasColumnName("СODD")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Сssdstatus)
                    .HasColumnName("СSSDSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CorgtypecodeNavigation)
                    .WithMany(p => p.Orgs)
                    .HasForeignKey(d => d.Corgtypecode)
                    .HasConstraintName("FK1_ORGS");
            });

            modelBuilder.Entity<Orgstype>(entity =>
            {
                entity.HasKey(e => e.Corgtypecode)
                    .HasName("SYS_C008513");

                entity.ToTable("ORGSTYPE");

                entity.Property(e => e.Corgtypecode)
                    .HasColumnName("CORGTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgtypename)
                    .HasColumnName("CORGTYPENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Orgname)
                    .HasColumnName("ORGNAME")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Ourbank>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OURBANK");

                entity.HasIndex(e => e.Corgcode)
                    .HasName("SYS_C008517")
                    .IsUnique();

                entity.HasIndex(e => e.Nkey)
                    .HasName("SYS_C008516")
                    .IsUnique();

                entity.Property(e => e.Bsecenebled)
                    .HasColumnName("BSECENEBLED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cdeftablespace)
                    .HasColumnName("CDEFTABLESPACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctmptablespace)
                    .HasColumnName("CTMPTABLESPACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Iprogtype)
                    .HasColumnName("IPROGTYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nkey)
                    .HasColumnName("NKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Ourbankcapital>(entity =>
            {
                entity.HasKey(e => e.Ddate)
                    .HasName("SYS_C008523");

                entity.ToTable("OURBANKCAPITAL");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.Ourbankcapital)
                    .HasForeignKey(d => d.Ccurrcode)
                    .HasConstraintName("SYS_C0010070");
            });

            modelBuilder.Entity<PRemsonocp3>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Ccurrcode })
                    .HasName("SYS_C008562");

                entity.ToTable("P_REMSONOCP3");

                entity.HasIndex(e => e.Ddate)
                    .HasName("I1_P_REMSONOCP3");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Iocporder)
                    .HasColumnName("IOCPORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrg)
                    .HasColumnName("NACRG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrt)
                    .HasColumnName("NACRT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbonds)
                    .HasColumnName("NBONDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbondsres)
                    .HasColumnName("NBONDSRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuy1)
                    .HasColumnName("NBUY1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuy2)
                    .HasColumnName("NBUY2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncash)
                    .HasColumnName("NCASH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclient)
                    .HasColumnName("NCLIENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncorrect)
                    .HasColumnName("NCORRECT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepog)
                    .HasColumnName("NDEPOG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepot)
                    .HasColumnName("NDEPOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfunds)
                    .HasColumnName("NFUNDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnostro)
                    .HasColumnName("NNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nother1)
                    .HasColumnName("NOTHER1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nother2)
                    .HasColumnName("NOTHER2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsell1)
                    .HasColumnName("NSELL1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsell2)
                    .HasColumnName("NSELL2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebfxbuy)
                    .HasColumnName("NVNEBFXBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebfxsell)
                    .HasColumnName("NVNEBFXSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebotherbuy)
                    .HasColumnName("NVNEBOTHERBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebothersell)
                    .HasColumnName("NVNEBOTHERSELL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<PRemsonocpForliq>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Ccurrcode })
                    .HasName("SYS_C008559");

                entity.ToTable("P_REMSONOCP_FORLIQ");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Nbonds)
                    .HasColumnName("NBONDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncash)
                    .HasColumnName("NCASH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclient)
                    .HasColumnName("NCLIENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepog)
                    .HasColumnName("NDEPOG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepot)
                    .HasColumnName("NDEPOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexp)
                    .HasColumnName("NEXP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexpres)
                    .HasColumnName("NEXPRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfunds)
                    .HasColumnName("NFUNDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxb)
                    .HasColumnName("NFXB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxexp)
                    .HasColumnName("NFXEXP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxs)
                    .HasColumnName("NFXS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninr)
                    .HasColumnName("NINR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnostro)
                    .HasColumnName("NNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nocp)
                    .HasColumnName("NOCP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrurcorrect)
                    .HasColumnName("NRURCORRECT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebfxb)
                    .HasColumnName("NVNEBFXB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebfxs)
                    .HasColumnName("NVNEBFXS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebotherbuy)
                    .HasColumnName("NVNEBOTHERBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebothersell)
                    .HasColumnName("NVNEBOTHERSELL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<PVClientpl>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Ccontrcode })
                    .HasName("SYS_C008568");

                entity.ToTable("P_V_CLIENTPL");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fxd)
                    .HasColumnName("FXD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxm)
                    .HasColumnName("FXM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxw)
                    .HasColumnName("FXW")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxy)
                    .HasColumnName("FXY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mmd)
                    .HasColumnName("MMD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mmm)
                    .HasColumnName("MMM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mmw)
                    .HasColumnName("MMW")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mmy)
                    .HasColumnName("MMY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<PVPositionreeval>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Ccurrcode })
                    .HasName("SYS_C008571");

                entity.ToTable("P_V_POSITIONREEVAL");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Nbondsres)
                    .HasColumnName("NBONDSRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuy)
                    .HasColumnName("NBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncash)
                    .HasColumnName("NCASH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclient)
                    .HasColumnName("NCLIENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclientonly)
                    .HasColumnName("NCLIENTONLY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncorrect)
                    .HasColumnName("NCORRECT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncreditcorr)
                    .HasColumnName("NCREDITCORR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepog)
                    .HasColumnName("NDEPOG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepot)
                    .HasColumnName("NDEPOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfnd)
                    .HasColumnName("NFND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfund)
                    .HasColumnName("NFUND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngaz)
                    .HasColumnName("NGAZ")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnostro)
                    .HasColumnName("NNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnostroonly)
                    .HasColumnName("NNOSTROONLY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nother)
                    .HasColumnName("NOTHER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposfx)
                    .HasColumnName("NPOSFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposfxrev)
                    .HasColumnName("NPOSFXREV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposrrev)
                    .HasColumnName("NPOSRREV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposval)
                    .HasColumnName("NPOSVAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nratetod)
                    .HasColumnName("NRATETOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nratetodrur)
                    .HasColumnName("NRATETODRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrateyes)
                    .HasColumnName("NRATEYES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrateyesrur)
                    .HasColumnName("NRATEYESRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsell)
                    .HasColumnName("NSELL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<PVRates2>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Ccurrcode1, e.Ccurrcode2, e.Csource })
                    .HasName("SYS_C008576");

                entity.ToTable("P_V_RATES2");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ncbrate1)
                    .HasColumnName("NCBRATE1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrate2)
                    .HasColumnName("NCBRATE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrateold1)
                    .HasColumnName("NCBRATEOLD1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrateold2)
                    .HasColumnName("NCBRATEOLD2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npresrate)
                    .HasColumnName("NPRESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrrurusdrate)
                    .HasColumnName("NRRURUSDRATE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Paympurpose>(entity =>
            {
                entity.HasKey(e => e.Cpaympurpose)
                    .HasName("SYS_C008525");

                entity.ToTable("PAYMPURPOSE");

                entity.Property(e => e.Cpaympurpose)
                    .HasColumnName("CPAYMPURPOSE")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Periodstoproducts>(entity =>
            {
                entity.HasKey(e => new { e.Criskgroupcode, e.Cperiodcode })
                    .HasName("SYS_C008528");

                entity.ToTable("PERIODSTOPRODUCTS");

                entity.Property(e => e.Criskgroupcode)
                    .HasColumnName("CRISKGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CperiodcodeNavigation)
                    .WithMany(p => p.Periodstoproducts)
                    .HasForeignKey(d => d.Cperiodcode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010072");

                entity.HasOne(d => d.CriskgroupcodeNavigation)
                    .WithMany(p => p.Periodstoproducts)
                    .HasForeignKey(d => d.Criskgroupcode)
                    .HasConstraintName("SYS_C0010071");
            });

            modelBuilder.Entity<PkAggrpaym>(entity =>
            {
                entity.HasKey(e => new { e.Naggrpaymkey, e.DcreatedateTmp });

                entity.ToTable("PK_AGGRPAYM");

                entity.HasIndex(e => e.Nclientacckey)
                    .HasName("R1_PK_AGGRPAYM");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_AGGRPAYM")
                    .IsUnique();

                entity.Property(e => e.Naggrpaymkey)
                    .HasColumnName("NAGGRPAYMKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nclientacckey)
                    .HasColumnName("NCLIENTACCKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(22,2)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkAssetlocks>(entity =>
            {
                entity.HasKey(e => new { e.Nassetlockskey, e.DcreatedateTmp });

                entity.ToTable("PK_ASSETLOCKS");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_ASSETLOCKS")
                    .IsUnique();

                entity.Property(e => e.Nassetlockskey)
                    .HasColumnName("NASSETLOCKSKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Casset)
                    .HasColumnName("CASSET")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ctradercode)
                    .HasColumnName("CTRADERCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ctrdacc)
                    .HasColumnName("CTRDACC")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nlocked)
                    .HasColumnName("NLOCKED")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntypekey)
                    .HasColumnName("NTYPEKEY")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkClientacc>(entity =>
            {
                entity.HasKey(e => new { e.Nclientacckey, e.DcreatedateTmp });

                entity.ToTable("PK_CLIENTACC");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("R3_PK_CLIENTACC");

                entity.HasIndex(e => e.Corgcode)
                    .HasName("R1_PK_CLIENTACC");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("R2_PK_CLIENTACC");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_CLIENTACC")
                    .IsUnique();

                entity.Property(e => e.Nclientacckey)
                    .HasColumnName("NCLIENTACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Cathenenum)
                    .HasColumnName("CATHENENUM")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cficlass)
                    .HasColumnName("CFICLASS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkClientpaym>(entity =>
            {
                entity.HasKey(e => new { e.Nclientpaymkey, e.DcreatedateTmp });

                entity.ToTable("PK_CLIENTPAYM");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("I3_CLIENTPAYM");

                entity.HasIndex(e => e.Dvaluedate)
                    .HasName("I0_CLIENTPAYM");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("R1_PK_CLIENTPAYM");

                entity.HasIndex(e => e.Nclassified)
                    .HasName("I1_CLIENTPAYM");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_CLIENTPAYM")
                    .IsUnique();

                entity.Property(e => e.Nclientpaymkey)
                    .HasColumnName("NCLIENTPAYMKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Caccountcode)
                    .HasColumnName("CACCOUNTCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdescription)
                    .HasColumnName("CDESCRIPTION")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Clabel)
                    .HasColumnName("CLABEL")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER(38)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(22,2)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkClientpaymSettings>(entity =>
            {
                entity.HasKey(e => new { e.Nclientpaymsettkey, e.DcreatedateTmp });

                entity.ToTable("PK_CLIENTPAYM_SETTINGS");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_CLIENTPAYM_SETTINGS")
                    .IsUnique();

                entity.Property(e => e.Nclientpaymsettkey)
                    .HasColumnName("NCLIENTPAYMSETTKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Caccountcode)
                    .HasColumnName("CACCOUNTCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cclientname)
                    .HasColumnName("CCLIENTNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cclienttaxid)
                    .HasColumnName("CCLIENTTAXID")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdoctypelable)
                    .HasColumnName("CDOCTYPELABLE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Crulename)
                    .HasColumnName("CRULENAME")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Naction)
                    .HasColumnName("NACTION")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nclientid)
                    .HasColumnName("NCLIENTID")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndoctype)
                    .HasColumnName("NDOCTYPE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkCurracc>(entity =>
            {
                entity.HasKey(e => new { e.Nacckey, e.DcreatedateTmp });

                entity.ToTable("PK_CURRACC");

                entity.HasIndex(e => e.Cacctypecode)
                    .HasName("R3_PK_CURRACC");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("R1_PK_CURRACC");

                entity.HasIndex(e => e.Corgcode)
                    .HasName("R2_PK_CURRACC");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_CURRACC")
                    .IsUnique();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Baggregate)
                    .HasColumnName("BAGGREGATE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bincludedealpos)
                    .HasColumnName("BINCLUDEDEALPOS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bnostro)
                    .HasColumnName("BNOSTRO")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Caccbal)
                    .HasColumnName("CACCBAL")
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Caccnum)
                    .HasColumnName("CACCNUM")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cacctypecode)
                    .HasColumnName("CACCTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cathenenum)
                    .HasColumnName("CATHENENUM")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccorrcode)
                    .HasColumnName("CCORRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdefopers)
                    .HasColumnName("CDEFOPERS")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdiasoftcode)
                    .HasColumnName("CDIASOFTCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cminnostrobalance)
                    .HasColumnName("CMINNOSTROBALANCE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cpaymforinter)
                    .HasColumnName("CPAYMFORINTER")
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Crequivisits)
                    .HasColumnName("CREQUIVISITS")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ctradingvenue)
                    .HasColumnName("CTRADINGVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Inostrobalance)
                    .HasColumnName("INOSTROBALANCE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkCurrpaym>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PK_CURRPAYM");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("R1_PK_CURRPAYM");

                entity.HasIndex(e => e.Copcode)
                    .HasName("I3_PK_CURRPAYM");

                entity.HasIndex(e => e.Cpaymtypecode)
                    .HasName("I5_PK_CURRPAYM");

                entity.HasIndex(e => e.Dvaluedate)
                    .HasName("I1_PK_CURRPAYM");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("R2_PK_CURRPAYM");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I2_PK_CURRPAYM");

                entity.HasIndex(e => e.Nlogreckey)
                    .HasName("I6_PK_CURRPAYM");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_CURRPAYM")
                    .IsUnique();

                entity.HasIndex(e => new { e.Ncurrpaymkey, e.DcreatedateTmp })
                    .HasName("PK_PK_CURRPAYM")
                    .IsUnique();

                entity.HasIndex(e => new { e.Dvaluedate, e.Copcode, e.Ccurrcode })
                    .HasName("I7_PK_CURRPAYM");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bstorno)
                    .HasColumnName("BSTORNO")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Btrueflag)
                    .HasColumnName("BTRUEFLAG")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cpaymtypecode)
                    .HasColumnName("CPAYMTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nclcorr)
                    .HasColumnName("NCLCORR")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ncurrpaymkey)
                    .HasColumnName("NCURRPAYMKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nremliq)
                    .HasColumnName("NREMLIQ")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nremocp)
                    .HasColumnName("NREMOCP")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsettcred)
                    .HasColumnName("NSETTCRED")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkCurrweights>(entity =>
            {
                entity.HasKey(e => new { e.Ncurrweightskey, e.DcreatedateTmp });

                entity.ToTable("PK_CURRWEIGHTS");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_CURRWEIGHTS")
                    .IsUnique();

                entity.Property(e => e.Ncurrweightskey)
                    .HasColumnName("NCURRWEIGHTSKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bweight)
                    .HasColumnName("BWEIGHT")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Iregulusweight)
                    .HasColumnName("IREGULUSWEIGHT")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndelta)
                    .HasColumnName("NDELTA")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkLoropaym>(entity =>
            {
                entity.HasKey(e => new { e.Nloropaymkey, e.DcreatedateTmp });

                entity.ToTable("PK_LOROPAYM");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("R1_PK_LOROPAYM");

                entity.HasIndex(e => e.Nclassified)
                    .HasName("I1_LOROPAYM");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_LOROPAYM")
                    .IsUnique();

                entity.Property(e => e.Nloropaymkey)
                    .HasColumnName("NLOROPAYMKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdescription)
                    .HasColumnName("CDESCRIPTION")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Clabel)
                    .HasColumnName("CLABEL")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER(38)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(22,2)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkNettdata>(entity =>
            {
                entity.HasKey(e => new { e.Nnettdatakey, e.DcreatedateTmp });

                entity.ToTable("PK_NETTDATA");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_NETTDATA")
                    .IsUnique();

                entity.HasIndex(e => new { e.Dvaluedate, e.Ccurrcode, e.Cnettcode })
                    .HasName("I_NETTDATA0")
                    .IsUnique();

                entity.Property(e => e.Nnettdatakey)
                    .HasColumnName("NNETTDATAKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckeyminus)
                    .HasColumnName("NACCKEYMINUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckeyplus)
                    .HasColumnName("NACCKEYPLUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkOption>(entity =>
            {
                entity.HasKey(e => new { e.Noptionkey, e.DcreatedateTmp });

                entity.ToTable("PK_OPTION");

                entity.HasIndex(e => e.Cbrokcurr)
                    .HasName("R6_PK_OPTION");

                entity.HasIndex(e => e.Cclientcode)
                    .HasName("R2_PK_OPTION");

                entity.HasIndex(e => e.Ccontrcode)
                    .HasName("R1_PK_OPTION");

                entity.HasIndex(e => e.Ccurcodeb)
                    .HasName("R4_PK_OPTION");

                entity.HasIndex(e => e.Ccurcodes)
                    .HasName("R5_PK_OPTION");

                entity.HasIndex(e => e.Cdealercode)
                    .HasName("R3_PK_OPTION");

                entity.HasIndex(e => e.Coptcorr)
                    .HasName("R7_PK_OPTION");

                entity.HasIndex(e => e.Cpremiumcurr)
                    .HasName("R8_PK_OPTION");

                entity.HasIndex(e => e.Csalescreditcurr)
                    .HasName("R9_PK_OPTION");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_OPTION")
                    .IsUnique();

                entity.Property(e => e.Noptionkey)
                    .HasColumnName("NOPTIONKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Bchange)
                    .HasColumnName("BCHANGE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bnotexercise)
                    .HasColumnName("BNOTEXERCISE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bprint)
                    .HasColumnName("BPRINT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Cbrokcurr)
                    .HasColumnName("CBROKCURR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurcodeb)
                    .HasColumnName("CCURCODEB")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurcodes)
                    .HasColumnName("CCURCODES")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cfield72)
                    .HasColumnName("CFIELD72")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Coptcorr)
                    .HasColumnName("COPTCORR")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Coptiontown)
                    .HasColumnName("COPTIONTOWN")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Copttime)
                    .HasColumnName("COPTTIME")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cpremiumcurr)
                    .HasColumnName("CPREMIUMCURR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Doptiondate)
                    .HasColumnName("DOPTIONDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dpremiumdate)
                    .HasColumnName("DPREMIUMDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dsettledate)
                    .HasColumnName("DSETTLEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nbroksum)
                    .HasColumnName("NBROKSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npct)
                    .HasColumnName("NPCT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npremiumsum)
                    .HasColumnName("NPREMIUMSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nputcall)
                    .HasColumnName("NPUTCALL")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsumbuy)
                    .HasColumnName("NSUMBUY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsumsell)
                    .HasColumnName("NSUMSELL")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<PkOptions>(entity =>
            {
                entity.HasKey(e => new { e.Noptionskey, e.DcreatedateTmp });

                entity.ToTable("PK_OPTIONS");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_OPTIONS")
                    .IsUnique();

                entity.Property(e => e.Noptionskey)
                    .HasColumnName("NOPTIONSKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bautodefprinter)
                    .HasColumnName("BAUTODEFPRINTER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.BautodefprinterMmdp)
                    .HasColumnName("BAUTODEFPRINTER_MMDP")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.BautodefprinterRepo)
                    .HasColumnName("BAUTODEFPRINTER_REPO")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Brepdefprinter)
                    .HasColumnName("BREPDEFPRINTER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Breutermasync)
                    .HasColumnName("BREUTERMASYNC")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Breutermsmq)
                    .HasColumnName("BREUTERMSMQ")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cathenaexpdir)
                    .HasColumnName("CATHENAEXPDIR")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cathenaflag)
                    .HasColumnName("CATHENAFLAG")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cathenarateimportdir)
                    .HasColumnName("CATHENARATEIMPORTDIR")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cbookforreport)
                    .HasColumnName("CBOOKFORREPORT")
                    .HasColumnType("CLOB")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cbookingbranch)
                    .HasColumnName("CBOOKINGBRANCH")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccrsexportdatadirectory)
                    .HasColumnName("CCRSEXPORTDATADIRECTORY")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccrsflag)
                    .HasColumnName("CCRSFLAG")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccrsimportdatadirectory)
                    .HasColumnName("CCRSIMPORTDATADIRECTORY")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdefprinter)
                    .HasColumnName("CDEFPRINTER")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.CdefprinterMmdp)
                    .HasColumnName("CDEFPRINTER_MMDP")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.CdefprinterRepo)
                    .HasColumnName("CDEFPRINTER_REPO")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdeftrader)
                    .HasColumnName("CDEFTRADER")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdiasoftexpdir)
                    .HasColumnName("CDIASOFTEXPDIR")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdiasoftimpdir)
                    .HasColumnName("CDIASOFTIMPDIR")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cermsexpdir)
                    .HasColumnName("CERMSEXPDIR")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cermsimpdir)
                    .HasColumnName("CERMSIMPDIR")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cmicexfxcontr)
                    .HasColumnName("CMICEXFXCONTR")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cplcalcmethod)
                    .HasColumnName("CPLCALCMETHOD")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Creuinqueue)
                    .HasColumnName("CREUINQUEUE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Creuoutqueue)
                    .HasColumnName("CREUOUTQUEUE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Creuterimpdir)
                    .HasColumnName("CREUTERIMPDIR")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csummitexpdir)
                    .HasColumnName("CSUMMITEXPDIR")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csummitimpdir)
                    .HasColumnName("CSUMMITIMPDIR")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cvtmcurrency)
                    .HasColumnName("CVTMCURRENCY")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dlastclientimport)
                    .HasColumnName("DLASTCLIENTIMPORT")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nloadrows)
                    .HasColumnName("NLOADROWS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nswapnumber)
                    .HasColumnName("NSWAPNUMBER")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkOrgnett>(entity =>
            {
                entity.HasKey(e => new { e.Norgnettkey, e.DcreatedateTmp });

                entity.ToTable("PK_ORGNETT");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_ORGNETT")
                    .IsUnique();

                entity.Property(e => e.Norgnettkey)
                    .HasColumnName("NORGNETTKEY")
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Inettingtype)
                    .HasColumnName("INETTINGTYPE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkQuikclasses>(entity =>
            {
                entity.HasKey(e => new { e.Nquikclasseskey, e.DcreatedateTmp });

                entity.ToTable("PK_QUIKCLASSES");

                entity.HasIndex(e => e.Nfavoritcode)
                    .HasName("I0_PK_QUIKCLASSES");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_QUIKCLASSES")
                    .IsUnique();

                entity.Property(e => e.Nquikclasseskey)
                    .HasColumnName("NQUIKCLASSESKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bautodiasoftexport)
                    .HasColumnName("BAUTODIASOFTEXPORT")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Brepowithcc)
                    .HasColumnName("BREPOWITHCC")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cclasscode)
                    .HasColumnName("CCLASSCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cclassname)
                    .HasColumnName("CCLASSNAME")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ibrokermc)
                    .HasColumnName("IBROKERMC")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nfavoritcode)
                    .HasColumnName("NFAVORITCODE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nissuertype)
                    .HasColumnName("NISSUERTYPE")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkQuikclassesDetail>(entity =>
            {
                entity.HasKey(e => new { e.NquikclassesDetailkey, e.DcreatedateTmp });

                entity.ToTable("PK_QUIKCLASSES_DETAIL");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_QUIKCLASSES_DETAIL")
                    .IsUnique();

                entity.Property(e => e.NquikclassesDetailkey)
                    .HasColumnName("NQUIKCLASSES_DETAILKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Caccountmask)
                    .HasColumnName("CACCOUNTMASK")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cinfo)
                    .HasColumnName("CINFO")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfavoritcode)
                    .HasColumnName("NFAVORITCODE")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkRacepaym>(entity =>
            {
                entity.HasKey(e => new { e.Nracepaymkey, e.DcreatedateTmp });

                entity.ToTable("PK_RACEPAYM");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_RACEPAYM")
                    .IsUnique();

                entity.Property(e => e.Nracepaymkey)
                    .HasColumnName("NRACEPAYMKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Cchannel)
                    .HasColumnName("CCHANNEL")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdescription)
                    .HasColumnName("CDESCRIPTION")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cpayer)
                    .HasColumnName("CPAYER")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cracenumber)
                    .HasColumnName("CRACENUMBER")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Creciver)
                    .HasColumnName("CRECIVER")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(22,2)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkRatecbrf>(entity =>
            {
                entity.HasKey(e => new { e.Nratekey, e.DcreatedateTmp });

                entity.ToTable("PK_RATECBRF");

                entity.HasIndex(e => e.Nratekey)
                    .HasName("PK_RATEKEY")
                    .IsUnique();

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_RATECBRF")
                    .IsUnique();

                entity.Property(e => e.Nratekey)
                    .HasColumnName("NRATEKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkRecres>(entity =>
            {
                entity.HasKey(e => new { e.Nrecreskey, e.DcreatedateTmp });

                entity.ToTable("PK_RECRES");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("R1_PK_RECRES");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("IPK_RECRES")
                    .IsUnique();

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_RECRES")
                    .IsUnique();

                entity.Property(e => e.Nrecreskey)
                    .HasColumnName("NRECRESKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bconfirmed)
                    .HasColumnName("BCONFIRMED")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bextended)
                    .HasColumnName("BEXTENDED")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bocp)
                    .HasColumnName("BOCP")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccorrcode)
                    .HasColumnName("CCORRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdepartkey)
                    .HasColumnName("CDEPARTKEY")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Crecrestypecode)
                    .HasColumnName("CRECRESTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkRemains>(entity =>
            {
                entity.HasKey(e => new { e.Nremainskey, e.DcreatedateTmp });

                entity.ToTable("PK_REMAINS");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("R1_PK_REMAINS");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_REMAINS")
                    .IsUnique();

                entity.HasIndex(e => new { e.Dvaluedate, e.Ccurrcode, e.Nacckey })
                    .HasName("I4_REMAINS");

                entity.Property(e => e.Nremainskey)
                    .HasColumnName("NREMAINSKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Btrueflag)
                    .HasColumnName("BTRUEFLAG")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Navail)
                    .HasColumnName("NAVAIL")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ncred)
                    .HasColumnName("NCRED")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndeb)
                    .HasColumnName("NDEB")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nremliq)
                    .HasColumnName("NREMLIQ")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nremocp)
                    .HasColumnName("NREMOCP")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsettcred)
                    .HasColumnName("NSETTCRED")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkRepo>(entity =>
            {
                entity.HasKey(e => new { e.Nrepokey, e.DcreatedateTmp });

                entity.ToTable("PK_REPO");

                entity.HasIndex(e => e.Cbookcode)
                    .HasName("R4_PK_REPO");

                entity.HasIndex(e => e.Cclientcode)
                    .HasName("R2_PK_REPO");

                entity.HasIndex(e => e.Ccontrcode)
                    .HasName("R1_PK_REPO");

                entity.HasIndex(e => e.Ccpclientcode)
                    .HasName("R9_PK_REPO");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("R3_PK_REPO");

                entity.HasIndex(e => e.Cdealercode)
                    .HasName("R5_PK_REPO");

                entity.HasIndex(e => e.Dcontrdate)
                    .HasName("I3_PK_REPO");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("I1_PK_REPO");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("R8_PK_REPO");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I0_PK_REPO");

                entity.HasIndex(e => e.Nsecuritykey)
                    .HasName("X1_PK_REPO");

                entity.HasIndex(e => e.Ntradenum)
                    .HasName("I4_PK_REPO");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_REPO")
                    .IsUnique();

                entity.Property(e => e.Nrepokey)
                    .HasColumnName("NREPOKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bcouponreinvestment)
                    .HasColumnName("BCOUPONREINVESTMENT")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bdividend)
                    .HasColumnName("BDIVIDEND")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bopenpos)
                    .HasColumnName("BOPENPOS")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bsalestrade)
                    .HasColumnName("BSALESTRADE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdownside)
                    .HasColumnName("CDOWNSIDE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Creutersimportfile)
                    .HasColumnName("CREUTERSIMPORTFILE")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csalesname)
                    .HasColumnName("CSALESNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cupside)
                    .HasColumnName("CUPSIDE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("sysdate");

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dclosedeliverydate)
                    .HasColumnName("DCLOSEDELIVERYDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dclosepaymentdate)
                    .HasColumnName("DCLOSEPAYMENTDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ddateofcoupon)
                    .HasColumnName("DDATEOFCOUPON")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dstartdeliverydate)
                    .HasColumnName("DSTARTDELIVERYDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dstartpaymentdate)
                    .HasColumnName("DSTARTPAYMENTDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndividendsum)
                    .HasColumnName("NDIVIDENDSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndividendtax)
                    .HasColumnName("NDIVIDENDTAX")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndividentrate)
                    .HasColumnName("NDIVIDENTRATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndowntrigger)
                    .HasColumnName("NDOWNTRIGGER")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nfxrate)
                    .HasColumnName("NFXRATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nhaircut)
                    .HasColumnName("NHAIRCUT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nmarketprice)
                    .HasColumnName("NMARKETPRICE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nmarketsum2)
                    .HasColumnName("NMARKETSUM2")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Noldrepotype)
                    .HasColumnName("NOLDREPOTYPE")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nprice2)
                    .HasColumnName("NPRICE2")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nrateofreinvest)
                    .HasColumnName("NRATEOFREINVEST")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nrepobase)
                    .HasColumnName("NREPOBASE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nreporate)
                    .HasColumnName("NREPORATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsecuritykey)
                    .HasColumnName("NSECURITYKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsecuritytypekey)
                    .HasColumnName("NSECURITYTYPEKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsettelmenttype)
                    .HasColumnName("NSETTELMENTTYPE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsettlementplacekey)
                    .HasColumnName("NSETTLEMENTPLACEKEY")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsumnom2)
                    .HasColumnName("NSUMNOM2")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsumofreinvest)
                    .HasColumnName("NSUMOFREINVEST")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntradeplace)
                    .HasColumnName("NTRADEPLACE")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nuptrigger)
                    .HasColumnName("NUPTRIGGER")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkRepoPerform>(entity =>
            {
                entity.HasKey(e => new { e.Nrepoperformkey, e.DcreatedateTmp });

                entity.ToTable("PK_REPO_PERFORM");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_REPO_PERFORM")
                    .IsUnique();

                entity.Property(e => e.Nrepoperformkey)
                    .HasColumnName("NREPOPERFORMKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nid)
                    .HasColumnName("NID")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nqty)
                    .HasColumnName("NQTY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nrepo2value)
                    .HasColumnName("NREPO2VALUE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkSbsec>(entity =>
            {
                entity.HasKey(e => new { e.Nsbseckey, e.DcreatedateTmp });

                entity.ToTable("PK_SBSEC");

                entity.HasIndex(e => e.Bbrokerage)
                    .HasName("PK_SBSEC_I4");

                entity.HasIndex(e => e.Cbookcode)
                    .HasName("R1_PK_SBSEC");

                entity.HasIndex(e => e.Cbrief)
                    .HasName("R11_PK_SBSEC");

                entity.HasIndex(e => e.Cclientcode)
                    .HasName("R2_PK_SBSEC");

                entity.HasIndex(e => e.Ccontrcode)
                    .HasName("R3_PK_SBSEC");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("R9_PK_SBSEC");

                entity.HasIndex(e => e.Cdealnumber)
                    .HasName("PK_SBSEC_I12");

                entity.HasIndex(e => e.Cmoexdealid)
                    .HasName("I1_PK_SBSEC");

                entity.HasIndex(e => e.Copcode)
                    .HasName("PK_SBSEC_I8");

                entity.HasIndex(e => e.Csalescreditcurr)
                    .HasName("R8_PK_SBSEC");

                entity.HasIndex(e => e.Csetlcurr)
                    .HasName("R10_PK_SBSEC");

                entity.HasIndex(e => e.Dcontrdate)
                    .HasName("PK_SBSEC_I3");

                entity.HasIndex(e => e.Ddeliverydate)
                    .HasName("PK_SBSEC_I6");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("PK_SBSEC_I5");

                entity.HasIndex(e => e.Dvaluedate)
                    .HasName("PK_SBSEC_I7");

                entity.HasIndex(e => e.Nbrokerkey)
                    .HasName("R4_PK_SBSEC");

                entity.HasIndex(e => e.Ncounteracc)
                    .HasName("R12_PK_SBSEC");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("PK_SBSEC_I11");

                entity.HasIndex(e => e.Nsalespersonid)
                    .HasName("R5_PK_SBSEC");

                entity.HasIndex(e => e.Nsourcekey)
                    .HasName("PK_SBSEC_I9");

                entity.HasIndex(e => e.Ntradenum)
                    .HasName("PK_SBSEC_I1");

                entity.HasIndex(e => e.Ntranshkey)
                    .HasName("R6_PK_SBSEC");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_SBSEC")
                    .IsUnique();

                entity.HasIndex(e => new { e.Cseccode, e.Dmaturitydate, e.Ccouponrate })
                    .HasName("PK_SBSEC_I10");

                entity.HasIndex(e => new { e.Ntranshkey, e.Dcontrdate, e.Isb })
                    .HasName("PK_SBSEC_I2");

                entity.Property(e => e.Nsbseckey)
                    .HasColumnName("NSBSECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bautoprint)
                    .HasColumnName("BAUTOPRINT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bminusport)
                    .HasColumnName("BMINUSPORT")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnocurrpaym)
                    .HasColumnName("BNOCURRPAYM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bnoreserv)
                    .HasColumnName("BNORESERV")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cmoexdealid)
                    .HasColumnName("CMOEXDEALID")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csetlcurr)
                    .HasColumnName("CSETLCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("'DVP'");

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("sysdate ");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dcontrfulldate)
                    .HasColumnName("DCONTRFULLDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Iwaiver)
                    .HasColumnName("IWAIVER")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nbrokerkey)
                    .HasColumnName("NBROKERKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ncounteracc)
                    .HasColumnName("NCOUNTERACC")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nfullamount)
                    .HasColumnName("NFULLAMOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nmarkup)
                    .HasColumnName("NMARKUP")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsettlementkey)
                    .HasColumnName("NSETTLEMENTKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsettplacekey)
                    .HasColumnName("NSETTPLACEKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsumput)
                    .HasColumnName("NSUMPUT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntradeplacekey)
                    .HasColumnName("NTRADEPLACEKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntscommission)
                    .HasColumnName("NTSCOMMISSION")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PkSecprice>(entity =>
            {
                entity.HasKey(e => new { e.Nsecpricekey, e.DcreatedateTmp });

                entity.ToTable("PK_SECPRICE");

                entity.HasIndex(e => e.NvernumberTmp)
                    .HasName("U2_PK_SECPRICE")
                    .IsUnique();

                entity.HasIndex(e => new { e.Ntranshkey, e.Ddate, e.Csourcecode })
                    .HasName("I0_SECPRICE");

                entity.Property(e => e.Nsecpricekey)
                    .HasColumnName("NSECPRICEKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cpricetype)
                    .HasColumnName("CPRICETYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Csourcecode)
                    .HasColumnName("CSOURCECODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nchangeprice)
                    .HasColumnName("NCHANGEPRICE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ncountvol)
                    .HasColumnName("NCOUNTVOL")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npricebid)
                    .HasColumnName("NPRICEBID")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npricebuymax)
                    .HasColumnName("NPRICEBUYMAX")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npriceclose)
                    .HasColumnName("NPRICECLOSE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npricedealmax)
                    .HasColumnName("NPRICEDEALMAX")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npricedealmin)
                    .HasColumnName("NPRICEDEALMIN")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npriceoffer)
                    .HasColumnName("NPRICEOFFER")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npriceoffermin)
                    .HasColumnName("NPRICEOFFERMIN")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npriceopen)
                    .HasColumnName("NPRICEOPEN")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Npvbp)
                    .HasColumnName("NPVBP")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nvol)
                    .HasColumnName("NVOL")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nytmclose)
                    .HasColumnName("NYTMCLOSE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nytmirr)
                    .HasColumnName("NYTMIRR")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nytmour)
                    .HasColumnName("NYTMOUR")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");
            });

            modelBuilder.Entity<PkTrans>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PK_TRANS");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bsendntfy).HasColumnName("BSENDNTFY");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccodefrom)
                    .HasColumnName("CCODEFROM")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccodeto)
                    .HasColumnName("CCODETO")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmail)
                    .HasColumnName("CMAIL")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpaympurpose)
                    .HasColumnName("CPAYMPURPOSE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dsenddate)
                    .HasColumnName("DSENDDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckeyfrom)
                    .HasColumnName("NACCKEYFROM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckeyto)
                    .HasColumnName("NACCKEYTO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsendathene)
                    .HasColumnName("NSENDATHENE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<PkTranshes>(entity =>
            {
                entity.HasKey(e => new { e.Ntranshkey, e.DcreatedateTmp });

                entity.ToTable("PK_TRANSHES");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Bcorp)
                    .HasColumnName("BCORP")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bhand)
                    .HasColumnName("BHAND")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Binclirr)
                    .HasColumnName("BINCLIRR")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Bvar)
                    .HasColumnName("BVAR")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cclassif)
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Choldclassif)
                    .HasColumnName("CHOLDCLASSIF")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cissuecode)
                    .HasColumnName("CISSUECODE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cmicextrcode)
                    .HasColumnName("CMICEXTRCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cregnumber)
                    .HasColumnName("CREGNUMBER")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dafterdate)
                    .HasColumnName("DAFTERDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dfirsttradedate)
                    .HasColumnName("DFIRSTTRADEDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Icouponyear)
                    .HasColumnName("ICOUPONYEAR")
                    .HasColumnType("NUMBER(38)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Irestypenumber)
                    .HasColumnName("IRESTYPENUMBER")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nissuevolume)
                    .HasColumnName("NISSUEVOLUME")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsecnom)
                    .HasColumnName("NSECNOM")
                    .HasColumnType("NUMBER(20)")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nsinkfactor)
                    .HasColumnName("NSINKFACTOR")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Nspecprice)
                    .HasColumnName("NSPECPRICE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("null");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<PlanTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLAN_TABLE");

                entity.Property(e => e.Bytes)
                    .HasColumnName("BYTES")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Cardinality)
                    .HasColumnName("CARDINALITY")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Cost)
                    .HasColumnName("COST")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Distribution)
                    .HasColumnName("DISTRIBUTION")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.ObjectInstance)
                    .HasColumnName("OBJECT_INSTANCE")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.ObjectName)
                    .HasColumnName("OBJECT_NAME")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectNode)
                    .HasColumnName("OBJECT_NODE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectOwner)
                    .HasColumnName("OBJECT_OWNER")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectType)
                    .HasColumnName("OBJECT_TYPE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Operation)
                    .HasColumnName("OPERATION")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Optimizer)
                    .HasColumnName("OPTIMIZER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Options)
                    .HasColumnName("OPTIONS")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Other)
                    .HasColumnName("OTHER")
                    .HasColumnType("LONG");

                entity.Property(e => e.OtherTag)
                    .HasColumnName("OTHER_TAG")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ParentId)
                    .HasColumnName("PARENT_ID")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.PartitionId)
                    .HasColumnName("PARTITION_ID")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.PartitionStart)
                    .HasColumnName("PARTITION_START")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PartitionStop)
                    .HasColumnName("PARTITION_STOP")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Position)
                    .HasColumnName("POSITION")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Remarks)
                    .HasColumnName("REMARKS")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SearchColumns)
                    .HasColumnName("SEARCH_COLUMNS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.StatementId)
                    .HasColumnName("STATEMENT_ID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Timestamp)
                    .HasColumnName("TIMESTAMP")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<Pldata>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Corgcode, e.Ccurrcode, e.Csource })
                    .HasName("SYS_C008547");

                entity.ToTable("PLDATA");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Depoday)
                    .HasColumnName("DEPODAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Depomonth)
                    .HasColumnName("DEPOMONTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Depoweek)
                    .HasColumnName("DEPOWEEK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Depoyear)
                    .HasColumnName("DEPOYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxday)
                    .HasColumnName("FXDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxmonth)
                    .HasColumnName("FXMONTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxweek)
                    .HasColumnName("FXWEEK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxyear)
                    .HasColumnName("FXYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Gkoday)
                    .HasColumnName("GKODAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Gkomonth)
                    .HasColumnName("GKOMONTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Gkoweek)
                    .HasColumnName("GKOWEEK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Gkoyear)
                    .HasColumnName("GKOYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mofday)
                    .HasColumnName("MOFDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mofmonth)
                    .HasColumnName("MOFMONTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mofweek)
                    .HasColumnName("MOFWEEK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mofyear)
                    .HasColumnName("MOFYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Strday)
                    .HasColumnName("STRDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Strmonth)
                    .HasColumnName("STRMONTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Strweek)
                    .HasColumnName("STRWEEK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Stryear)
                    .HasColumnName("STRYEAR")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Plfin>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Cproduct, e.Csource })
                    .HasName("SYS_C008551");

                entity.ToTable("PLFIN");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Cproduct)
                    .HasColumnName("CPRODUCT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ncorrect)
                    .HasColumnName("NCORRECT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncorrectrur)
                    .HasColumnName("NCORRECTRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndtdrur)
                    .HasColumnName("NDTDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndtdusd)
                    .HasColumnName("NDTDUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtdrur)
                    .HasColumnName("NMTDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtdruryes)
                    .HasColumnName("NMTDRURYES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtdusd)
                    .HasColumnName("NMTDUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtdusdyst)
                    .HasColumnName("NMTDUSDYST")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytdrur)
                    .HasColumnName("NYTDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytdusd)
                    .HasColumnName("NYTDUSD")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<PlsqlProfilerData>(entity =>
            {
                entity.HasKey(e => new { e.Runid, e.UnitNumber, e.Line })
                    .HasName("SYS_C008553");

                entity.ToTable("PLSQL_PROFILER_DATA");

                entity.Property(e => e.Runid)
                    .HasColumnName("RUNID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.UnitNumber)
                    .HasColumnName("UNIT_NUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Line)
                    .HasColumnName("LINE#")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.MaxTime)
                    .HasColumnName("MAX_TIME")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.MinTime)
                    .HasColumnName("MIN_TIME")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Spare1)
                    .HasColumnName("SPARE1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Spare2)
                    .HasColumnName("SPARE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Spare3)
                    .HasColumnName("SPARE3")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Spare4)
                    .HasColumnName("SPARE4")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.TotalOccur)
                    .HasColumnName("TOTAL_OCCUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.TotalTime)
                    .HasColumnName("TOTAL_TIME")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.PlsqlProfilerUnits)
                    .WithMany(p => p.PlsqlProfilerData)
                    .HasForeignKey(d => new { d.Runid, d.UnitNumber })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010073");
            });

            modelBuilder.Entity<PlsqlProfilerRuns>(entity =>
            {
                entity.HasKey(e => e.Runid)
                    .HasName("SYS_C008554");

                entity.ToTable("PLSQL_PROFILER_RUNS");

                entity.Property(e => e.Runid)
                    .HasColumnName("RUNID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.RelatedRun)
                    .HasColumnName("RELATED_RUN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.RunComment)
                    .HasColumnName("RUN_COMMENT")
                    .HasMaxLength(2047)
                    .IsUnicode(false);

                entity.Property(e => e.RunComment1)
                    .HasColumnName("RUN_COMMENT1")
                    .HasMaxLength(2047)
                    .IsUnicode(false);

                entity.Property(e => e.RunDate)
                    .HasColumnName("RUN_DATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.RunOwner)
                    .HasColumnName("RUN_OWNER")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RunSystemInfo)
                    .HasColumnName("RUN_SYSTEM_INFO")
                    .HasMaxLength(2047)
                    .IsUnicode(false);

                entity.Property(e => e.RunTotalTime)
                    .HasColumnName("RUN_TOTAL_TIME")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Spare1)
                    .HasColumnName("SPARE1")
                    .HasMaxLength(256)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PlsqlProfilerUnits>(entity =>
            {
                entity.HasKey(e => new { e.Runid, e.UnitNumber })
                    .HasName("SYS_C008556");

                entity.ToTable("PLSQL_PROFILER_UNITS");

                entity.Property(e => e.Runid)
                    .HasColumnName("RUNID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.UnitNumber)
                    .HasColumnName("UNIT_NUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Spare1)
                    .HasColumnName("SPARE1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Spare2)
                    .HasColumnName("SPARE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.TotalTime)
                    .HasColumnName("TOTAL_TIME")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.UnitName)
                    .HasColumnName("UNIT_NAME")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOwner)
                    .HasColumnName("UNIT_OWNER")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.UnitTimestamp)
                    .HasColumnName("UNIT_TIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.UnitType)
                    .HasColumnName("UNIT_TYPE")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.Run)
                    .WithMany(p => p.PlsqlProfilerUnits)
                    .HasForeignKey(d => d.Runid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010074");
            });

            modelBuilder.Entity<Pricesource>(entity =>
            {
                entity.HasKey(e => e.Csourcecode)
                    .HasName("SYS_C008565");

                entity.ToTable("PRICESOURCE");

                entity.Property(e => e.Csourcecode)
                    .HasColumnName("CSOURCECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csourcename)
                    .HasColumnName("CSOURCENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Productbookmapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRODUCTBOOKMAPPING");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cproductcode)
                    .HasColumnName("CPRODUCTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CbookcodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Cbookcode)
                    .HasConstraintName("SYS_C0010076");

                entity.HasOne(d => d.CproductcodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Cproductcode)
                    .HasConstraintName("SYS_C0010075");
            });

            modelBuilder.Entity<QuikParamsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QUIK_PARAMS_HISTORY");

                entity.HasIndex(e => e.Dcatchdatetime)
                    .HasName("I0_QUIK_PARAMS_HISTORY");

                entity.Property(e => e.Accruednumber)
                    .HasColumnName("ACCRUEDNUMBER")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Bid)
                    .HasColumnName("BID")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Biddepth)
                    .HasColumnName("BIDDEPTH")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Biddeptht)
                    .HasColumnName("BIDDEPTHT")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Buydepo)
                    .HasColumnName("BUYDEPO")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Buyprofit)
                    .HasColumnName("BUYPROFIT")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Change)
                    .HasColumnName("CHANGE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Changetime)
                    .HasColumnName("CHANGETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Chngclose)
                    .HasColumnName("CHNGCLOSE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Chngopen)
                    .HasColumnName("CHNGOPEN")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Cjobparams)
                    .HasColumnName("CJOBPARAMS")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Classcode)
                    .IsRequired()
                    .HasColumnName("CLASSCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Classname)
                    .HasColumnName("CLASSNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Closeprice)
                    .HasColumnName("CLOSEPRICE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Closetime)
                    .HasColumnName("CLOSETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Closeval)
                    .HasColumnName("CLOSEVAL")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Closeyield)
                    .HasColumnName("CLOSEYIELD")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Couponvalue)
                    .HasColumnName("COUPONVALUE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Currentvalue)
                    .HasColumnName("CURRENTVALUE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Curval)
                    .HasColumnName("CURVAL")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Dcatchdatetime)
                    .HasColumnName("DCATCHDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Facevalue)
                    .HasColumnName("FACEVALUE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.High)
                    .HasColumnName("HIGH")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Highbid)
                    .HasColumnName("HIGHBID")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Last)
                    .HasColumnName("LAST")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Lastchange)
                    .HasColumnName("LASTCHANGE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Lasttoprevstlprc)
                    .HasColumnName("LASTTOPREVSTLPRC")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Lastvalue)
                    .HasColumnName("LASTVALUE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Longname)
                    .HasColumnName("LONGNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Lotsize)
                    .HasColumnName("LOTSIZE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Low)
                    .HasColumnName("LOW")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Lowoffer)
                    .HasColumnName("LOWOFFER")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Marketprice)
                    .HasColumnName("MARKETPRICE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Matdate)
                    .HasColumnName("MATDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Maxoutvolume)
                    .HasColumnName("MAXOUTVOLUME")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Negnumtrades)
                    .HasColumnName("NEGNUMTRADES")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Negvaltoday)
                    .HasColumnName("NEGVALTODAY")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Numbids)
                    .HasColumnName("NUMBIDS")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Numcontracts)
                    .HasColumnName("NUMCONTRACTS")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Numoffers)
                    .HasColumnName("NUMOFFERS")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Numtrades)
                    .HasColumnName("NUMTRADES")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Offer)
                    .HasColumnName("OFFER")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Offerdepth)
                    .HasColumnName("OFFERDEPTH")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Offerdeptht)
                    .HasColumnName("OFFERDEPTHT")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Openp)
                    .HasColumnName("OPENP")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Openval)
                    .HasColumnName("OPENVAL")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Optionbase)
                    .HasColumnName("OPTIONBASE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Optiontype)
                    .HasColumnName("OPTIONTYPE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Prevprice)
                    .HasColumnName("PREVPRICE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Prevsettlprice)
                    .HasColumnName("PREVSETTLPRICE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Prevwaprice)
                    .HasColumnName("PREVWAPRICE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Pricemax)
                    .HasColumnName("PRICEMAX")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Pricemin)
                    .HasColumnName("PRICEMIN")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Priceminusprevwaprice)
                    .HasColumnName("PRICEMINUSPREVWAPRICE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Pricemvtlimit)
                    .HasColumnName("PRICEMVTLIMIT")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Pricemvtlimitt1)
                    .HasColumnName("PRICEMVTLIMITT1")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Primarydist)
                    .HasColumnName("PRIMARYDIST")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Qty)
                    .HasColumnName("QTY")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Repo2price)
                    .HasColumnName("REPO2PRICE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Securcode)
                    .IsRequired()
                    .HasColumnName("SECURCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Securname)
                    .HasColumnName("SECURNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Selldepo)
                    .HasColumnName("SELLDEPO")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Sellprofit)
                    .HasColumnName("SELLPROFIT")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Theorprice)
                    .HasColumnName("THEORPRICE")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Time)
                    .HasColumnName("TIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Tradechange)
                    .HasColumnName("TRADECHANGE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Tradingstatus)
                    .HasColumnName("TRADINGSTATUS")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Valtoday)
                    .HasColumnName("VALTODAY")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Value)
                    .HasColumnName("VALUE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Voltoday)
                    .HasColumnName("VOLTODAY")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Waprice)
                    .HasColumnName("WAPRICE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Yield)
                    .HasColumnName("YIELD")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Yieldatprevwaprice)
                    .HasColumnName("YIELDATPREVWAPRICE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Yieldatwaprice)
                    .HasColumnName("YIELDATWAPRICE")
                    .HasColumnType("NUMBER(19,4)");
            });

            modelBuilder.Entity<QuikclassesOld>(entity =>
            {
                entity.HasKey(e => e.Cclasscode)
                    .HasName("SYS_C008578");

                entity.ToTable("QUIKCLASSES_OLD");

                entity.Property(e => e.Cclasscode)
                    .HasColumnName("CCLASSCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bautodiasoftexport)
                    .HasColumnName("BAUTODIASOFTEXPORT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Brepowithcc).HasColumnName("BREPOWITHCC");

                entity.Property(e => e.Cclassname)
                    .HasColumnName("CCLASSNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cfavoritcode)
                    .HasColumnName("CFAVORITCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cissuertype)
                    .HasColumnName("CISSUERTYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ibrokermc)
                    .HasColumnName("IBROKERMC")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Quikerrors>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QUIKERRORS");

                entity.HasIndex(e => e.Ddate)
                    .HasName("QUIKERRORS_I2");

                entity.HasIndex(e => e.Ntradenum)
                    .HasName("QUIKERRORS_I1");

                entity.Property(e => e.Bprocess).HasColumnName("BPROCESS");

                entity.Property(e => e.Cerror)
                    .HasColumnName("CERROR")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nkey)
                    .HasColumnName("NKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Ratecbrf>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RATECBRF");

                entity.HasIndex(e => e.Nratekey)
                    .HasName("ID_NRATEKEY")
                    .IsUnique();

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nratekey)
                    .HasColumnName("NRATEKEY")
                    .HasColumnType("NUMBER(38)");
            });

            modelBuilder.Entity<Rates>(entity =>
            {
                entity.HasKey(e => new { e.Ccurrcode1, e.Ccurrcode2, e.Ddate, e.Csourcecode })
                    .HasName("SYS_C008589");

                entity.ToTable("RATES");

                entity.HasIndex(e => e.Ccurrcode1)
                    .HasName("XIF18RATES");

                entity.HasIndex(e => e.Ccurrcode2)
                    .HasName("XIF19RATES");

                entity.HasIndex(e => e.Csourcecode)
                    .HasName("XIF59RATES");

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Csourcecode)
                    .HasColumnName("CSOURCECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Icot)
                    .HasColumnName("ICOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrcoeff)
                    .HasColumnName("NCBRCOEFF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.HasOne(d => d.Ccurrcode1Navigation)
                    .WithMany(p => p.RatesCcurrcode1Navigation)
                    .HasForeignKey(d => d.Ccurrcode1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010078");

                entity.HasOne(d => d.Ccurrcode2Navigation)
                    .WithMany(p => p.RatesCcurrcode2Navigation)
                    .HasForeignKey(d => d.Ccurrcode2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010079");

                entity.HasOne(d => d.CsourcecodeNavigation)
                    .WithMany(p => p.Rates)
                    .HasForeignKey(d => d.Csourcecode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010077");
            });

            modelBuilder.Entity<Recres>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008601");

                entity.ToTable("RECRES");

                entity.HasIndex(e => e.Bextended)
                    .HasName("I1_RECRES");

                entity.HasIndex(e => e.Cbookcode)
                    .HasName("I6_RECRES");

                entity.HasIndex(e => e.Cclientcode)
                    .HasName("I4_RECRES");

                entity.HasIndex(e => e.Ccorrcode)
                    .HasName("I3_RECRES");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("I9_RECRES");

                entity.HasIndex(e => e.Cdepartkey)
                    .HasName("I5_RECRES");

                entity.HasIndex(e => e.Copcode)
                    .HasName("I7_RECRES");

                entity.HasIndex(e => e.Crecrestypecode)
                    .HasName("I10_RECRES");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("I0_RECRES");

                entity.HasIndex(e => e.Dvaluedate)
                    .HasName("I2_RECRES");

                entity.HasIndex(e => e.Nlogreckey)
                    .HasName("I11_RECRES");

                entity.HasIndex(e => e.Nsourcekey)
                    .HasName("I8_RECRES");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bconfirmed)
                    .HasColumnName("BCONFIRMED")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bextended)
                    .HasColumnName("BEXTENDED")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bocp)
                    .HasColumnName("BOCP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccorrcode)
                    .HasColumnName("CCORRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdepartkey)
                    .HasColumnName("CDEPARTKEY")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Crecrestypecode)
                    .HasColumnName("CRECRESTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CbookcodeNavigation)
                    .WithMany(p => p.Recres)
                    .HasForeignKey(d => d.Cbookcode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010080");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.Recres)
                    .HasForeignKey(d => d.Ccurrcode)
                    .HasConstraintName("SYS_C0010081");

                entity.HasOne(d => d.CopcodeNavigation)
                    .WithMany(p => p.Recres)
                    .HasForeignKey(d => d.Copcode)
                    .HasConstraintName("SYS_C0010082");

                entity.HasOne(d => d.NlogreckeyNavigation)
                    .WithMany(p => p.Recres)
                    .HasForeignKey(d => d.Nlogreckey)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010083");
            });

            modelBuilder.Entity<RegulusAudit>(entity =>
            {
                entity.HasKey(e => e.Nauditkey)
                    .HasName("NAUDITKEY_KEY");

                entity.ToTable("REGULUS_AUDIT");

                entity.HasIndex(e => e.Dchangedate)
                    .HasName("I_DCHANGEDATE");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("NDEALKEY_INDEX");

                entity.Property(e => e.Nauditkey)
                    .HasColumnName("NAUDITKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bdelete)
                    .HasColumnName("BDELETE")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dchangedate)
                    .HasColumnName("DCHANGEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ichangetype)
                    .HasColumnName("ICHANGETYPE")
                    .HasColumnType("NUMBER(2)");

                entity.Property(e => e.Nauditrecordkey)
                    .HasColumnName("NAUDITRECORDKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Regvolume>(entity =>
            {
                entity.HasKey(e => new { e.Ntranshkey, e.Ddate })
                    .HasName("SYS_C008606");

                entity.ToTable("REGVOLUME");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nvol)
                    .HasColumnName("NVOL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Remains>(entity =>
            {
                entity.HasKey(e => new { e.Dvaluedate, e.Ccurrcode, e.Nacckey });

                entity.ToTable("REMAINS");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("I2_REMAINS");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("I3_REMAINS");

                entity.HasIndex(e => new { e.Dvaluedate, e.Ccurrcode })
                    .HasName("I1_REMAINS");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Btrueflag)
                    .HasColumnName("BTRUEFLAG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Navail)
                    .HasColumnName("NAVAIL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncred)
                    .HasColumnName("NCRED")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndeb)
                    .HasColumnName("NDEB")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nremliq)
                    .HasColumnName("NREMLIQ")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nremocp)
                    .HasColumnName("NREMOCP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsettcred)
                    .HasColumnName("NSETTCRED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.Remains)
                    .HasForeignKey(d => d.Ccurrcode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK2_REMAINS");

                entity.HasOne(d => d.NacckeyNavigation)
                    .WithMany(p => p.Remains)
                    .HasForeignKey(d => d.Nacckey)
                    .HasConstraintName("FK1_REMAINS");
            });

            modelBuilder.Entity<Remainsbysec>(entity =>
            {
                entity.HasKey(e => new { e.Cseccode, e.Nacckey, e.Ddeliverydate })
                    .HasName("SYS_C008622");

                entity.ToTable("REMAINSBYSEC");

                entity.HasIndex(e => e.Cseccode)
                    .HasName("XIF145REMAINSBYSEC");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("XIF146REMAINSBYSEC");

                entity.HasIndex(e => new { e.Ddeliverydate, e.Cseccode })
                    .HasName("XIE1REMAINSBYSEC");

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Btrueflag)
                    .HasColumnName("BTRUEFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncred)
                    .HasColumnName("NCRED")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ndeb)
                    .HasColumnName("NDEB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.HasOne(d => d.NacckeyNavigation)
                    .WithMany(p => p.Remainsbysec)
                    .HasForeignKey(d => d.Nacckey)
                    .HasConstraintName("SYS_C0010087");
            });

            modelBuilder.Entity<Remainsbytransh>(entity =>
            {
                entity.HasKey(e => new { e.Ntranshkey, e.Nacckey, e.Ddeliverydate })
                    .HasName("SYS_C008630");

                entity.ToTable("REMAINSBYTRANSH");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("XIF144REMAINSBYTRANSH");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Btrueflag)
                    .HasColumnName("BTRUEFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncred)
                    .HasColumnName("NCRED")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ndeb)
                    .HasColumnName("NDEB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.HasOne(d => d.NacckeyNavigation)
                    .WithMany(p => p.Remainsbytransh)
                    .HasForeignKey(d => d.Nacckey)
                    .HasConstraintName("SYS_C0010090");
            });

            modelBuilder.Entity<Remfromcp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("REMFROMCP");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrem)
                    .HasColumnName("NREM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nremin)
                    .HasColumnName("NREMIN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nremin1)
                    .HasColumnName("NREMIN1")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Remsonocp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("REMSONOCP");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacrg)
                    .HasColumnName("NACRG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrt)
                    .HasColumnName("NACRT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbonds)
                    .HasColumnName("NBONDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuy)
                    .HasColumnName("NBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncash)
                    .HasColumnName("NCASH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclient)
                    .HasColumnName("NCLIENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncorrect)
                    .HasColumnName("NCORRECT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepog)
                    .HasColumnName("NDEPOG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepot)
                    .HasColumnName("NDEPOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfunds)
                    .HasColumnName("NFUNDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnostro)
                    .HasColumnName("NNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nocp)
                    .HasColumnName("NOCP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nocptot)
                    .HasColumnName("NOCPTOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nother)
                    .HasColumnName("NOTHER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsell)
                    .HasColumnName("NSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebfxbuy)
                    .HasColumnName("NVNEBFXBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebfxsell)
                    .HasColumnName("NVNEBFXSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebotherbuy)
                    .HasColumnName("NVNEBOTHERBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebothersell)
                    .HasColumnName("NVNEBOTHERSELL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Remsonocp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("REMSONOCP2");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iocporder)
                    .HasColumnName("IOCPORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrg)
                    .HasColumnName("NACRG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrt)
                    .HasColumnName("NACRT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbonds)
                    .HasColumnName("NBONDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuy)
                    .HasColumnName("NBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncash)
                    .HasColumnName("NCASH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclient)
                    .HasColumnName("NCLIENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncorrect)
                    .HasColumnName("NCORRECT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepog)
                    .HasColumnName("NDEPOG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepot)
                    .HasColumnName("NDEPOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfunds)
                    .HasColumnName("NFUNDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnostro)
                    .HasColumnName("NNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nocp)
                    .HasColumnName("NOCP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nother)
                    .HasColumnName("NOTHER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsell)
                    .HasColumnName("NSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebfxbuy)
                    .HasColumnName("NVNEBFXBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebfxsell)
                    .HasColumnName("NVNEBFXSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebotherbuy)
                    .HasColumnName("NVNEBOTHERBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebothersell)
                    .HasColumnName("NVNEBOTHERSELL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Repbyexample>(entity =>
            {
                entity.HasKey(e => e.Ntemprepkey)
                    .HasName("SYS_C008632");

                entity.ToTable("REPBYEXAMPLE");

                entity.Property(e => e.Ntemprepkey)
                    .HasColumnName("NTEMPREPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cparentcode)
                    .HasColumnName("CPARENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Crepfile)
                    .HasColumnName("CREPFILE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Crepname)
                    .HasColumnName("CREPNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nparentrepkey)
                    .HasColumnName("NPARENTREPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Repo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("REPO");

                entity.Property(e => e.Bbrokerage).HasColumnName("BBROKERAGE");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Bopenpos).HasColumnName("BOPENPOS");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Irepobase)
                    .HasColumnName("IREPOBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlowerdiscount)
                    .HasColumnName("NLOWERDISCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nupperdiscount)
                    .HasColumnName("NUPPERDISCOUNT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<RepoDelrecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("REPO_DELRECORD");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I0_REPO_DELRECORD");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bopenpos)
                    .HasColumnName("BOPENPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Irepobase)
                    .HasColumnName("IREPOBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncouponrate)
                    .HasColumnName("NCOUPONRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER(8,4)");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrepokey)
                    .HasColumnName("NREPOKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<RepoOld>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008651");

                entity.ToTable("REPO_OLD");

                entity.HasIndex(e => e.Cdealnumber)
                    .HasName("XAK1REPO")
                    .IsUnique();

                entity.HasIndex(e => e.Dclosedate)
                    .HasName("XIE4REPO");

                entity.HasIndex(e => e.Dcontrdate)
                    .HasName("XIE3REPO");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("XIE1REPO");

                entity.HasIndex(e => e.Dstartdate)
                    .HasName("XIE2REPO");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");
                 //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bopenpos)
                    .HasColumnName("BOPENPOS")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                  //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("'DVP'");

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");
               //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");
                //         .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");
                //           .ValueGeneratedOnAdd();

                entity.Property(e => e.Irepobase)
                    .HasColumnName("IREPOBASE")
                    .HasColumnType("NUMBER");
                //        .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");
                //         .ValueGeneratedOnAdd();

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER(8,4)");
                //          .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");
                //             .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");
                //            .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");
                //        .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlowerdiscount)
                    .HasColumnName("NLOWERDISCOUNT")
                    .HasColumnType("NUMBER");
                //         .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER(19,2)");
                //               .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");
                //           .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER(19,2)");
                //               .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER(19,2)");
                //          .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");
                //           .ValueGeneratedOnAdd();

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER(19,2)");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER(19,2)");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM");
                //       .ValueGeneratedOnAdd();

                entity.Property(e => e.Nupperdiscount)
                    .HasColumnName("NUPPERDISCOUNT")
                    .HasColumnType("NUMBER");
                //   .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CbookcodeNavigation)
                    .WithMany(p => p.RepoOld)
                    .HasForeignKey(d => d.Cbookcode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010091");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.RepoOld)
                    .HasForeignKey(d => d.Ccurrcode)
                    .HasConstraintName("SYS_C0010093");

                entity.HasOne(d => d.CdealercodeNavigation)
                    .WithMany(p => p.RepoOld)
                    .HasForeignKey(d => d.Cdealercode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010092");

                entity.HasOne(d => d.CopcodeNavigation)
                    .WithMany(p => p.RepoOld)
                    .HasForeignKey(d => d.Copcode)
                    .HasConstraintName("SYS_C0010094");
            });

            modelBuilder.Entity<Reportperiods>(entity =>
            {
                entity.HasKey(e => new { e.Crepcode, e.Cperiodcode })
                    .HasName("SYS_C008654");

                entity.ToTable("REPORTPERIODS");

                entity.Property(e => e.Crepcode)
                    .HasColumnName("CREPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Idays)
                    .HasColumnName("IDAYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Reportstat>(entity =>
            {
                entity.HasKey(e => e.Nkey)
                    .HasName("SYS_C008656");

                entity.ToTable("REPORTSTAT");

                entity.HasIndex(e => e.Dreadytime)
                    .HasName("I2_REPORTSTAT");

                entity.HasIndex(e => e.Nwhandler)
                    .HasName("I3_REPORTSTAT");

                entity.Property(e => e.Nkey)
                    .HasColumnName("NKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cparams)
                    .HasColumnName("CPARAMS")
                    .IsUnicode(false);

                entity.Property(e => e.Cprinter)
                    .HasColumnName("CPRINTER")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Creportfilename)
                    .HasColumnName("CREPORTFILENAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cvalues)
                    .HasColumnName("CVALUES")
                    .IsUnicode(false);

                entity.Property(e => e.Dlaunchtime)
                    .HasColumnName("DLAUNCHTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dreadytime)
                    .HasColumnName("DREADYTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nwhandler)
                    .HasColumnName("NWHANDLER")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Reposums>(entity =>
            {
                entity.HasKey(e => e.Nreposumkey)
                    .HasName("SYS_C008661");

                entity.ToTable("REPOSUMS");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I1_REPOSUMS");

                entity.HasIndex(e => e.Ntranshkey)
                    .HasName("I2_REPOSUMS");

                entity.Property(e => e.Nreposumkey)
                    .HasColumnName("NREPOSUMKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");
                //         .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(256)
                    .IsUnicode(false);
                //       .ValueGeneratedOnAdd();

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");
                //          .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
                //             .ValueGeneratedOnAdd();

                entity.HasOne(d => d.NdealkeyNavigation)
                    .WithMany(p => p.Reposums)
                    .HasForeignKey(d => d.Ndealkey)
                    .HasConstraintName("SYS_C0010095");
            });

            modelBuilder.Entity<ReposumsDelrecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("REPOSUMS_DELRECORD");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I0_REPOSUMS_DELRECORD");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposumkey)
                    .HasColumnName("NREPOSUMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Riskcrosslimit>(entity =>
            {
                entity.HasKey(e => new { e.Ccrossgroupcode, e.Criskgroupcode })
                    .HasName("SYS_C008665");

                entity.ToTable("RISKCROSSLIMIT");

                entity.Property(e => e.Ccrossgroupcode)
                    .HasColumnName("CCROSSGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Criskgroupcode)
                    .HasColumnName("CRISKGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CcrossgroupcodeNavigation)
                    .WithMany(p => p.Riskcrosslimit)
                    .HasForeignKey(d => d.Ccrossgroupcode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010098");

                entity.HasOne(d => d.CriskgroupcodeNavigation)
                    .WithMany(p => p.Riskcrosslimit)
                    .HasForeignKey(d => d.Criskgroupcode)
                    .HasConstraintName("SYS_C0010099");
            });

            modelBuilder.Entity<Riskgroups>(entity =>
            {
                entity.HasKey(e => e.Criskgroupcode)
                    .HasName("SYS_C008667");

                entity.ToTable("RISKGROUPS");

                entity.Property(e => e.Criskgroupcode)
                    .HasColumnName("CRISKGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cgroupriskcomment)
                    .HasColumnName("CGROUPRISKCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Riskperiods>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RISKPERIODS");

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Criskgroupcode)
                    .HasColumnName("CRISKGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csubperiodcode)
                    .HasColumnName("CSUBPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Idaysfrom)
                    .HasColumnName("IDAYSFROM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Idaysto)
                    .HasColumnName("IDAYSTO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iworkdays)
                    .HasColumnName("IWORKDAYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nriskweight)
                    .HasColumnName("NRISKWEIGHT")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CperiodcodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Cperiodcode)
                    .HasConstraintName("SYS_C0010101");

                entity.HasOne(d => d.CriskgroupcodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Criskgroupcode)
                    .HasConstraintName("SYS_C0010100");
            });

            modelBuilder.Entity<Riskperiodscodes>(entity =>
            {
                entity.HasKey(e => e.Cperiodcode)
                    .HasName("SYS_C008672");

                entity.ToTable("RISKPERIODSCODES");

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cperiodcomment)
                    .HasColumnName("CPERIODCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Riskweightings>(entity =>
            {
                entity.HasKey(e => new { e.Cperiodcode, e.Csubperiodcode, e.Criskgroupcode, e.Csubriskgroupcode })
                    .HasName("SYS_C008677");

                entity.ToTable("RISKWEIGHTINGS");

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csubperiodcode)
                    .HasColumnName("CSUBPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Criskgroupcode)
                    .HasColumnName("CRISKGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csubriskgroupcode)
                    .HasColumnName("CSUBRISKGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nriskweight)
                    .HasColumnName("NRISKWEIGHT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.HasKey(e => e.Nrolekey)
                    .HasName("SYS_C008681");

                entity.ToTable("ROLES");

                entity.Property(e => e.Nrolekey)
                    .HasColumnName("NROLEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bmandatory)
                    .HasColumnName("BMANDATORY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cadrolename)
                    .HasColumnName("CADROLENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cadrolesid)
                    .HasColumnName("CADROLESID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Crolecode)
                    .HasColumnName("CROLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Crolename)
                    .HasColumnName("CROLENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsystemkey)
                    .HasColumnName("NSYSTEMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsysytemkey)
                    .HasColumnName("NSYSYTEMKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NsystemkeyNavigation)
                    .WithMany(p => p.Roles)
                    .HasForeignKey(d => d.Nsystemkey)
                    .HasConstraintName("SYS_C0010103");
            });

            modelBuilder.Entity<RolesBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ROLES_BAK");

                entity.Property(e => e.Bmandatory)
                    .HasColumnName("BMANDATORY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cadrolename)
                    .HasColumnName("CADROLENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cadrolesid)
                    .HasColumnName("CADROLESID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Crolecode)
                    .HasColumnName("CROLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Crolename)
                    .HasColumnName("CROLENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrolekey)
                    .HasColumnName("NROLEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsystemkey)
                    .HasColumnName("NSYSTEMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsysytemkey)
                    .HasColumnName("NSYSYTEMKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Rurrepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RURREPO");

                entity.Property(e => e.Bbrokerage).HasColumnName("BBROKERAGE");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Bopenpos).HasColumnName("BOPENPOS");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Creutersimportfile)
                    .HasColumnName("CREUTERSIMPORTFILE")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Irepobase)
                    .HasColumnName("IREPOBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlowerdiscount)
                    .HasColumnName("NLOWERDISCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum2)
                    .HasColumnName("NMARKETSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice2)
                    .HasColumnName("NPRICE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nupperdiscount)
                    .HasColumnName("NUPPERDISCOUNT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<RurrepoDelrecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RURREPO_DELRECORD");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I0_RURREPO_DELRECORD");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bopenpos)
                    .HasColumnName("BOPENPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Irepobase)
                    .HasColumnName("IREPOBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncouponrate)
                    .HasColumnName("NCOUPONRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER(8,4)");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nmarketsum2)
                    .HasColumnName("NMARKETSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice2)
                    .HasColumnName("NPRICE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrepokey)
                    .HasColumnName("NREPOKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntradenum).HasColumnName("NTRADENUM");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<RurrepoOld>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008700");

                entity.ToTable("RURREPO_OLD");

                entity.HasIndex(e => e.Copcode)
                    .HasName("I2_RURREPO");

                entity.HasIndex(e => e.Ntradenum)
                    .HasName("I1_RURREPO");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bopenpos)
                    .HasColumnName("BOPENPOS")
                    .HasColumnType("NUMBER");
                //       .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //        .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //         .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Creutersimportfile)
                    .HasColumnName("CREUTERSIMPORTFILE")
                    .HasMaxLength(100)
                    .IsUnicode(false);
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(256)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("'DVP'");

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql(@"sysdate
");

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Irepobase)
                    .HasColumnName("IREPOBASE")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER(8,4)");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlowerdiscount)
                    .HasColumnName("NLOWERDISCOUNT")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER(19,2)");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarketsum2)
                    .HasColumnName("NMARKETSUM2")
                    .HasColumnType("NUMBER");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice2)
                    .HasColumnName("NPRICE2")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER(19,2)");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER(19,2)");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER(19,2)");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER(19,2)");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nupperdiscount)
                    .HasColumnName("NUPPERDISCOUNT")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CopcodeNavigation)
                    .WithMany(p => p.RurrepoOld)
                    .HasForeignKey(d => d.Copcode)
                    .HasConstraintName("SYS_C0010104");
            });

            modelBuilder.Entity<Rurreposums>(entity =>
            {
                entity.HasKey(e => e.Nreposumkey)
                    .HasName("SYS_C008704");

                entity.ToTable("RURREPOSUMS");

                entity.Property(e => e.Nreposumkey)
                    .HasColumnName("NREPOSUMKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.NdealkeyNavigation)
                    .WithMany(p => p.Rurreposums)
                    .HasForeignKey(d => d.Ndealkey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C0010106");
            });

            modelBuilder.Entity<RurreposumsDelrecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RURREPOSUMS_DELRECORD");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I0_RURREPOSUMS_DELRECORD");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposumkey)
                    .HasColumnName("NREPOSUMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<SbsecDeleted>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008729");

                entity.ToTable("SBSEC_DELETED");

                entity.HasIndex(e => e.Bbrokerage)
                    .HasName("I4_SBSEC");

                entity.HasIndex(e => e.Cbookcode)
                    .HasName("XIF200SBSEC");

                entity.HasIndex(e => e.Cclientcode)
                    .HasName("XIF202SBSEC");

                entity.HasIndex(e => e.Ccontrcode)
                    .HasName("XIF201SBSEC");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("XIF204SBSEC");

                entity.HasIndex(e => e.Cdealercode)
                    .HasName("XIF199SBSEC");

                entity.HasIndex(e => e.Copcode)
                    .HasName("XIF196SBSEC");

                entity.HasIndex(e => e.Dcontrdate)
                    .HasName("I3_SBSEC");

                entity.HasIndex(e => e.Ddeliverydate)
                    .HasName("XIE2SBSEC");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("XIE1SBSEC");

                entity.HasIndex(e => e.Dvaluedate)
                    .HasName("XIE3SBSEC");

                entity.HasIndex(e => e.Nlogreckey)
                    .HasName("XIF248SBSEC");

                entity.HasIndex(e => e.Nsourcekey)
                    .HasName("XIF198SBSEC");

                entity.HasIndex(e => e.Ntradenum)
                    .HasName("I1_SBSEC");

                entity.HasIndex(e => new { e.Cseccode, e.Dmaturitydate, e.Ccouponrate })
                    .HasName("XIF203SBSEC");

                entity.HasIndex(e => new { e.Ntranshkey, e.Dcontrdate, e.Isb })
                    .HasName("I2_SBSEC");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bautoprint)
                    .HasColumnName("BAUTOPRINT");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bminusport)
                    .HasColumnName("BMINUSPORT")
                    .HasColumnType("NUMBER");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Bnocurrpaym)
                    .HasColumnName("BNOCURRPAYM")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnoreserv)
                    .HasColumnName("BNORESERV")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false);
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(80)
                    .IsUnicode(false);
                //.ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Csetlcurr)
                    .HasColumnName("CSETLCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("'DVP'");

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(200)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql("sysdate ");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrfulldate)
                    .HasColumnName("DCONTRFULLDATE")
                    .HasColumnType("DATE");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                   .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER(19,2)");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbrokerkey)
                    .HasColumnName("NBROKERKEY")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncounteracc)
                    .HasColumnName("NCOUNTERACC")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER(19,2)");
                // .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER(19,2)");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarkup)
                    .HasColumnName("NMARKUP")
                    .HasColumnType("NUMBER");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER(11,7)");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER(19,2)");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumput)
                    .HasColumnName("NSUMPUT")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CbookcodeNavigation)
                    .WithMany(p => p.SbsecDeleted)
                    .HasForeignKey(d => d.Cbookcode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010108");

                entity.HasOne(d => d.CdealercodeNavigation)
                    .WithMany(p => p.SbsecDeleted)
                    .HasForeignKey(d => d.Cdealercode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010110");
            });

            modelBuilder.Entity<SbsecDelrecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SBSEC_DELRECORD");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I0_SBSEC_DELRECORD");

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bminusport)
                    .HasColumnName("BMINUSPORT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocurrpaym)
                    .HasColumnName("BNOCURRPAYM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnoreserv)
                    .HasColumnName("BNORESERV")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmoexdealid)
                    .HasColumnName("CMOEXDEALID")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlcurr)
                    .HasColumnName("CSETTLCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrfulldate)
                    .HasColumnName("DCONTRFULLDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbrokerkey)
                    .HasColumnName("NBROKERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncounteracc)
                    .HasColumnName("NCOUNTERACC")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarkup)
                    .HasColumnName("NMARKUP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER(11,7)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumput)
                    .HasColumnName("NSUMPUT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SbsecOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SBSEC_OLD");

                entity.Property(e => e.Bautoprint).HasColumnName("BAUTOPRINT");

                entity.Property(e => e.Bbrokerage).HasColumnName("BBROKERAGE");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bminusport)
                    .HasColumnName("BMINUSPORT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocrs).HasColumnName("BNOCRS");

                entity.Property(e => e.Bnocurrpaym)
                    .HasColumnName("BNOCURRPAYM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoreserv)
                    .HasColumnName("BNORESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csetlcurr)
                    .HasColumnName("CSETLCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrfulldate)
                    .HasColumnName("DCONTRFULLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nbrokerkey)
                    .HasColumnName("NBROKERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncounteracc)
                    .HasColumnName("NCOUNTERACC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarkup)
                    .HasColumnName("NMARKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER(11,7)");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumput)
                    .HasColumnName("NSUMPUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum).HasColumnName("NTRADENUM");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Secacc>(entity =>
            {
                entity.HasKey(e => e.Nacckey)
                    .HasName("SYS_C008757");

                entity.ToTable("SECACC");

                entity.HasIndex(e => e.Corgcode)
                    .HasName("XIF81SECACC");

                entity.HasIndex(e => e.Csecacccode)
                    .HasName("XIF80SECACC");

                entity.HasIndex(e => e.Cseccode)
                    .HasName("XIF79SECACC");

                entity.HasIndex(e => new { e.Corgcode, e.Cseccode })
                    .HasName("XIE1SECACC");

                entity.HasIndex(e => new { e.Cseccode, e.Cacc })
                    .HasName("XIE2SECACC");

                entity.HasIndex(e => new { e.Cacc, e.Cseccode, e.Corgcode })
                    .HasName("XIE3SECACC");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Cacceq)
                    .HasColumnName("CACCEQ")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicexid)
                    .HasColumnName("CMICEXID")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csecacccode)
                    .HasColumnName("CSECACCCODE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ncombps)
                    .HasColumnName("NCOMBPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomrepo)
                    .HasColumnName("NCOMREPO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomrepoyear)
                    .HasColumnName("NCOMREPOYEAR")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CsecacccodeNavigation)
                    .WithMany(p => p.Secacc)
                    .HasForeignKey(d => d.Csecacccode)
                    .HasConstraintName("SYS_C0010112");
            });

            modelBuilder.Entity<Secaccdefault>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SECACCDEFAULT");

                entity.HasIndex(e => e.Copcode)
                    .HasName("XIF82SECACCDEFAULT");

                entity.HasIndex(e => e.Csecacccode)
                    .HasName("XIF83SECACCDEFAULT");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("XIF84SECACCDEFAULT");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csecacccode)
                    .HasColumnName("CSECACCCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CopcodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Copcode)
                    .HasConstraintName("SYS_C0010116");

                entity.HasOne(d => d.CsecacccodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Csecacccode)
                    .HasConstraintName("SYS_C0010115");

                entity.HasOne(d => d.NacckeyNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Nacckey)
                    .HasConstraintName("SYS_C0010114");
            });

            modelBuilder.Entity<Secacctypes>(entity =>
            {
                entity.HasKey(e => e.Csecacccode)
                    .HasName("SYS_C008764");

                entity.ToTable("SECACCTYPES");

                entity.Property(e => e.Csecacccode)
                    .HasColumnName("CSECACCCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csecaccname)
                    .HasColumnName("CSECACCNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Secpaym>(entity =>
            {
                entity.HasKey(e => e.Nsecpaymkey)
                    .HasName("SYS_C008772");

                entity.ToTable("SECPAYM");

                entity.HasIndex(e => e.Copcode)
                    .HasName("XIF135SECPAYM");

                entity.HasIndex(e => e.Nacckey)
                    .HasName("XIF136SECPAYM");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("XIE2SECPAYM");

                entity.HasIndex(e => new { e.Ntranshkey, e.Ddeliverydate })
                    .HasName("I1_SECPAYM");

                entity.Property(e => e.Nsecpaymkey)
                    .HasColumnName("NSECPAYMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bstorno)
                    .HasColumnName("BSTORNO")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.NacckeyNavigation)
                    .WithMany(p => p.Secpaym)
                    .HasForeignKey(d => d.Nacckey)
                    .HasConstraintName("SYS_C0010118");
            });

            modelBuilder.Entity<Secprice>(entity =>
            {
                entity.HasKey(e => new { e.Ntranshkey, e.Ddate, e.Csourcecode })
                    .HasName("SYS_C008777");

                entity.ToTable("SECPRICE");

                entity.HasIndex(e => e.Csourcecode)
                    .HasName("XIF60SECPRICE")
                    .HasFilter("\"DDATE\"");

                entity.HasIndex(e => new { e.Ntranshkey, e.Csourcecode })
                    .HasName("I1_SECPRICE")
                    .IsUnique()
                    .HasFilter("\"DDATE\"");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csourcecode)
                    .HasColumnName("CSOURCECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpricetype)
                    .HasColumnName("CPRICETYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nchangeprice)
                    .HasColumnName("NCHANGEPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncountvol)
                    .HasColumnName("NCOUNTVOL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npricebid)
                    .HasColumnName("NPRICEBID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npricebuymax)
                    .HasColumnName("NPRICEBUYMAX")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npriceclose)
                    .HasColumnName("NPRICECLOSE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npricedealmax)
                    .HasColumnName("NPRICEDEALMAX")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npricedealmin)
                    .HasColumnName("NPRICEDEALMIN")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npriceoffer)
                    .HasColumnName("NPRICEOFFER")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npriceoffermin)
                    .HasColumnName("NPRICEOFFERMIN")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npriceopen)
                    .HasColumnName("NPRICEOPEN")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npvbp)
                    .HasColumnName("NPVBP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nvol)
                    .HasColumnName("NVOL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nytmclose)
                    .HasColumnName("NYTMCLOSE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nytmirr)
                    .HasColumnName("NYTMIRR")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Nytmour)
                    .HasColumnName("NYTMOUR")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CsourcecodeNavigation)
                    .WithMany(p => p.Secprice)
                    .HasForeignKey(d => d.Csourcecode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010120");
            });

            modelBuilder.Entity<Securities>(entity =>
            {
                entity.HasKey(e => e.Cseccode)
                    .HasName("SYS_C0010411");

                entity.ToTable("SECURITIES");

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bsubfederal)
                    .HasColumnName("BSUBFEDERAL")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cissuer)
                    .IsRequired()
                    .HasColumnName("CISSUER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuername)
                    .HasColumnName("CISSUERNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Csecname)
                    .IsRequired()
                    .HasColumnName("CSECNAME")
                    .HasColumnType("CHAR(18)");

                entity.Property(e => e.Csposcode)
                    .HasColumnName("CSPOSCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Icouponyear)
                    .HasColumnName("ICOUPONYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Idaystodelivery)
                    .HasColumnName("IDAYSTODELIVERY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ikupbase)
                    .HasColumnName("IKUPBASE")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.Securities)
                    .HasForeignKey(d => d.Ccurrcode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010413");

                entity.HasOne(d => d.CsposcodeNavigation)
                    .WithMany(p => p.Securities)
                    .HasForeignKey(d => d.Csposcode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010412");
            });

            modelBuilder.Entity<Securityprofiles>(entity =>
            {
                entity.HasKey(e => e.Nprofilekey)
                    .HasName("SYS_C008786");

                entity.ToTable("SECURITYPROFILES");

                entity.Property(e => e.Nprofilekey)
                    .HasColumnName("NPROFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cprofilekey)
                    .HasColumnName("CPROFILEKEY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cprofilename)
                    .HasColumnName("CPROFILENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Dexpirationdate)
                    .HasColumnName("DEXPIRATIONDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ioneusersess)
                    .HasColumnName("IONEUSERSESS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ipasswtrycount)
                    .HasColumnName("IPASSWTRYCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nchangeperiod)
                    .HasColumnName("NCHANGEPERIOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nminpasswlength)
                    .HasColumnName("NMINPASSWLENGTH")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Seldefault>(entity =>
            {
                entity.HasKey(e => new { e.Nuserkey, e.Nrepkey })
                    .HasName("SYS_C008788");

                entity.ToTable("SELDEFAULT");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Nselectcondkey)
                    .HasColumnName("NSELECTCONDKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Selectconds>(entity =>
            {
                entity.HasKey(e => e.Nselectcondkey)
                    .HasName("SYS_C008792");

                entity.ToTable("SELECTCONDS");

                entity.Property(e => e.Nselectcondkey)
                    .HasColumnName("NSELECTCONDKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bdefault)
                    .HasColumnName("BDEFAULT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cselectcondname)
                    .HasColumnName("CSELECTCONDNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NrepkeyNavigation)
                    .WithMany(p => p.Selectconds)
                    .HasForeignKey(d => d.Nrepkey)
                    .HasConstraintName("SYS_C0010123");
            });

            modelBuilder.Entity<Selectcondsline>(entity =>
            {
                entity.HasKey(e => e.Ncondlinefkey)
                    .HasName("SYS_C008796");

                entity.ToTable("SELECTCONDSLINE");

                entity.Property(e => e.Ncondlinefkey)
                    .HasColumnName("NCONDLINEFKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bdefaultflag)
                    .HasColumnName("BDEFAULTFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binterval)
                    .HasColumnName("BINTERVAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Blist)
                    .HasColumnName("BLIST")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bmaxavailable)
                    .HasColumnName("BMAXAVAILABLE")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Bminavailable)
                    .HasColumnName("BMINAVAILABLE")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Bworkdays)
                    .HasColumnName("BWORKDAYS")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Cdefvalue)
                    .HasColumnName("CDEFVALUE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Idefvalue)
                    .HasColumnName("IDEFVALUE")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Itodayfrom)
                    .HasColumnName("ITODAYFROM")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Itodayto)
                    .HasColumnName("ITODAYTO")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Navailfkey)
                    .HasColumnName("NAVAILFKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselectcondkey)
                    .HasColumnName("NSELECTCONDKEY")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.NavailfkeyNavigation)
                    .WithMany(p => p.Selectcondsline)
                    .HasForeignKey(d => d.Navailfkey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C0010124");

                entity.HasOne(d => d.NselectcondkeyNavigation)
                    .WithMany(p => p.Selectcondsline)
                    .HasForeignKey(d => d.Nselectcondkey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("SYS_C0010125");
            });

            modelBuilder.Entity<Servreq>(entity =>
            {
                entity.HasKey(e => e.Nservreqkey);

                entity.ToTable("SERVREQ");

                entity.Property(e => e.Nservreqkey)
                    .HasColumnName("NSERVREQKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cservreqstatus)
                    .HasColumnName("CSERVREQSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csubject)
                    .HasColumnName("CSUBJECT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dchangestatus)
                    .HasColumnName("DCHANGESTATUS")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dexportdate)
                    .HasColumnName("DEXPORTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmailnoanswersend)
                    .HasColumnName("DMAILNOANSWERSEND")
                    .HasColumnType("DATE");

                entity.Property(e => e.Drespdate)
                    .HasColumnName("DRESPDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nexpfilekey)
                    .HasColumnName("NEXPFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nimpfilekey)
                    .HasColumnName("NIMPFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Statustype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STATUSTYPE");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatuscode)
                    .HasColumnName("CSTATUSCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatustypecode)
                    .HasColumnName("CSTATUSTYPECODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Inotacceptable).HasColumnName("INOTACCEPTABLE");
            });

            modelBuilder.Entity<Subperioddays>(entity =>
            {
                entity.HasKey(e => new { e.Criskgroupcode, e.Cperiodcode, e.Csubperiodcode })
                    .HasName("SYS_C008802");

                entity.ToTable("SUBPERIODDAYS");

                entity.Property(e => e.Criskgroupcode)
                    .HasColumnName("CRISKGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csubperiodcode)
                    .HasColumnName("CSUBPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bworkdays)
                    .HasColumnName("BWORKDAYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bworkdaysto)
                    .HasColumnName("BWORKDAYSTO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Idaysfrom)
                    .HasColumnName("IDAYSFROM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Idaysto)
                    .HasColumnName("IDAYSTO")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CriskgroupcodeNavigation)
                    .WithMany(p => p.Subperioddays)
                    .HasForeignKey(d => d.Criskgroupcode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010126");
            });

            modelBuilder.Entity<Subperiods>(entity =>
            {
                entity.HasKey(e => new { e.Csubperiodcode, e.Cperiodcode })
                    .HasName("SYS_C008805");

                entity.ToTable("SUBPERIODS");

                entity.Property(e => e.Csubperiodcode)
                    .HasColumnName("CSUBPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CperiodcodeNavigation)
                    .WithMany(p => p.Subperiods)
                    .HasForeignKey(d => d.Cperiodcode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010127");
            });

            modelBuilder.Entity<Subriskgroups>(entity =>
            {
                entity.HasKey(e => new { e.Criskgroupcode, e.Csubriskgroupcode })
                    .HasName("SYS_C008808");

                entity.ToTable("SUBRISKGROUPS");

                entity.Property(e => e.Criskgroupcode)
                    .HasColumnName("CRISKGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csubriskgroupcode)
                    .HasColumnName("CSUBRISKGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CriskgroupcodeNavigation)
                    .WithMany(p => p.Subriskgroups)
                    .HasForeignKey(d => d.Criskgroupcode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SYS_C0010128");
            });

            modelBuilder.Entity<Summitdeal>(entity =>
            {
                entity.HasKey(e => e.Nsummitdealkey)
                    .HasName("SUMMITKEY");

                entity.ToTable("SUMMITDEAL");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("DEALKEYINDEX");

                entity.HasIndex(e => new { e.Ddealdate, e.Dtimestamp })
                    .HasName("DEALDATEINDEX");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealstatus)
                    .HasColumnName("CDEALSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE")
                    .HasColumnType("CHAR(2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cexportstatus)
                    .HasColumnName("CEXPORTSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creference)
                    .HasColumnName("CREFERENCE")
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddealdate)
                    .HasColumnName("DDEALDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npreviouskey)
                    .HasColumnName("NPREVIOUSKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SummitdealLast>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUMMITDEAL_LAST");

                entity.HasIndex(e => e.Cexportstatus)
                    .HasName("I4_SUMMITDEAL_LAST");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I2_SUMMITDEAL_LAST");

                entity.HasIndex(e => e.Nsummitdealkey)
                    .HasName("I3_SUMMITDEAL_LAST");

                entity.HasIndex(e => new { e.Ddealdate, e.Dtimestamp })
                    .HasName("I1_SUMMITDEAL_LAST");

                entity.Property(e => e.Cdealstatus)
                    .HasColumnName("CDEALSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cexportstatus)
                    .HasColumnName("CEXPORTSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Creference)
                    .HasColumnName("CREFERENCE")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ddealdate)
                    .HasColumnName("DDEALDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreviouskey)
                    .HasColumnName("NPREVIOUSKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Swap>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008837");

                entity.ToTable("SWAP");

                entity.HasIndex(e => e.Cbookcode)
                    .HasName("XIF166SWAP");

                entity.HasIndex(e => e.Cclientcode)
                    .HasName("XIF171SWAP");

                entity.HasIndex(e => e.Ccontrcode)
                    .HasName("XIF170SWAP");

                entity.HasIndex(e => e.Ccurrcodeb)
                    .HasName("XIF167SWAP");

                entity.HasIndex(e => e.Ccurrcodes)
                    .HasName("XIF173SWAP");

                entity.HasIndex(e => e.Cdealercode)
                    .HasName("XIF169SWAP");

                entity.HasIndex(e => e.Cdepartcode)
                    .HasName("XIF172SWAP");

                entity.HasIndex(e => e.Cfixcurrcode)
                    .HasName("XIF176SWAP");

                entity.HasIndex(e => e.Copcode)
                    .HasName("XIF174SWAP");

                entity.HasIndex(e => e.Cpair)
                    .HasName("XIF175SWAP");

                entity.HasIndex(e => e.Dcontrdate)
                    .HasName("XIE2SWAP");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("XIE1SWAP");

                entity.HasIndex(e => e.Dvaluedateb)
                    .HasName("XIE3SWAP");

                entity.HasIndex(e => e.Dvaluedateb2)
                    .HasName("XIE5SWAP");

                entity.HasIndex(e => e.Dvaluedates)
                    .HasName("XIE4SWAP");

                entity.HasIndex(e => e.Dvaluedates2)
                    .HasName("XIE6SWAP");

                entity.HasIndex(e => e.Nlogreckey)
                    .HasName("XIF256SWAP");

                entity.HasIndex(e => e.Nsourcekey)
                    .HasName("XIF168SWAP");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnettingb2)
                    .HasColumnName("BNETTINGB2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnettings2)
                    .HasColumnName("BNETTINGS2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfixcurrcode)
                    .HasColumnName("CFIXCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cswaprate)
                    .HasColumnName("CSWAPRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedateb2)
                    .HasColumnName("DVALUEDATEB2")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedates2)
                    .HasColumnName("DVALUEDATES2")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Iperiod)
                    .HasColumnName("IPERIOD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndeporate)
                    .HasColumnName("NDEPORATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate2)
                    .HasColumnName("NRATE2")
                    .HasColumnType("NUMBER(19,9)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumb2)
                    .HasColumnName("NSUMB2")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsums2)
                    .HasColumnName("NSUMS2")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nswaprate)
                    .HasColumnName("NSWAPRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CbookcodeNavigation)
                    .WithMany(p => p.Swap)
                    .HasForeignKey(d => d.Cbookcode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010129");

                entity.HasOne(d => d.CcurrcodebNavigation)
                    .WithMany(p => p.SwapCcurrcodebNavigation)
                    .HasForeignKey(d => d.Ccurrcodeb)
                    .HasConstraintName("SYS_C0010131");

                entity.HasOne(d => d.CcurrcodesNavigation)
                    .WithMany(p => p.SwapCcurrcodesNavigation)
                    .HasForeignKey(d => d.Ccurrcodes)
                    .HasConstraintName("SYS_C0010132");

                entity.HasOne(d => d.CdealercodeNavigation)
                    .WithMany(p => p.Swap)
                    .HasForeignKey(d => d.Cdealercode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010130");

                entity.HasOne(d => d.CfixcurrcodeNavigation)
                    .WithMany(p => p.SwapCfixcurrcodeNavigation)
                    .HasForeignKey(d => d.Cfixcurrcode)
                    .HasConstraintName("SYS_C0010133");

                entity.HasOne(d => d.CopcodeNavigation)
                    .WithMany(p => p.Swap)
                    .HasForeignKey(d => d.Copcode)
                    .HasConstraintName("SYS_C0010134");

                entity.HasOne(d => d.CpairNavigation)
                    .WithMany(p => p.Swap)
                    .HasForeignKey(d => d.Cpair)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010135");
            });

            modelBuilder.Entity<SystemEvents>(entity =>
            {
                entity.HasKey(e => e.Neventkey)
                    .HasName("SYS_C008839");

                entity.ToTable("SYSTEM_EVENTS");

                entity.Property(e => e.Neventkey)
                    .HasColumnName("NEVENTKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Cdetails1)
                    .HasColumnName("CDETAILS1")
                    .IsUnicode(false);

                entity.Property(e => e.Cdetails2)
                    .HasColumnName("CDETAILS2")
                    .IsUnicode(false);

                entity.Property(e => e.Cobjectname)
                    .HasColumnName("COBJECTNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cpcname)
                    .HasColumnName("CPCNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ddatetime)
                    .HasColumnName("DDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Neventtypekey)
                    .HasColumnName("NEVENTTYPEKEY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.NeventtypekeyNavigation)
                    .WithMany(p => p.SystemEvents)
                    .HasForeignKey(d => d.Neventtypekey)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010136");
            });

            modelBuilder.Entity<Systemmenu>(entity =>
            {
                entity.HasKey(e => e.Nmenukey)
                    .HasName("SYS_C008842");

                entity.ToTable("SYSTEMMENU");

                entity.Property(e => e.Nmenukey)
                    .HasColumnName("NMENUKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cfunctioncode)
                    .HasColumnName("CFUNCTIONCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmenuname)
                    .HasColumnName("CMENUNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nlevel)
                    .HasColumnName("NLEVEL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nparentmenukey)
                    .HasColumnName("NPARENTMENUKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsystemkey)
                    .HasColumnName("NSYSTEMKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TabLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TAB_LOG");

                entity.Property(e => e.Cerrorfield)
                    .HasColumnName("CERRORFIELD")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cerrpositionfield)
                    .HasColumnName("CERRPOSITIONFIELD")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csheme)
                    .HasColumnName("CSHEME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dlastdate)
                    .HasColumnName("DLASTDATE")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<TestCrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TEST_CRS");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Ticketprint>(entity =>
            {
                entity.HasKey(e => e.Ntprintkey);

                entity.ToTable("TICKETPRINT");

                entity.HasIndex(e => e.Cstatus)
                    .HasName("I_TICKETPRINT_2");

                entity.HasIndex(e => e.Dadddate)
                    .HasName("I_TICKETPRINT_3");

                entity.HasIndex(e => e.Ndealkey)
                    .HasName("I_TICKETPRINT_1");

                entity.Property(e => e.Ntprintkey)
                    .HasColumnName("NTPRINTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Clog)
                    .HasColumnName("CLOG")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dadddate)
                    .HasColumnName("DADDDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dprintdate)
                    .HasColumnName("DPRINTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealversion)
                    .HasColumnName("NDEALVERSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprinttype)
                    .HasColumnName("NPRINTTYPE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Tmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP");

                entity.Property(e => e.Bnetting).HasColumnName("BNETTING");

                entity.Property(e => e.Bstorno)
                    .HasColumnName("BSTORNO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Btrueflag)
                    .HasColumnName("BTRUEFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpaymtypecode)
                    .HasColumnName("CPAYMTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclcorr)
                    .HasColumnName("NCLCORR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncurrpaymkey)
                    .HasColumnName("NCURRPAYMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nremliq)
                    .HasColumnName("NREMLIQ")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nremocp)
                    .HasColumnName("NREMOCP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettcred)
                    .HasColumnName("NSETTCRED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<Tmp111>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP111");

                entity.Property(e => e.Data)
                    .HasColumnName("DATA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Reserved)
                    .HasColumnName("RESERVED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.RowCount)
                    .HasColumnName("ROW_COUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Tablename)
                    .HasColumnName("TABLENAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP2");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bautoprint).HasColumnName("BAUTOPRINT");

                entity.Property(e => e.Bdraftdeal).HasColumnName("BDRAFTDEAL");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bkeeprubpaym).HasColumnName("BKEEPRUBPAYM");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocrs).HasColumnName("BNOCRS");

                entity.Property(e => e.Bnoexchtrans).HasColumnName("BNOEXCHTRANS");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap).HasColumnName("BSWAP");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbktcurrcode)
                    .HasColumnName("CBKTCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfirmid)
                    .HasColumnName("CFIRMID")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iswaptype).HasColumnName("ISWAPTYPE");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxcount)
                    .HasColumnName("NFXCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nswapfwdday)
                    .HasColumnName("NSWAPFWDDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nswapkey)
                    .HasColumnName("NSWAPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpAivReconFedFav>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_AIV_RECON_FED_FAV");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InstrumentCode)
                    .HasColumnName("INSTRUMENT_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IsinCode)
                    .HasColumnName("ISIN_CODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmpAthenepaym>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_ATHENEPAYM");

                entity.Property(e => e.Bposition)
                    .HasColumnName("BPOSITION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cgridid)
                    .HasColumnName("CGRIDID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Imatchstatus)
                    .HasColumnName("IMATCHSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfavoritid)
                    .HasColumnName("NFAVORITID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpBondsstat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_BONDSSTAT");

                entity.HasIndex(e => new { e.Ddatefrom, e.Ddateto })
                    .HasName("I1_TMP_BONDSSTAT");

                entity.Property(e => e.Cclassif)
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddatefrom)
                    .HasColumnName("DDATEFROM")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddateto)
                    .HasColumnName("DDATETO")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navgposition)
                    .HasColumnName("NAVGPOSITION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndayscount)
                    .HasColumnName("NDAYSCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nratio)
                    .HasColumnName("NRATIO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nturnover)
                    .HasColumnName("NTURNOVER")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpForex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TMP_FOREX");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bautoprint).HasColumnName("BAUTOPRINT");

                entity.Property(e => e.Bdraftdeal).HasColumnName("BDRAFTDEAL");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocrs).HasColumnName("BNOCRS");

                entity.Property(e => e.Bnoexchtrans).HasColumnName("BNOEXCHTRANS");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap).HasColumnName("BSWAP");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfirmid)
                    .HasColumnName("CFIRMID")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iswaptype).HasColumnName("ISWAPTYPE");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxcount)
                    .HasColumnName("NFXCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nswapkey)
                    .HasColumnName("NSWAPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpForexT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_FOREX_T");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bautoprint).HasColumnName("BAUTOPRINT");

                entity.Property(e => e.Bdraftdeal).HasColumnName("BDRAFTDEAL");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocrs).HasColumnName("BNOCRS");

                entity.Property(e => e.Bnoexchtrans).HasColumnName("BNOEXCHTRANS");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap).HasColumnName("BSWAP");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfirmid)
                    .HasColumnName("CFIRMID")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iswaptype).HasColumnName("ISWAPTYPE");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxcount)
                    .HasColumnName("NFXCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nswapkey)
                    .HasColumnName("NSWAPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpMurexfavoritmapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_MUREXFAVORITMAPPING");

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Nfavoritid)
                    .HasColumnName("NFAVORITID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpNettingfx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_NETTINGFX");

                entity.HasIndex(e => new { e.Dvaluedate, e.Ccontrcode })
                    .HasName("I_TMP_NETTINGFX");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr1)
                    .HasColumnName("CCURR1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurr2)
                    .HasColumnName("CCURR2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navail)
                    .HasColumnName("NAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncanbuy)
                    .HasColumnName("NCANBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncansell)
                    .HasColumnName("NCANSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nex)
                    .HasColumnName("NEX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusedgross)
                    .HasColumnName("NUSEDGROSS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nutil)
                    .HasColumnName("NUTIL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpNorm6>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_NORM6");

                entity.HasIndex(e => new { e.Ddate, e.Corggroup })
                    .HasName("I1_TMP_NORM6");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nfulllimit)
                    .HasColumnName("NFULLLIMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npct)
                    .HasColumnName("NPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusdsum)
                    .HasColumnName("NUSDSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpNorm6coeff>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_NORM6COEFF");

                entity.Property(e => e.Bresident)
                    .HasColumnName("BRESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvalidfrom)
                    .HasColumnName("DVALIDFROM")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvalidto)
                    .HasColumnName("DVALIDTO")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncoeff)
                    .HasColumnName("NCOEFF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealtype)
                    .HasColumnName("NDEALTYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nperiodfrom)
                    .HasColumnName("NPERIODFROM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nperiodto)
                    .HasColumnName("NPERIODTO")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpNorm6detail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_NORM6DETAIL");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncoeff)
                    .HasColumnName("NCOEFF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealtype)
                    .HasColumnName("NDEALTYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norgcoeff)
                    .HasColumnName("NORGCOEFF")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("1 ");

                entity.Property(e => e.Nperiod)
                    .HasColumnName("NPERIOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusdsum)
                    .HasColumnName("NUSDSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpNorm6pot>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_NORM6POT");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Npotrisk)
                    .HasColumnName("NPOTRISK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nzam)
                    .HasColumnName("NZAM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpRemains>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_REMAINS");

                entity.HasIndex(e => new { e.Nacckey, e.Ccurrcode })
                    .HasName("UK_NACCKEY_CCURRCODEZ")
                    .IsUnique();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Newcopcode)
                    .HasColumnName("NEWCOPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Newndealkey)
                    .HasColumnName("NEWNDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Newnsum)
                    .HasColumnName("NEWNSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Oldcopcode)
                    .HasColumnName("OLDCOPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Oldndealkey)
                    .HasColumnName("OLDNDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Oldnsum)
                    .HasColumnName("OLDNSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<TmpSbsecForInsert>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_SBSEC_FOR_INSERT");

                entity.Property(e => e.Bautoprint)
                    .HasColumnName("BAUTOPRINT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.BendflagTmp).HasColumnName("BENDFLAG_TMP");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bminusport)
                    .HasColumnName("BMINUSPORT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocurrpaym)
                    .HasColumnName("BNOCURRPAYM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoreserv)
                    .HasColumnName("BNORESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cisb)
                    .HasColumnName("CISB")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Csec)
                    .HasColumnName("CSEC")
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csetlcurr)
                    .HasColumnName("CSETLCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementkey)
                    .HasColumnName("CSETTLEMENTKEY")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Csettplacekey)
                    .HasColumnName("CSETTPLACEKEY")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradeplacekey)
                    .HasColumnName("CTRADEPLACEKEY")
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Ctranshkey1)
                    .HasColumnName("CTRANSHKEY1")
                    .IsUnicode(false);

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrfulldate)
                    .HasColumnName("DCONTRFULLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokerkey)
                    .HasColumnName("NBROKERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncounteracc)
                    .HasColumnName("NCOUNTERACC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullamount)
                    .HasColumnName("NFULLAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarkup)
                    .HasColumnName("NMARKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsbseckey)
                    .HasColumnName("NSBSECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettlementkey)
                    .HasColumnName("NSETTLEMENTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettplacekey)
                    .HasColumnName("NSETTPLACEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumput)
                    .HasColumnName("NSUMPUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradeplacekey)
                    .HasColumnName("NTRADEPLACEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpSbsecSummitstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_SBSEC_SUMMITSTATUS");

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpSummitdeal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_SUMMITDEAL");

                entity.Property(e => e.Cdealstatus)
                    .HasColumnName("CDEALSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cexportstatus)
                    .HasColumnName("CEXPORTSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Creference)
                    .HasColumnName("CREFERENCE")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ddealdate)
                    .HasColumnName("DDEALDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreviouskey)
                    .HasColumnName("NPREVIOUSKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpSummitdealLast>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_SUMMITDEAL_LAST");

                entity.Property(e => e.Cdealstatus)
                    .HasColumnName("CDEALSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cexportstatus)
                    .HasColumnName("CEXPORTSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Creference)
                    .HasColumnName("CREFERENCE")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ddealdate)
                    .HasColumnName("DDEALDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreviouskey)
                    .HasColumnName("NPREVIOUSKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_TEST");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Ccorrcode)
                    .HasColumnName("CCORRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpVtmDeporeport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_VTM_DEPOREPORT");

                entity.Property(e => e.Bathenaexported)
                    .HasColumnName("BATHENAEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bisbank)
                    .HasColumnName("BISBANK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Blong)
                    .HasColumnName("BLONG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting2)
                    .HasColumnName("BNETTING2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoresident)
                    .HasColumnName("BNORESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Boncall)
                    .HasColumnName("BONCALL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepogt)
                    .HasColumnName("CDEPOGT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiffrnd)
                    .HasColumnName("CDIFFRND")
                    .HasColumnType("CHAR(40)");

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Clongref)
                    .HasColumnName("CLONGREF")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Crate)
                    .HasColumnName("CRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Crptcurr)
                    .HasColumnName("CRPTCURR")
                    .IsUnicode(false);

                entity.Property(e => e.Csalescredit)
                    .HasColumnName("CSALESCREDIT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csalesperson)
                    .HasColumnName("CSALESPERSON")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cvtmgroup)
                    .HasColumnName("CVTMGROUP")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibase)
                    .HasColumnName("IBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccountmanagerid)
                    .HasColumnName("NACCOUNTMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncountryid)
                    .HasColumnName("NCOUNTRYID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndiffrnd)
                    .HasColumnName("NDIFFRND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ningcode)
                    .HasColumnName("NINGCODE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterest)
                    .HasColumnName("NINTEREST")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalesmanagerid)
                    .HasColumnName("NSALESMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsegmentationid)
                    .HasColumnName("NSEGMENTATIONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumconv)
                    .HasColumnName("NSUMCONV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvtm)
                    .HasColumnName("NVTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpVtmFxreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_VTM_FXREPORT");

                entity.Property(e => e.Bathenaexported)
                    .HasColumnName("BATHENAEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bisbank)
                    .HasColumnName("BISBANK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoresident)
                    .HasColumnName("BNORESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiffrnd)
                    .HasColumnName("CDIFFRND")
                    .HasColumnType("CHAR(40)");

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Crptcurr)
                    .HasColumnName("CRPTCURR")
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csalesperson)
                    .HasColumnName("CSALESPERSON")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasColumnType("CHAR(18)");

                entity.Property(e => e.Cvtmgroup)
                    .HasColumnName("CVTMGROUP")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccountmanagerid)
                    .HasColumnName("NACCOUNTMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncountryid)
                    .HasColumnName("NCOUNTRYID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndiffrnd)
                    .HasColumnName("NDIFFRND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ningcode)
                    .HasColumnName("NINGCODE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalesmanagerid)
                    .HasColumnName("NSALESMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsegmentationid)
                    .HasColumnName("NSEGMENTATIONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumconv)
                    .HasColumnName("NSUMCONV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nvtm)
                    .HasColumnName("NVTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpVtmRecon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_VTM_RECON");

                entity.Property(e => e.Cdiffreason)
                    .HasColumnName("CDIFFREASON")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiffrnd)
                    .HasColumnName("CDIFFRND")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Idifftype).HasColumnName("IDIFFTYPE");

                entity.Property(e => e.Natheneclassified)
                    .HasColumnName("NATHENECLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndiffrnd)
                    .HasColumnName("NDIFFRND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposkeeperid)
                    .HasColumnName("NPOSKEEPERID")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<TmpVtmSbsecreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_VTM_SBSECREPORT");

                entity.Property(e => e.Bisbank)
                    .HasColumnName("BISBANK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bminusport)
                    .HasColumnName("BMINUSPORT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocurrpaym)
                    .HasColumnName("BNOCURRPAYM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoreserv)
                    .HasColumnName("BNORESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoresident)
                    .HasColumnName("BNORESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiffrnd)
                    .HasColumnName("CDIFFRND")
                    .HasColumnType("CHAR(40)");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Crptcurr)
                    .HasColumnName("CRPTCURR")
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csalesperson)
                    .HasColumnName("CSALESPERSON")
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cvtmgroup)
                    .HasColumnName("CVTMGROUP")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccountmanagerid)
                    .HasColumnName("NACCOUNTMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ncountryid)
                    .HasColumnName("NCOUNTRYID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndiffrnd)
                    .HasColumnName("NDIFFRND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ningcode)
                    .HasColumnName("NINGCODE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER(11,7)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalesmanagerid)
                    .HasColumnName("NSALESMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsegmentationid)
                    .HasColumnName("NSEGMENTATIONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumconv)
                    .HasColumnName("NSUMCONV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumput)
                    .HasColumnName("NSUMPUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvtm)
                    .HasColumnName("NVTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Tmpirrdata>(entity =>
            {
                entity.HasKey(e => new { e.Ntranshkey, e.Ddate })
                    .HasName("SYS_C008869");

                entity.ToTable("TMPIRRDATA");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbuyavgprice)
                    .HasColumnName("NBUYAVGPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndur)
                    .HasColumnName("NDUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfulldur)
                    .HasColumnName("NFULLDUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullirr)
                    .HasColumnName("NFULLIRR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullytm)
                    .HasColumnName("NFULLYTM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nirr)
                    .HasColumnName("NIRR")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Tmpirrdata2>(entity =>
            {
                entity.HasKey(e => new { e.Ntranshkey, e.Ddate })
                    .HasName("SYS_C008872");

                entity.ToTable("TMPIRRDATA2");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndkdur)
                    .HasColumnName("NDKDUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndkmdur)
                    .HasColumnName("NDKMDUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndkpvbp)
                    .HasColumnName("NDKPVBP")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Tmpsbsec>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008893");

                entity.ToTable("TMPSBSEC");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Tradeplaceprint>(entity =>
            {
                entity.HasKey(e => e.Ctradeplacename);

                entity.ToTable("TRADEPLACEPRINT");

                entity.Property(e => e.Ctradeplacename)
                    .HasColumnName("CTRADEPLACENAME")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Bautoprint).HasColumnName("BAUTOPRINT");

                entity.Property(e => e.Bautoprintint).HasColumnName("BAUTOPRINTINT");
            });

            modelBuilder.Entity<Trans>(entity =>
            {
                entity.HasKey(e => e.Ndealkey)
                    .HasName("SYS_C008960");

                entity.ToTable("TRANS");

                entity.HasIndex(e => e.Cbookcode)
                    .HasName("XIF184TRANS");

                entity.HasIndex(e => e.Ccodefrom)
                    .HasName("XIF182TRANS");

                entity.HasIndex(e => e.Ccodeto)
                    .HasName("XIF183TRANS");

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("XIF187TRANS");

                entity.HasIndex(e => e.Copcode)
                    .HasName("XIF185TRANS");

                entity.HasIndex(e => e.Dregdate)
                    .HasName("XIE1TRANS");

                entity.HasIndex(e => e.Dvaluedate)
                    .HasName("XIE2TRANS");

                entity.HasIndex(e => e.Nlogreckey)
                    .HasName("XIF254TRANS");

                entity.HasIndex(e => e.Nsourcekey)
                    .HasName("XIF186TRANS");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bsendntfy)
                    .HasColumnName("BSENDNTFY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Burgentpayment)
                    .HasColumnName("BURGENTPAYMENT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccodefrom)
                    .HasColumnName("CCODEFROM")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccodeto)
                    .HasColumnName("CCODETO")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmail)
                    .HasColumnName("CMAIL")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpaympurpose)
                    .HasColumnName("CPAYMPURPOSE")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .HasDefaultValueSql(@"sysdate
");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dsenddate)
                    .HasColumnName("DSENDDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckeyfrom)
                    .HasColumnName("NACCKEYFROM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckeyto)
                    .HasColumnName("NACCKEYTO")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninc)
                    .HasColumnName("NINC")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsendathene)
                    .HasColumnName("NSENDATHENE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.CbookcodeNavigation)
                    .WithMany(p => p.Trans)
                    .HasForeignKey(d => d.Cbookcode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010142");

                entity.HasOne(d => d.CcurrcodeNavigation)
                    .WithMany(p => p.Trans)
                    .HasForeignKey(d => d.Ccurrcode)
                    .HasConstraintName("SYS_C0010145");

                entity.HasOne(d => d.CopcodeNavigation)
                    .WithMany(p => p.Trans)
                    .HasForeignKey(d => d.Copcode)
                    .HasConstraintName("SYS_C0010143");

                entity.HasOne(d => d.NlogreckeyNavigation)
                    .WithMany(p => p.Trans)
                    .HasForeignKey(d => d.Nlogreckey)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("SYS_C0010144");
            });

            modelBuilder.Entity<Transhes>(entity =>
            {
                entity.HasKey(e => e.Ntranshkey)
                    .HasName("SYS_C0010420");

                entity.ToTable("TRANSHES");

                entity.HasIndex(e => e.Cclassif)
                    .HasName("XIE1TRANSHES")
                    .IsUnique();

                entity.HasIndex(e => e.Ccurrcode)
                    .HasName("I1_TRANSHES");

                entity.HasIndex(e => e.Cseccode)
                    .HasName("XIF51TRANSHES");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bcorp)
                    .HasColumnName("BCORP")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bhand)
                    .HasColumnName("BHAND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binclirr)
                    .HasColumnName("BINCLIRR")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Bvar)
                    .HasColumnName("BVAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Choldclassif)
                    .HasColumnName("CHOLDCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuecode)
                    .HasColumnName("CISSUECODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicextrcode)
                    .HasColumnName("CMICEXTRCODE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cregnumber)
                    .HasColumnName("CREGNUMBER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dafterdate)
                    .HasColumnName("DAFTERDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dfirsttradedate)
                    .HasColumnName("DFIRSTTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icouponyear)
                    .HasColumnName("ICOUPONYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Irestypenumber)
                    .HasColumnName("IRESTYPENUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Nissuevolume)
                    .HasColumnName("NISSUEVOLUME")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsecnom)
                    .HasColumnName("NSECNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsecnombase)
                    .HasColumnName("NSECNOMBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsinkfactor)
                    .HasColumnName("NSINKFACTOR")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Nspecprice)
                    .HasColumnName("NSPECPRICE")
                    .HasColumnType("NUMBER");

                entity.HasOne(d => d.CseccodeNavigation)
                    .WithMany(p => p.Transhes)
                    .HasForeignKey(d => d.Cseccode)
                    .HasConstraintName("SYS_C0010421");
            });

            modelBuilder.Entity<Transhes2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRANSHES2");

                entity.Property(e => e.Bcorp)
                    .HasColumnName("BCORP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bhand)
                    .HasColumnName("BHAND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binclirr)
                    .HasColumnName("BINCLIRR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bvar)
                    .HasColumnName("BVAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cclassif)
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Choldclassif)
                    .HasColumnName("CHOLDCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicextrcode)
                    .HasColumnName("CMICEXTRCODE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dafterdate)
                    .HasColumnName("DAFTERDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dfirsttradedate)
                    .HasColumnName("DFIRSTTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icouponyear)
                    .HasColumnName("ICOUPONYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Irestypenumber)
                    .HasColumnName("IRESTYPENUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Nissuevolume)
                    .HasColumnName("NISSUEVOLUME")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsecnom)
                    .HasColumnName("NSECNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nspecprice)
                    .HasColumnName("NSPECPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsynkfactor)
                    .HasColumnName("NSYNKFACTOR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Tries>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRIES");

                entity.HasIndex(e => e.Nuserkey)
                    .HasName("SYS_C008970")
                    .IsUnique();

                entity.Property(e => e.Itrycount)
                    .HasColumnName("ITRYCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Uniqcounters>(entity =>
            {
                entity.HasKey(e => e.Copcode)
                    .HasName("SYS_C008972");

                entity.ToTable("UNIQCOUNTERS");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nlastnumber)
                    .HasColumnName("NLASTNUMBER")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Usedpasswords>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USEDPASSWORDS");

                entity.Property(e => e.Cpasswd)
                    .HasColumnName("CPASSWD")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Denddate)
                    .HasColumnName("DENDDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Userprofiles>(entity =>
            {
                entity.HasKey(e => new { e.Nuserkey, e.Nsystemkey, e.Nprofilekey, e.Nrolekey })
                    .HasName("SYS_C008977");

                entity.ToTable("USERPROFILES");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsystemkey)
                    .HasColumnName("NSYSTEMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprofilekey)
                    .HasColumnName("NPROFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrolekey)
                    .HasColumnName("NROLEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bmandatory)
                    .HasColumnName("BMANDATORY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.Nuserkey)
                    .HasName("SYS_C008981");

                entity.ToTable("USERS");

                entity.HasIndex(e => e.Cusername)
                    .HasName("XAK1USERS")
                    .IsUnique();

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ballowpasslogin)
                    .HasColumnName("BALLOWPASSLOGIN")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Bfirstlogin)
                    .HasColumnName("BFIRSTLOGIN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bgroup)
                    .HasColumnName("BGROUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bidentbyad).HasColumnName("BIDENTBYAD");

                entity.Property(e => e.Bmandatory)
                    .HasColumnName("BMANDATORY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cphoneforsms)
                    .HasColumnName("CPHONEFORSMS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Dpasswchangedate)
                    .HasColumnName("DPASSWCHANGEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Itryescount)
                    .HasColumnName("ITRYESCOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusergroupkey)
                    .HasColumnName("NUSERGROUPKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VAccessrights>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ACCESSRIGHTS");

                entity.Property(e => e.Caccrightcode)
                    .HasColumnName("CACCRIGHTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Caccrightname)
                    .HasColumnName("CACCRIGHTNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Naccrightkey)
                    .HasColumnName("NACCRIGHTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrighttypekey)
                    .HasColumnName("NRIGHTTYPEKEY")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Owner)
                    .HasColumnName("OWNER")
                    .HasColumnType("CHAR(9)");
            });

            modelBuilder.Entity<VAccessrules>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ACCESSRULES");

                entity.Property(e => e.Baddtosystem)
                    .HasColumnName("BADDTOSYSTEM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccrightkey)
                    .HasColumnName("NACCRIGHTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmenukey)
                    .HasColumnName("NMENUKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrolekey)
                    .HasColumnName("NROLEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Owner)
                    .HasColumnName("OWNER")
                    .HasColumnType("CHAR(9)");
            });

            modelBuilder.Entity<VActpass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ACTPASS");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtoddate)
                    .HasColumnName("DTODDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nclients)
                    .HasColumnName("NCLIENTS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexporur)
                    .HasColumnName("NEXPORUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexpousd)
                    .HasColumnName("NEXPOUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxact)
                    .HasColumnName("NFXACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxaday)
                    .HasColumnName("NFXADAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxpass)
                    .HasColumnName("NFXPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxpday)
                    .HasColumnName("NFXPDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxpos)
                    .HasColumnName("NFXPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterbankact)
                    .HasColumnName("NINTERBANKACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterbankpass)
                    .HasColumnName("NINTERBANKPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nintercompact)
                    .HasColumnName("NINTERCOMPACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nintercomppass)
                    .HasColumnName("NINTERCOMPPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmicex)
                    .HasColumnName("NMICEX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nopennostro)
                    .HasColumnName("NOPENNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Noperu)
                    .HasColumnName("NOPERU")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrurnostro)
                    .HasColumnName("NRURNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nwofx)
                    .HasColumnName("NWOFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nworfx)
                    .HasColumnName("NWORFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nworst)
                    .HasColumnName("NWORST")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VActpass2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ACTPASS2");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtoddate)
                    .HasColumnName("DTODDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nclients)
                    .HasColumnName("NCLIENTS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxact)
                    .HasColumnName("NFXACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxaday)
                    .HasColumnName("NFXADAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxpass)
                    .HasColumnName("NFXPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxpday)
                    .HasColumnName("NFXPDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxpos)
                    .HasColumnName("NFXPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterbankact)
                    .HasColumnName("NINTERBANKACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterbankpass)
                    .HasColumnName("NINTERBANKPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nintercompact)
                    .HasColumnName("NINTERCOMPACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nintercomppass)
                    .HasColumnName("NINTERCOMPPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmicex)
                    .HasColumnName("NMICEX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nopennostro)
                    .HasColumnName("NOPENNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Noperu)
                    .HasColumnName("NOPERU")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrurnostro)
                    .HasColumnName("NRURNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nworfx)
                    .HasColumnName("NWORFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nworst)
                    .HasColumnName("NWORST")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VAdddepodata>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ADDDEPODATA");

                entity.Property(e => e.Cacc1)
                    .HasColumnName("CACC1")
                    .IsUnicode(false);

                entity.Property(e => e.Cacc2)
                    .HasColumnName("CACC2")
                    .IsUnicode(false);

                entity.Property(e => e.Cathenabookcode)
                    .HasColumnName("CATHENABOOKCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Catlascounter)
                    .HasColumnName("CATLASCOUNTER")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientorgname)
                    .HasColumnName("CCLIENTORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cinternalpair)
                    .HasColumnName("CINTERNALPAIR")
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Csalespersonid)
                    .HasColumnName("CSALESPERSONID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VAddrepodata>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ADDREPODATA");

                entity.Property(e => e.Cathenabookcode)
                    .HasColumnName("CATHENABOOKCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftbook)
                    .HasColumnName("CDIASOFTBOOK")
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftcounter)
                    .HasColumnName("CDIASOFTCOUNTER")
                    .IsUnicode(false);

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VAthenematchDifftypeFx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ATHENEMATCH_DIFFTYPE_FX");

                entity.Property(e => e.Contrdate)
                    .HasColumnName("CONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Difftype)
                    .HasColumnName("DIFFTYPE")
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.Difftype2)
                    .HasColumnName("DIFFTYPE2")
                    .HasMaxLength(135)
                    .IsUnicode(false);

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VAthenematchDifftypeMm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ATHENEMATCH_DIFFTYPE_MM");

                entity.Property(e => e.Contrdate)
                    .HasColumnName("CONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Difftype)
                    .HasColumnName("DIFFTYPE")
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.Difftype2)
                    .HasColumnName("DIFFTYPE2")
                    .HasMaxLength(98)
                    .IsUnicode(false);

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VAthenematchFx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ATHENEMATCH_FX");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cndftype)
                    .HasColumnName("CNDFTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Difftype)
                    .HasColumnName("DIFFTYPE")
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.Difftype2)
                    .HasColumnName("DIFFTYPE2")
                    .HasMaxLength(135)
                    .IsUnicode(false);

                entity.Property(e => e.Dmodifdate)
                    .HasColumnName("DMODIFDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iathenepsk)
                    .HasColumnName("IATHENEPSK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VAthenematchMm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ATHENEMATCH_MM");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Difftype)
                    .HasColumnName("DIFFTYPE")
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.Difftype2)
                    .HasColumnName("DIFFTYPE2")
                    .HasMaxLength(98)
                    .IsUnicode(false);

                entity.Property(e => e.Dmodifdate)
                    .HasColumnName("DMODIFDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iathenepsk)
                    .HasColumnName("IATHENEPSK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nint)
                    .HasColumnName("NINT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VAthenematchNdfc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ATHENEMATCH_NDFC");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cndftype)
                    .HasColumnName("CNDFTYPE")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmodifdate)
                    .HasColumnName("DMODIFDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iathenepsk)
                    .HasColumnName("IATHENEPSK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VAthenematchpaymAthena>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ATHENEMATCHPAYM_ATHENA");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cgridid)
                    .HasColumnName("CGRIDID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("CHAR(20)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VAthenematchpaymFavorit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ATHENEMATCHPAYM_FAVORIT");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cgridid)
                    .HasColumnName("CGRIDID")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("CHAR(19)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nclassifid)
                    .HasColumnName("NCLASSIFID")
                    .IsUnicode(false);

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VAthenematchpaymMatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ATHENEMATCHPAYM_MATCH");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cgridid)
                    .HasColumnName("CGRIDID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VAthenematchpaymUnmatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ATHENEMATCHPAYM_UNMATCH");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.CgridFav)
                    .HasColumnName("CGRID_FAV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cgridid)
                    .HasColumnName("CGRIDID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Diff)
                    .HasColumnName("DIFF")
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.NsumFav)
                    .HasColumnName("NSUM_FAV")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VBalanceforocp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BALANCEFOROCP");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nballance)
                    .HasColumnName("NBALLANCE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VBankballance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BANKBALLANCE");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr)
                    .HasColumnName("CCURR")
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncash)
                    .HasColumnName("NCASH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclientrem)
                    .HasColumnName("NCLIENTREM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettlrem)
                    .HasColumnName("NSETTLREM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nspotrem)
                    .HasColumnName("NSPOTREM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsysrem)
                    .HasColumnName("NSYSREM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntomrem)
                    .HasColumnName("NTOMREM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VBondcoupons>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BONDCOUPONS");

                entity.Property(e => e.Cclassif)
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcoupondate)
                    .HasColumnName("DCOUPONDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Igroup)
                    .HasColumnName("IGROUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nkupport)
                    .HasColumnName("NKUPPORT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nkupsum)
                    .HasColumnName("NKUPSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nport)
                    .HasColumnName("NPORT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsecnom)
                    .HasColumnName("NSECNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VBookdeals>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BOOKDEALS");

                entity.Property(e => e.Cathenabookcode)
                    .HasColumnName("CATHENABOOKCODE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VCashatm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CASHATM");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap).HasColumnName("BSWAP");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumrurb)
                    .HasColumnName("NSUMRURB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumrurs)
                    .HasColumnName("NSUMRURS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumusdb)
                    .HasColumnName("NSUMUSDB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumusds)
                    .HasColumnName("NSUMUSDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VCbrfRates>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CBRF_RATES");

                entity.Property(e => e.Cnyrub)
                    .HasColumnName("CNYRUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Eurrub)
                    .HasColumnName("EURRUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Gbprub)
                    .HasColumnName("GBPRUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Usdrub)
                    .HasColumnName("USDRUB")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VClientpl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CLIENTPL");

                entity.Property(e => e.Ccontrcode)
                    .IsRequired()
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Fxd)
                    .HasColumnName("FXD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxm)
                    .HasColumnName("FXM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxw)
                    .HasColumnName("FXW")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fxy)
                    .HasColumnName("FXY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mmd)
                    .HasColumnName("MMD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mmm)
                    .HasColumnName("MMM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mmw)
                    .HasColumnName("MMW")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mmy)
                    .HasColumnName("MMY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VClosebonds>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CLOSEBONDS");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumberbuy)
                    .HasColumnName("CDEALNUMBERBUY")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumbersell)
                    .HasColumnName("CDEALNUMBERSELL")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Crefbuy)
                    .HasColumnName("CREFBUY")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Crefsell)
                    .HasColumnName("CREFSELL")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdatesell)
                    .HasColumnName("DCONTRDATESELL")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydatebuy)
                    .HasColumnName("DDELIVERYDATEBUY")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydatesell)
                    .HasColumnName("DDELIVERYDATESELL")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navgrate)
                    .HasColumnName("NAVGRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuydealkey)
                    .HasColumnName("NBUYDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryield)
                    .HasColumnName("NCURYIELD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricebuy)
                    .HasColumnName("NPRICEBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricesell)
                    .HasColumnName("NPRICESELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselldealkey)
                    .HasColumnName("NSELLDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumbuy)
                    .HasColumnName("NSUMBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumfullbuy)
                    .HasColumnName("NSUMFULLBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumfullsell)
                    .HasColumnName("NSUMFULLSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumsell)
                    .HasColumnName("NSUMSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VClosebonds2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CLOSEBONDS2");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumberbuy)
                    .HasColumnName("CDEALNUMBERBUY")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumbersell)
                    .HasColumnName("CDEALNUMBERSELL")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Crefbuy)
                    .HasColumnName("CREFBUY")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Crefsell)
                    .HasColumnName("CREFSELL")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdatesell)
                    .HasColumnName("DCONTRDATESELL")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydatebuy)
                    .HasColumnName("DDELIVERYDATEBUY")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydatesell)
                    .HasColumnName("DDELIVERYDATESELL")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navgrate)
                    .HasColumnName("NAVGRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuydealkey)
                    .HasColumnName("NBUYDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryield)
                    .HasColumnName("NCURYIELD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricebuy)
                    .HasColumnName("NPRICEBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricesell)
                    .HasColumnName("NPRICESELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselldealkey)
                    .HasColumnName("NSELLDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumbuy)
                    .HasColumnName("NSUMBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumfullbuy)
                    .HasColumnName("NSUMFULLBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumfullsell)
                    .HasColumnName("NSUMFULLSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumsell)
                    .HasColumnName("NSUMSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VClosedequitiesGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CLOSEDEQUITIES_GROUP");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrency)
                    .HasColumnName("CTRADECURRENCY")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nunrelpl)
                    .HasColumnName("NUNRELPL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VClosedequitiesGroup1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CLOSEDEQUITIES_GROUP1");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrency)
                    .HasColumnName("CTRADECURRENCY")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Deqsettdate)
                    .HasColumnName("DEQSETTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nunrelpl)
                    .HasColumnName("NUNRELPL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VCounterlimShort>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_COUNTERLIM_SHORT");

                entity.Property(e => e.Corgcode)
                    .IsRequired()
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nlendavail)
                    .HasColumnName("NLENDAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlendlim)
                    .HasColumnName("NLENDLIM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlendutil)
                    .HasColumnName("NLENDUTIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreavail)
                    .HasColumnName("NPREAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreavailbd)
                    .HasColumnName("NPREAVAILBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreavailfx)
                    .HasColumnName("NPREAVAILFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprelim)
                    .HasColumnName("NPRELIM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprelimbd)
                    .HasColumnName("NPRELIMBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprelimfx)
                    .HasColumnName("NPRELIMFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreutil)
                    .HasColumnName("NPREUTIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreutilbd)
                    .HasColumnName("NPREUTILBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreutilfx)
                    .HasColumnName("NPREUTILFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselllim)
                    .HasColumnName("NSELLLIM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselllimbd)
                    .HasColumnName("NSELLLIMBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselllimfx)
                    .HasColumnName("NSELLLIMFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsellutil)
                    .HasColumnName("NSELLUTIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsellutilbd)
                    .HasColumnName("NSELLUTILBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsellutilfx)
                    .HasColumnName("NSELLUTILFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettavail)
                    .HasColumnName("NSETTAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettavailbd)
                    .HasColumnName("NSETTAVAILBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettavailfx)
                    .HasColumnName("NSETTAVAILFX")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VCounterlimShort1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_COUNTERLIM_SHORT1");

                entity.Property(e => e.Corgcode)
                    .IsRequired()
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nlendavail)
                    .HasColumnName("NLENDAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlendlim)
                    .HasColumnName("NLENDLIM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlendutil)
                    .HasColumnName("NLENDUTIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreavail)
                    .HasColumnName("NPREAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreavailbd)
                    .HasColumnName("NPREAVAILBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreavailfx)
                    .HasColumnName("NPREAVAILFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprelim)
                    .HasColumnName("NPRELIM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprelimbd)
                    .HasColumnName("NPRELIMBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprelimfx)
                    .HasColumnName("NPRELIMFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreutil)
                    .HasColumnName("NPREUTIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreutilbd)
                    .HasColumnName("NPREUTILBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreutilfx)
                    .HasColumnName("NPREUTILFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselllim)
                    .HasColumnName("NSELLLIM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselllimbd)
                    .HasColumnName("NSELLLIMBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselllimfx)
                    .HasColumnName("NSELLLIMFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsellutil)
                    .HasColumnName("NSELLUTIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsellutilbd)
                    .HasColumnName("NSELLUTILBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsellutilfx)
                    .HasColumnName("NSELLUTILFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettavail)
                    .HasColumnName("NSETTAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettavailbd)
                    .HasColumnName("NSETTAVAILBD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettavailfx)
                    .HasColumnName("NSETTAVAILFX")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VCounterlimcom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_COUNTERLIMCOM");

                entity.Property(e => e.Ccrossgroupcode)
                    .HasColumnName("CCROSSGROUPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csubperiodcode)
                    .HasColumnName("CSUBPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navaillim)
                    .HasColumnName("NAVAILLIM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncommonlimit)
                    .HasColumnName("NCOMMONLIMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nutillim)
                    .HasColumnName("NUTILLIM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VCouponmatrix>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_COUPONMATRIX");

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcoupondate)
                    .HasColumnName("DCOUPONDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dperiodstart)
                    .HasColumnName("DPERIODSTART")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncouponcorr)
                    .HasColumnName("NCOUPONCORR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncouponrate)
                    .HasColumnName("NCOUPONRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nkupsum)
                    .HasColumnName("NKUPSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nkupvalue)
                    .HasColumnName("NKUPVALUE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VCsrvfunding>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CSRVFUNDING");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.N812bal)
                    .HasColumnName("N812BAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclientbal)
                    .HasColumnName("NCLIENTBAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepocsrv)
                    .HasColumnName("NDEPOCSRV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndiff)
                    .HasColumnName("NDIFF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfree)
                    .HasColumnName("NFREE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninrfund)
                    .HasColumnName("NINRFUND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninrfundrur)
                    .HasColumnName("NINRFUNDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninrpos)
                    .HasColumnName("NINRPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninrrate)
                    .HasColumnName("NINRRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmicex)
                    .HasColumnName("NMICEX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nres)
                    .HasColumnName("NRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrur23fund)
                    .HasColumnName("NRUR23FUND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrurbfund)
                    .HasColumnName("NRURBFUND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsbal)
                    .HasColumnName("NSBAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusdbfund)
                    .HasColumnName("NUSDBFUND")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VCurrentfxexp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CURRENTFXEXP");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nexp)
                    .HasColumnName("NEXP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfx)
                    .HasColumnName("NFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntot)
                    .HasColumnName("NTOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntraderesult)
                    .HasColumnName("NTRADERESULT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VCurrpaym>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CURRPAYM");

                entity.Property(e => e.Bnetting).HasColumnName("BNETTING");

                entity.Property(e => e.Bpos)
                    .HasColumnName("BPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bstorno)
                    .HasColumnName("BSTORNO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Btrueflag)
                    .HasColumnName("BTRUEFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccounter)
                    .HasColumnName("CCOUNTER")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpaymtypecode)
                    .HasColumnName("CPAYMTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ddealdatetime)
                    .HasColumnName("DDEALDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclcorr)
                    .HasColumnName("NCLCORR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncurrpaymkey)
                    .HasColumnName("NCURRPAYMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposorder)
                    .HasColumnName("NPOSORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nremliq)
                    .HasColumnName("NREMLIQ")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nremocp)
                    .HasColumnName("NREMOCP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettcred)
                    .HasColumnName("NSETTCRED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VCurrpos03>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CURRPOS03");

                entity.Property(e => e.Bpos)
                    .HasColumnName("BPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ddealdatetime)
                    .HasColumnName("DDEALDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VCurrpos1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CURRPOS");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ddealdatetime)
                    .HasColumnName("DDEALDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VCurrpos2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CURRPOS2");

                entity.Property(e => e.Ccontrcode1)
                    .HasColumnName("CCONTRCODE1")
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode2)
                    .HasColumnName("CCONTRCODE2")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber1)
                    .HasColumnName("CDEALNUMBER1")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber2)
                    .HasColumnName("CDEALNUMBER2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket1)
                    .HasColumnName("CTICKET1")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket2)
                    .HasColumnName("CTICKET2")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate1)
                    .HasColumnName("DVALUEDATE1")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder1)
                    .HasColumnName("IORDER1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iorder2)
                    .HasColumnName("IORDER2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey1)
                    .HasColumnName("NACCKEY1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey2)
                    .HasColumnName("NACCKEY2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey1)
                    .HasColumnName("NDEALKEY1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey2)
                    .HasColumnName("NDEALKEY2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VDaylyportb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DAYLYPORTB");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nfullsumbuy)
                    .HasColumnName("NFULLSUMBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsumsell)
                    .HasColumnName("NFULLSUMSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumbuy)
                    .HasColumnName("NSUMBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkupbuy)
                    .HasColumnName("NSUMKUPBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkupsell)
                    .HasColumnName("NSUMKUPSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnombuy)
                    .HasColumnName("NSUMNOMBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnomsell)
                    .HasColumnName("NSUMNOMSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumsell)
                    .HasColumnName("NSUMSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VDaylyportb2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DAYLYPORTB2");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nfullsumbuy)
                    .HasColumnName("NFULLSUMBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsumsell)
                    .HasColumnName("NFULLSUMSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricebuy)
                    .HasColumnName("NPRICEBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricesell)
                    .HasColumnName("NPRICESELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumbuy)
                    .HasColumnName("NSUMBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkupbuy)
                    .HasColumnName("NSUMKUPBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkupsell)
                    .HasColumnName("NSUMKUPSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnombuy)
                    .HasColumnName("NSUMNOMBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnomsell)
                    .HasColumnName("NSUMNOMSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumsell)
                    .HasColumnName("NSUMSELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VDealerocpx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DEALEROCPX");

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VDealerocpx2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DEALEROCPX2");

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealrate)
                    .HasColumnName("NDEALRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VDepoutil>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DEPOUTIL");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navail)
                    .HasColumnName("NAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nex)
                    .HasColumnName("NEX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfull)
                    .HasColumnName("NFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nutil)
                    .HasColumnName("NUTIL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VDepoutil2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DEPOUTIL2");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VDiasoftXeqdeals>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DIASOFT_XEQDEALS");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bcpclient)
                    .HasColumnName("BCPCLIENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .IsUnicode(false);

                entity.Property(e => e.Cagreementdate)
                    .HasColumnName("CAGREEMENTDATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccashsettldate)
                    .HasColumnName("CCASHSETTLDATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccoderashcetov)
                    .HasColumnName("CCODERASHCETOV")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ccpclient)
                    .HasColumnName("CCPCLIENT")
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ceqsettldate)
                    .HasColumnName("CEQSETTLDATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csb)
                    .HasColumnName("CSB")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Csecondref)
                    .HasColumnName("CSECONDREF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csettlmenttype)
                    .HasColumnName("CSETTLMENTTYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ctradedate1)
                    .HasColumnName("CTRADEDATE1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME_")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedatetime)
                    .HasColumnName("DTRADEDATETIME")
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclientingcode)
                    .HasColumnName("NCLIENTINGCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Ncommission)
                    .HasColumnName("NCOMMISSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncounteringcode)
                    .HasColumnName("NCOUNTERINGCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nisocode)
                    .HasColumnName("NISOCODE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nisocode2)
                    .HasColumnName("NISOCODE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nisocode3)
                    .HasColumnName("NISOCODE3")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nomerzayavki2)
                    .HasColumnName("NOMERZAYAVKI2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradeprice)
                    .HasColumnName("NTRADEPRICE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VDiasoftXeqdealsInternal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DIASOFT_XEQDEALS_INTERNAL");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cfidessaid)
                    .HasColumnName("CFIDESSAID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtickettime)
                    .HasColumnName("DTICKETTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfidessaversion)
                    .HasColumnName("NFIDESSAVERSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntotalamount)
                    .HasColumnName("NTOTALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Nversion)
                    .HasColumnName("NVERSION")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VDpldepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DPLDEPO");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Blfmm)
                    .HasColumnName("BLFMM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Boncall)
                    .HasColumnName("BONCALL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cintcounter)
                    .HasColumnName("CINTCOUNTER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrate)
                    .HasColumnName("NCBRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndpl)
                    .HasColumnName("NDPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplrur)
                    .HasColumnName("NDPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplusd)
                    .HasColumnName("NDPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nint)
                    .HasColumnName("NINT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VEqIntfx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EQ_INTFX");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VEqIsDeals>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EQ_IS_DEALS");

                entity.Property(e => e.Bismaxdeals).HasColumnName("BISMAXDEALS");

                entity.Property(e => e.Bismaxorders).HasColumnName("BISMAXORDERS");

                entity.Property(e => e.Cclient)
                    .HasColumnName("CCLIENT")
                    .IsUnicode(false);

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbrokdealscount)
                    .HasColumnName("NBROKDEALSCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokorderscount)
                    .HasColumnName("NBROKORDERSCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nowndealscount)
                    .HasColumnName("NOWNDEALSCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nownorderscount)
                    .HasColumnName("NOWNORDERSCOUNT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VEqIsDealsTab>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V_EQ_IS_DEALS_TAB");

                entity.HasIndex(e => e.Dtradedate)
                    .HasName("I1_V_EQ_IS_DEALS_TAB");

                entity.Property(e => e.Bisactual).HasColumnName("BISACTUAL");

                entity.Property(e => e.Bismaxdeals)
                    .HasColumnName("BISMAXDEALS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Bismaxorders)
                    .HasColumnName("BISMAXORDERS")
                    .HasDefaultValueSql(@"0
");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Cclient)
                    .HasColumnName("CCLIENT")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Drefreshdate)
                    .HasColumnName("DREFRESHDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbrokdealscount)
                    .HasColumnName("NBROKDEALSCOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Nbrokorderscount)
                    .HasColumnName("NBROKORDERSCOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Nowndealscount)
                    .HasColumnName("NOWNDEALSCOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Nownorderscount)
                    .HasColumnName("NOWNORDERSCOUNT")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0");
            });

            modelBuilder.Entity<VEqSettl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EQ_SETTL");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cacccurrcode)
                    .HasColumnName("CACCCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcashsettldate)
                    .HasColumnName("DCASHSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VEqflip>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EQFLIP");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrfrom)
                    .HasColumnName("CCURRFROM")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrto)
                    .HasColumnName("CCURRTO")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cfromref)
                    .HasColumnName("CFROMREF")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctoref)
                    .HasColumnName("CTOREF")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkeyfrom)
                    .HasColumnName("NDEALKEYFROM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkeyto)
                    .HasColumnName("NDEALKEYTO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrubprice)
                    .HasColumnName("NRUBPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusdprice)
                    .HasColumnName("NUSDPRICE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VEqpos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EQPOS");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cstateregistrationcode)
                    .HasColumnName("CSTATEREGISTRATIONCODE")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrency)
                    .HasColumnName("CTRADECURRENCY")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navgprice)
                    .HasColumnName("NAVGPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncntb)
                    .HasColumnName("NCNTB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncnts)
                    .HasColumnName("NCNTS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nhandprice)
                    .HasColumnName("NHANDPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketprice)
                    .HasColumnName("NMARKETPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnetpl)
                    .HasColumnName("NNETPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplusd)
                    .HasColumnName("NPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposition)
                    .HasColumnName("NPOSITION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantityb)
                    .HasColumnName("NQUANTITYB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantitys)
                    .HasColumnName("NQUANTITYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumusd)
                    .HasColumnName("NSUMUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nunrelpl)
                    .HasColumnName("NUNRELPL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VEqposdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EQPOSDETAIL");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbuydealnumber)
                    .HasColumnName("CBUYDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cselldealnumber)
                    .HasColumnName("CSELLDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrency)
                    .HasColumnName("CTRADECURRENCY")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Deqsettdate)
                    .HasColumnName("DEQSETTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbuydealkey)
                    .HasColumnName("NBUYDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricebuy)
                    .HasColumnName("NPRICEBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricesell)
                    .HasColumnName("NPRICESELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselldealkey)
                    .HasColumnName("NSELLDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VEqutil>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EQUTIL");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navail)
                    .HasColumnName("NAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nex)
                    .HasColumnName("NEX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfull)
                    .HasColumnName("NFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nutil)
                    .HasColumnName("NUTIL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VEqutil03>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EQUTIL03");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Corgcode)
                    .IsRequired()
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nfull)
                    .HasColumnName("NFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nutil)
                    .HasColumnName("NUTIL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VEqutil2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EQUTIL2");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VErmsExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ERMS_EXPORT");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfake1)
                    .HasColumnName("CFAKE1")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Cfake2)
                    .HasColumnName("CFAKE2")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Cfake3)
                    .HasColumnName("CFAKE3")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Cfake4)
                    .HasColumnName("CFAKE4")
                    .HasColumnType("CHAR(6)");

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ermsprice)
                    .HasColumnName("ERMSPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Position)
                    .HasColumnName("POSITION")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VErt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ERT");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ewrr)
                    .HasColumnName("EWRR")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nertkey)
                    .HasColumnName("NERTKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VFilemonitoring>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FILEMONITORING");

                entity.Property(e => e.Cathenastatus)
                    .HasColumnName("CATHENASTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cexpdatetime)
                    .HasColumnName("CEXPDATETIME")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cexpfilename)
                    .HasColumnName("CEXPFILENAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cimpdatetime)
                    .HasColumnName("CIMPDATETIME")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cimpfilename)
                    .HasColumnName("CIMPFILENAME")
                    .IsUnicode(false);

                entity.Property(e => e.Cservreqstatus)
                    .HasColumnName("CSERVREQSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dexpdatetime)
                    .HasColumnName("DEXPDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dimpdatetime)
                    .HasColumnName("DIMPDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nservreqkey)
                    .HasColumnName("NSERVREQKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VForexdeal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FOREXDEAL");

                entity.Property(e => e.Caccb)
                    .HasColumnName("CACCB")
                    .IsUnicode(false);

                entity.Property(e => e.Caccs)
                    .HasColumnName("CACCS")
                    .IsUnicode(false);

                entity.Property(e => e.Cathenabookcode)
                    .HasColumnName("CATHENABOOKCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Catlascounter)
                    .HasColumnName("CATLASCOUNTER")
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Corgtypecode)
                    .HasColumnName("CORGTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalespersonid)
                    .HasColumnName("CSALESPERSONID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VForexdealNett>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FOREXDEAL_NETT");

                entity.Property(e => e.Caccb)
                    .HasColumnName("CACCB")
                    .IsUnicode(false);

                entity.Property(e => e.Caccs)
                    .HasColumnName("CACCS")
                    .IsUnicode(false);

                entity.Property(e => e.Cathenabookcode)
                    .HasColumnName("CATHENABOOKCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Catlascounter)
                    .HasColumnName("CATLASCOUNTER")
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Corgtypecode)
                    .HasColumnName("CORGTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalespersonid)
                    .HasColumnName("CSALESPERSONID")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VFullcouponmatrix>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FULLCOUPONMATRIX");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcoupondate)
                    .HasColumnName("DCOUPONDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nkupsum)
                    .HasColumnName("NKUPSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxbal2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXBAL2");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbal)
                    .HasColumnName("NBAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvneb)
                    .HasColumnName("NVNEB")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxexp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXEXP");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nexp)
                    .HasColumnName("NEXP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexpres)
                    .HasColumnName("NEXPRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexpusd)
                    .HasColumnName("NEXPUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexusdres)
                    .HasColumnName("NEXUSDRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxexpdtl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXEXPDTL");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbonds)
                    .HasColumnName("NBONDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncash)
                    .HasColumnName("NCASH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclient)
                    .HasColumnName("NCLIENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepog)
                    .HasColumnName("NDEPOG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepot)
                    .HasColumnName("NDEPOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfunds)
                    .HasColumnName("NFUNDS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxb)
                    .HasColumnName("NFXB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxexp)
                    .HasColumnName("NFXEXP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxs)
                    .HasColumnName("NFXS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninr)
                    .HasColumnName("NINR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnostro)
                    .HasColumnName("NNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrurcorrect)
                    .HasColumnName("NRURCORRECT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebfxb)
                    .HasColumnName("NVNEBFXB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvnebfxs)
                    .HasColumnName("NVNEBFXS")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxexpplusfx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXEXPPLUSFX");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbnd)
                    .HasColumnName("NBND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexp)
                    .HasColumnName("NEXP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfx)
                    .HasColumnName("NFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxbal)
                    .HasColumnName("NFXBAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxvnebal)
                    .HasColumnName("NFXVNEBAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntot)
                    .HasColumnName("NTOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusdfxeq)
                    .HasColumnName("NUSDFXEQ")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXN");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxn1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXN1");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxn2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXN2");

                entity.Property(e => e.Bnetting).HasColumnName("BNETTING");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxocp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXOCP2");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxocp21>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXOCP21");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxocp3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXOCP3");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxocp31>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXOCP31");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxop2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXOP2");

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxpair2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXPAIR2");

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasColumnType("CHAR(3)");
            });

            modelBuilder.Entity<VFxreeval>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXREEVAL");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cop)
                    .HasColumnName("COP")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrate)
                    .HasColumnName("NCBRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrateold)
                    .HasColumnName("NCBRATEOLD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplrur)
                    .HasColumnName("NDPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplusd)
                    .HasColumnName("NDPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarginrur)
                    .HasColumnName("NMARGINRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarginusd)
                    .HasColumnName("NMARGINUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nploldrur)
                    .HasColumnName("NPLOLDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nploldusd)
                    .HasColumnName("NPLOLDUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplrur)
                    .HasColumnName("NPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplusd)
                    .HasColumnName("NPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npresrate)
                    .HasColumnName("NPRESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nrrurusdrate)
                    .HasColumnName("NRRURUSDRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxreeval2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXREEVAL2");

                entity.Property(e => e.Cop)
                    .HasColumnName("COP")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncbrate)
                    .HasColumnName("NCBRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrateold)
                    .HasColumnName("NCBRATEOLD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplrur)
                    .HasColumnName("NDPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplusd)
                    .HasColumnName("NDPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarginrur)
                    .HasColumnName("NMARGINRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarginusd)
                    .HasColumnName("NMARGINUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nploldrur)
                    .HasColumnName("NPLOLDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nploldusd)
                    .HasColumnName("NPLOLDUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplrur)
                    .HasColumnName("NPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplusd)
                    .HasColumnName("NPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npresrate)
                    .HasColumnName("NPRESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrrurusdrate)
                    .HasColumnName("NRRURUSDRATE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxreeval2Nett>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXREEVAL2_NETT");

                entity.Property(e => e.Cop)
                    .HasColumnName("COP")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncbrate)
                    .HasColumnName("NCBRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrateold)
                    .HasColumnName("NCBRATEOLD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplrur)
                    .HasColumnName("NDPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplusd)
                    .HasColumnName("NDPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarginrur)
                    .HasColumnName("NMARGINRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarginusd)
                    .HasColumnName("NMARGINUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nploldrur)
                    .HasColumnName("NPLOLDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nploldusd)
                    .HasColumnName("NPLOLDUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplrur)
                    .HasColumnName("NPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplusd)
                    .HasColumnName("NPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npresrate)
                    .HasColumnName("NPRESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrrurusdrate)
                    .HasColumnName("NRRURUSDRATE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VFxreevalNett>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_FXREEVAL_NETT");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cop)
                    .HasColumnName("COP")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrate)
                    .HasColumnName("NCBRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrateold)
                    .HasColumnName("NCBRATEOLD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplrur)
                    .HasColumnName("NDPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplusd)
                    .HasColumnName("NDPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarginrur)
                    .HasColumnName("NMARGINRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarginusd)
                    .HasColumnName("NMARGINUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nploldrur)
                    .HasColumnName("NPLOLDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nploldusd)
                    .HasColumnName("NPLOLDUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplrur)
                    .HasColumnName("NPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplusd)
                    .HasColumnName("NPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npresrate)
                    .HasColumnName("NPRESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nrrurusdrate)
                    .HasColumnName("NRRURUSDRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VGkoofzdpl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_GKOOFZDPL");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndplacr)
                    .HasColumnName("NDPLACR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplrur)
                    .HasColumnName("NDPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmt)
                    .HasColumnName("NMTMT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmy)
                    .HasColumnName("NMTMY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplclose)
                    .HasColumnName("NPLCLOSE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npltodopen)
                    .HasColumnName("NPLTODOPEN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplyestopen)
                    .HasColumnName("NPLYESTOPEN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet)
                    .HasColumnName("NPRICET")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet1)
                    .HasColumnName("NPRICET1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nraterurusd)
                    .HasColumnName("NRATERURUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrateusdrur)
                    .HasColumnName("NRATEUSDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VGkoofzdpl4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_GKOOFZDPL4");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.N1t)
                    .HasColumnName("N1T")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1y)
                    .HasColumnName("N1Y")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3t)
                    .HasColumnName("N3T")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3y)
                    .HasColumnName("N3Y")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5t)
                    .HasColumnName("N5T")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplacr)
                    .HasColumnName("NDPLACR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet)
                    .HasColumnName("NPRICET")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet1)
                    .HasColumnName("NPRICET1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VGkoofzdplnew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_GKOOFZDPLNEW");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndplacr)
                    .HasColumnName("NDPLACR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplrur)
                    .HasColumnName("NDPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplrurfull)
                    .HasColumnName("NDPLRURFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplusdfull)
                    .HasColumnName("NDPLUSDFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmt)
                    .HasColumnName("NMTMT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmy)
                    .HasColumnName("NMTMY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplclose)
                    .HasColumnName("NPLCLOSE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npltodopen)
                    .HasColumnName("NPLTODOPEN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplyestopen)
                    .HasColumnName("NPLYESTOPEN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet)
                    .HasColumnName("NPRICET")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet1)
                    .HasColumnName("NPRICET1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nraterurusd)
                    .HasColumnName("NRATERURUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrateusdrur)
                    .HasColumnName("NRATEUSDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeAthenaCurrrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_ATHENA_CURRRATE");

                entity.Property(e => e.Cbody)
                    .HasColumnName("CBODY")
                    .HasMaxLength(149)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr1)
                    .HasColumnName("CCURR1")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasColumnType("CHAR(12)");

                entity.Property(e => e.Nchangekey)
                    .HasColumnName("NCHANGEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nservreqkey)
                    .HasColumnName("NSERVREQKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeBtrtCurrrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_BTRT_CURRRATE");

                entity.Property(e => e.Cbody)
                    .HasColumnName("CBODY")
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasColumnType("CHAR(12)");

                entity.Property(e => e.Nchangekey)
                    .HasColumnName("NCHANGEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nservreqkey)
                    .HasColumnName("NSERVREQKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeDealapgcm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_DEALAPGCM");

                entity.Property(e => e.Crecord)
                    .HasColumnName("CRECORD")
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasColumnType("CHAR(9)");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeDealathena>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_DEALATHENA");

                entity.Property(e => e.Cdealbody)
                    .HasColumnName("CDEALBODY")
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeDealatlas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_DEALATLAS");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Crecord)
                    .HasColumnName("CRECORD")
                    .HasMaxLength(769)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeDealcrs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_DEALCRS");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.Creference)
                    .HasColumnName("CREFERENCE")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Crsmessage)
                    .HasColumnName("CRSMESSAGE")
                    .HasColumnType("XMLTYPE");

                entity.Property(e => e.Ctable)
                    .HasColumnName("CTABLE")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Dadddate)
                    .HasColumnName("DADDDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dresponsedate)
                    .HasColumnName("DRESPONSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dsenddate)
                    .HasColumnName("DSENDDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Irequesttype)
                    .HasColumnName("IREQUESTTYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iresponseresult)
                    .HasColumnName("IRESPONSERESULT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey2)
                    .HasColumnName("NDEALKEY2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrequestkey)
                    .HasColumnName("NREQUESTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.SecurityCode)
                    .HasColumnName("SECURITY_CODE")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VIeDealdiasoftEq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_DEALDIASOFT_EQ");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cdealbody)
                    .HasColumnName("CDEALBODY")
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME_")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY_")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeDealdiasoftFm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_DEALDIASOFT_FM");

                entity.Property(e => e.Crecord)
                    .HasColumnName("CRECORD")
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasColumnType("CHAR(10)");

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .IsUnicode(false);

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeDealmoex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_DEALMOEX");

                entity.Property(e => e.Caction)
                    .HasColumnName("CACTION")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Crecord)
                    .HasColumnName("CRECORD")
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasColumnType("CHAR(10)");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeDealregulus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_DEALREGULUS");

                entity.Property(e => e.ActionTi)
                    .HasColumnName("ACTION_TI")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealbody)
                    .HasColumnName("CDEALBODY")
                    .IsUnicode(false);

                entity.Property(e => e.CdealtableK)
                    .HasColumnName("CDEALTABLE_K_")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FodealidTi)
                    .HasColumnName("FODEALID_TI")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.KeyK)
                    .HasColumnName("KEY_K_")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeDealsummit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_DEALSUMMIT");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealbody)
                    .HasColumnName("CDEALBODY")
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtable)
                    .HasColumnName("CDEALTABLE_")
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE_")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Csummitreference)
                    .HasColumnName("CSUMMITREFERENCE_")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE_")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Exttradeid)
                    .HasColumnName("EXTTRADEID_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Tradedate)
                    .HasColumnName("TRADEDATE_")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<VIeDiasoftlocks>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_DIASOFTLOCKS");

                entity.Property(e => e.Crecord)
                    .HasColumnName("CRECORD")
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasColumnType("CHAR(15)");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER(20)");
            });

            modelBuilder.Entity<VIeEqPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_EQ_PRICE");

                entity.Property(e => e.Cbody)
                    .HasColumnName("CBODY")
                    .HasMaxLength(113)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VIeEqYeldPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_EQ_YELD_PRICE");

                entity.Property(e => e.Cbody)
                    .HasColumnName("CBODY")
                    .HasMaxLength(146)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VIeErms>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_ERMS");

                entity.Property(e => e.Cdealbody)
                    .HasColumnName("CDEALBODY")
                    .HasMaxLength(166)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VIeFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_FILE");

                entity.Property(e => e.Cfile)
                    .HasColumnName("CFILE")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cfolder)
                    .HasColumnName("CFOLDER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cresult)
                    .HasColumnName("CRESULT")
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcreatedate)
                    .HasColumnName("DCREATEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dprocessdate)
                    .HasColumnName("DPROCESSDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iie)
                    .HasColumnName("IIE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfilekey)
                    .HasColumnName("NFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlaunchkey)
                    .HasColumnName("NLAUNCHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecordcount)
                    .HasColumnName("NRECORDCOUNT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeFilerecords>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_FILERECORDS");

                entity.Property(e => e.Ctable)
                    .HasColumnName("CTABLE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Iie)
                    .HasColumnName("IIE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfilekey)
                    .HasColumnName("NFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecordkey)
                    .HasColumnName("NRECORDKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeInterfacedealstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_INTERFACEDEALSTATUS");

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmessage)
                    .HasColumnName("CMESSAGE")
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninterfacedealstatuskey)
                    .HasColumnName("NINTERFACEDEALSTATUSKEY")
                    .HasColumnType("NUMBER");
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninterfacekey)
                    .HasColumnName("NINTERFACEKEY")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VIeLaunch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_LAUNCH");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cfile)
                    .HasColumnName("CFILE")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cfileresult)
                    .HasColumnName("CFILERESULT")
                    .IsUnicode(false);

                entity.Property(e => e.Cfilestatus)
                    .HasColumnName("CFILESTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfolder)
                    .HasColumnName("CFOLDER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cjobname)
                    .HasColumnName("CJOBNAME")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cresult)
                    .HasColumnName("CRESULT")
                    .HasColumnType("CLOB");

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcreatedate)
                    .HasColumnName("DCREATEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dprocessdate)
                    .HasColumnName("DPROCESSDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nfilekey)
                    .HasColumnName("NFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlaunchkey)
                    .HasColumnName("NLAUNCHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecordcount)
                    .HasColumnName("NRECORDCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettingkey)
                    .HasColumnName("NSETTINGKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeLaunchsettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_LAUNCHSETTINGS");

                entity.Property(e => e.Benabled).HasColumnName("BENABLED");

                entity.Property(e => e.Bmanual).HasColumnName("BMANUAL");

                entity.Property(e => e.Carchivefolder)
                    .HasColumnName("CARCHIVEFOLDER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cdescription)
                    .HasColumnName("CDESCRIPTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cfilenametemplate)
                    .HasColumnName("CFILENAMETEMPLATE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cflagfile)
                    .HasColumnName("CFLAGFILE")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cfolder)
                    .HasColumnName("CFOLDER")
                    .IsUnicode(false);

                entity.Property(e => e.Cinterfacedescription)
                    .HasColumnName("CINTERFACEDESCRIPTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cjobbody1)
                    .HasColumnName("CJOBBODY1")
                    .IsUnicode(false);

                entity.Property(e => e.Cjobbody2)
                    .HasColumnName("CJOBBODY2")
                    .IsUnicode(false);

                entity.Property(e => e.Cjobinterval)
                    .HasColumnName("CJOBINTERVAL")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cjobname)
                    .HasColumnName("CJOBNAME")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dnextrundate)
                    .HasColumnName("DNEXTRUNDATE")
                    .HasColumnType("TIMESTAMP(9) WITH TIME ZONE");

                entity.Property(e => e.Idirection)
                    .HasColumnName("IDIRECTION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterfacekey)
                    .HasColumnName("NINTERFACEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettingkey)
                    .HasColumnName("NSETTINGKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeLoropayents>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_LOROPAYENTS");

                entity.Property(e => e.BeAccountlable)
                    .HasColumnName("BE_ACCOUNTLABLE")
                    .IsUnicode(false);

                entity.Property(e => e.Beneficiaryaccount)
                    .HasColumnName("BENEFICIARYACCOUNT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Beneficiaryname)
                    .HasColumnName("BENEFICIARYNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BoAccountcode)
                    .HasColumnName("BO_ACCOUNTCODE")
                    .IsUnicode(false);

                entity.Property(e => e.BoAccountcurrency)
                    .HasColumnName("BO_ACCOUNTCURRENCY")
                    .IsUnicode(false);

                entity.Property(e => e.BoAccountlable)
                    .HasColumnName("BO_ACCOUNTLABLE")
                    .IsUnicode(false);

                entity.Property(e => e.Classified)
                    .HasColumnName("CLASSIFIED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Label)
                    .HasColumnName("LABEL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operdate)
                    .HasColumnName("OPERDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Sumaccount)
                    .HasColumnName("SUMACCOUNT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeLoropaymets>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_LOROPAYMETS");

                entity.Property(e => e.BeAccountlable)
                    .HasColumnName("BE_ACCOUNTLABLE")
                    .IsUnicode(false);

                entity.Property(e => e.Beneficiaryaccount)
                    .HasColumnName("BENEFICIARYACCOUNT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Beneficiaryname)
                    .HasColumnName("BENEFICIARYNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BoAccountcode)
                    .HasColumnName("BO_ACCOUNTCODE")
                    .IsUnicode(false);

                entity.Property(e => e.BoAccountcurrency)
                    .HasColumnName("BO_ACCOUNTCURRENCY")
                    .IsUnicode(false);

                entity.Property(e => e.BoAccountlable)
                    .HasColumnName("BO_ACCOUNTLABLE")
                    .IsUnicode(false);

                entity.Property(e => e.Classified)
                    .HasColumnName("CLASSIFIED")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Label)
                    .HasColumnName("LABEL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Operdate)
                    .HasColumnName("OPERDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Sumaccount)
                    .HasColumnName("SUMACCOUNT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeNostropayments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_NOSTROPAYMENTS");

                entity.Property(e => e.Cathenenum)
                    .HasColumnName("CATHENENUM")
                    .HasColumnType("CHAR(20)");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbalance)
                    .HasColumnName("NBALANCE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIePaymentsCurr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_PAYMENTS_CURR");

                entity.Property(e => e.Cdealbody)
                    .HasColumnName("CDEALBODY")
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(12)");

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasColumnType("CHAR(5)");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIePaymentsRub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_PAYMENTS_RUB");

                entity.Property(e => e.Cdealbody)
                    .HasColumnName("CDEALBODY")
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(12)");

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasColumnType("CHAR(5)");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIeQuiklocks>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_QUIKLOCKS");

                entity.Property(e => e.Crecord)
                    .HasColumnName("CRECORD")
                    .HasMaxLength(645)
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasColumnType("CHAR(15)");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER(20)");
            });

            modelBuilder.Entity<VIeRepodeals>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_REPODEALS");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclassif)
                    .HasColumnName("CCLASSIF")
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .IsUnicode(false);

                entity.Property(e => e.Ctable)
                    .HasColumnName("CTABLE")
                    .HasColumnType("CHAR(9)");

                entity.Property(e => e.Ctranshcurr)
                    .HasColumnName("CTRANSHCURR")
                    .IsUnicode(false);

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .IsUnicode(false);

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposumkey)
                    .HasColumnName("NREPOSUMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VIeSmvistaCurrrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IE_SMVISTA_CURRRATE");

                entity.Property(e => e.Cbody)
                    .HasColumnName("CBODY")
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasColumnType("CHAR(12)");

                entity.Property(e => e.Nchangekey)
                    .HasColumnName("NCHANGEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nservreqkey)
                    .HasColumnName("NSERVREQKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIntswap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INTSWAP");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurrcode)
                    .HasColumnName("CFIXCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb2)
                    .HasColumnName("DVALUEDATEB2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndeporate)
                    .HasColumnName("NDEPORATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate2)
                    .HasColumnName("NRATE2")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumb2)
                    .HasColumnName("NSUMB2")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums2)
                    .HasColumnName("NSUMS2")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nswaprate)
                    .HasColumnName("NSWAPRATE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIrr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IRR");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cdurrep)
                    .HasColumnName("CDURREP")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.Cinrrep)
                    .HasColumnName("CINRREP")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.Cnumberperiod)
                    .HasColumnName("CNUMBERPERIOD")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctransh)
                    .IsRequired()
                    .HasColumnName("CTRANSH")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cyear)
                    .HasColumnName("CYEAR")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Dcoupondate)
                    .HasColumnName("DCOUPONDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navgbuyprice)
                    .HasColumnName("NAVGBUYPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncurpv)
                    .HasColumnName("NCURPV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncurpvmult)
                    .HasColumnName("NCURPVMULT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndaystomatur)
                    .HasColumnName("NDAYSTOMATUR")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Ndur)
                    .HasColumnName("NDUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfacevalue)
                    .HasColumnName("NFACEVALUE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfulldur)
                    .HasColumnName("NFULLDUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullirr)
                    .HasColumnName("NFULLIRR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullytm)
                    .HasColumnName("NFULLYTM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nirr)
                    .HasColumnName("NIRR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmprice)
                    .HasColumnName("NMTMPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnom)
                    .HasColumnName("NNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npay)
                    .HasColumnName("NPAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprirr)
                    .HasColumnName("NPRIRR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytm)
                    .HasColumnName("NYTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VIrr2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IRR2");

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cnumberperiod)
                    .HasColumnName("CNUMBERPERIOD")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctransh)
                    .IsRequired()
                    .HasColumnName("CTRANSH")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cyear)
                    .HasColumnName("CYEAR")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Dcoupondate)
                    .HasColumnName("DCOUPONDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navgbuyprice)
                    .HasColumnName("NAVGBUYPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncurpv)
                    .HasColumnName("NCURPV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncurpvmult)
                    .HasColumnName("NCURPVMULT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndaystomatur)
                    .HasColumnName("NDAYSTOMATUR")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Ndur)
                    .HasColumnName("NDUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfacevalue)
                    .HasColumnName("NFACEVALUE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfulldur)
                    .HasColumnName("NFULLDUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullirr)
                    .HasColumnName("NFULLIRR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullytm)
                    .HasColumnName("NFULLYTM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nirr)
                    .HasColumnName("NIRR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmprice)
                    .HasColumnName("NMTMPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnom)
                    .HasColumnName("NNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npay)
                    .HasColumnName("NPAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprirr)
                    .HasColumnName("NPRIRR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytm)
                    .HasColumnName("NYTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VLastSummitdeal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_LAST_SUMMITDEAL");

                entity.Property(e => e.Cdealstatus)
                    .HasColumnName("CDEALSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cexportstatus)
                    .HasColumnName("CEXPORTSTATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cfilename)
                    .HasColumnName("CFILENAME")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Creference)
                    .HasColumnName("CREFERENCE")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ddealdate)
                    .HasColumnName("DDEALDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npreviouskey)
                    .HasColumnName("NPREVIOUSKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VLimtrend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_LIMTREND");

                entity.Property(e => e.Ccontrcode)
                    .IsRequired()
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cperiodcode)
                    .IsRequired()
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nlend)
                    .HasColumnName("NLEND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NlendL)
                    .HasColumnName("NLEND_L")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npre)
                    .HasColumnName("NPRE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NpreL)
                    .HasColumnName("NPRE_L")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettl)
                    .HasColumnName("NSETTL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NsettlL)
                    .HasColumnName("NSETTL_L")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VLiq3mm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_LIQ3MM");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddatefrom)
                    .HasColumnName("DDATEFROM")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddateto)
                    .HasColumnName("DDATETO")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iclass)
                    .HasColumnName("ICLASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Inumber)
                    .HasColumnName("INUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ispos)
                    .HasColumnName("ISPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclients)
                    .HasColumnName("NCLIENTS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxact)
                    .HasColumnName("NFXACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfxpass)
                    .HasColumnName("NFXPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterbankact)
                    .HasColumnName("NINTERBANKACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterbankpass)
                    .HasColumnName("NINTERBANKPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nintercompact)
                    .HasColumnName("NINTERCOMPACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nintercomppass)
                    .HasColumnName("NINTERCOMPPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrurnostro)
                    .HasColumnName("NRURNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nswapact)
                    .HasColumnName("NSWAPACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nswappass)
                    .HasColumnName("NSWAPPASS")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VListoffxdeal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_LISTOFFXDEAL");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Ctrader)
                    .HasColumnName("CTRADER")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dreportdate)
                    .HasColumnName("DREPORTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealstatus)
                    .HasColumnName("NDEALSTATUS")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nrecnumber)
                    .HasColumnName("NRECNUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VListofmmdeal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_LISTOFMMDEAL");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctrader)
                    .HasColumnName("CTRADER")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dreportdate)
                    .HasColumnName("DREPORTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealstatus)
                    .HasColumnName("NDEALSTATUS")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Ninterest)
                    .HasColumnName("NINTEREST")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nprincipal)
                    .HasColumnName("NPRINCIPAL")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Nrecnumber)
                    .HasColumnName("NRECNUMBER")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VMinfindpl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MINFINDPL");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndplacr)
                    .HasColumnName("NDPLACR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplusd)
                    .HasColumnName("NDPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmt)
                    .HasColumnName("NMTMT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmy)
                    .HasColumnName("NMTMY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplclose)
                    .HasColumnName("NPLCLOSE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npltodopen)
                    .HasColumnName("NPLTODOPEN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplyestopen)
                    .HasColumnName("NPLYESTOPEN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet)
                    .HasColumnName("NPRICET")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet1)
                    .HasColumnName("NPRICET1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nraterurusd)
                    .HasColumnName("NRATERURUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrateusdrur)
                    .HasColumnName("NRATEUSDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VMinfindplnew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MINFINDPLNEW");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndplacr)
                    .HasColumnName("NDPLACR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplrurfull)
                    .HasColumnName("NDPLRURFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplusd)
                    .HasColumnName("NDPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplusdfull)
                    .HasColumnName("NDPLUSDFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmt)
                    .HasColumnName("NMTMT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmy)
                    .HasColumnName("NMTMY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplclose)
                    .HasColumnName("NPLCLOSE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npltodopen)
                    .HasColumnName("NPLTODOPEN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplyestopen)
                    .HasColumnName("NPLYESTOPEN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet)
                    .HasColumnName("NPRICET")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet1)
                    .HasColumnName("NPRICET1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nraterurusd)
                    .HasColumnName("NRATERURUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrateusdrur)
                    .HasColumnName("NRATEUSDRUR")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VMmgap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MMGAP");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddatefrom)
                    .HasColumnName("DDATEFROM")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddateto)
                    .HasColumnName("DDATETO")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iclass)
                    .HasColumnName("ICLASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Inumber)
                    .HasColumnName("INUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ispos)
                    .HasColumnName("ISPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nact)
                    .HasColumnName("NACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nactsum)
                    .HasColumnName("NACTSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nactsum2)
                    .HasColumnName("NACTSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgact)
                    .HasColumnName("NAVGACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgactsum)
                    .HasColumnName("NAVGACTSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgactsum2)
                    .HasColumnName("NAVGACTSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpass)
                    .HasColumnName("NAVGPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpasssum)
                    .HasColumnName("NAVGPASSSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpasssum2)
                    .HasColumnName("NAVGPASSSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npass)
                    .HasColumnName("NPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npasssum)
                    .HasColumnName("NPASSSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npasssum2)
                    .HasColumnName("NPASSSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VMmgapnew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MMGAPNEW");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iclass)
                    .HasColumnName("ICLASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Inumber)
                    .HasColumnName("INUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ispos)
                    .HasColumnName("ISPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nact)
                    .HasColumnName("NACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nactsum)
                    .HasColumnName("NACTSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nactsum2)
                    .HasColumnName("NACTSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgact)
                    .HasColumnName("NAVGACT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgactsum)
                    .HasColumnName("NAVGACTSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgactsum2)
                    .HasColumnName("NAVGACTSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpass)
                    .HasColumnName("NAVGPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpasssum)
                    .HasColumnName("NAVGPASSSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpasssum2)
                    .HasColumnName("NAVGPASSSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclient)
                    .HasColumnName("NCLIENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npass)
                    .HasColumnName("NPASS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npasssum)
                    .HasColumnName("NPASSSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npasssum2)
                    .HasColumnName("NPASSSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VMmopl2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MMOPL2");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VMmopl21>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MMOPL21");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VMmroll3Rider>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MMROLL3_RIDER");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npayval)
                    .HasColumnName("NPAYVAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumint)
                    .HasColumnName("NSUMINT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumroll)
                    .HasColumnName("NSUMROLL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VMmrollLt1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MMROLL_LT1");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VMmrollRider>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MMROLL_RIDER");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VMmrollT1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MMROLL_T1");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VNetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NETTING");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VNetting1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NETTING1");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VNetting2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NETTING2");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VNettpos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NETTPOS");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .IsUnicode(false);

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VNettpos1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NETTPOS1");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .IsUnicode(false);

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VNettpos2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NETTPOS2");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .IsUnicode(false);

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VNettpos3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NETTPOS3");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .IsUnicode(false);

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VNettposfx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NETTPOSFX");

                entity.Property(e => e.Bnetting).HasColumnName("BNETTING");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .IsUnicode(false);

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VNorm6coeff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NORM6COEFF");

                entity.Property(e => e.Bresident)
                    .HasColumnName("BRESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvalidfrom)
                    .HasColumnName("DVALIDFROM")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvalidto)
                    .HasColumnName("DVALIDTO")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncoeff)
                    .HasColumnName("NCOEFF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealtype)
                    .HasColumnName("NDEALTYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nperiodfrom)
                    .HasColumnName("NPERIODFROM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nperiodto)
                    .HasColumnName("NPERIODTO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.RowId)
                    .HasColumnName("ROW_ID")
                    .HasColumnType("ROWID");
            });

            modelBuilder.Entity<VOffmarkettradesfx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OFFMARKETTRADESFX");

                entity.Property(e => e.Ccy)
                    .HasColumnName("CCY")
                    .HasColumnType("CHAR(7)");

                entity.Property(e => e.Dealdate)
                    .HasColumnName("DEALDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dealkey)
                    .HasColumnName("DEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dealrate)
                    .HasColumnName("DEALRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Maxrate)
                    .HasColumnName("MAXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Minrate)
                    .HasColumnName("MINRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Sumbuy)
                    .HasColumnName("SUMBUY")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Sumsell)
                    .HasColumnName("SUMSELL")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Term)
                    .HasColumnName("TERM")
                    .HasColumnType("NUMBER(38)");
            });

            modelBuilder.Entity<VOffmarkettradesmm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OFFMARKETTRADESMM");

                entity.Property(e => e.Ccy)
                    .HasColumnName("CCY")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dealdate)
                    .HasColumnName("DEALDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dealkey)
                    .HasColumnName("DEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dealrate)
                    .HasColumnName("DEALRATE")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Maxrate)
                    .HasColumnName("MAXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Minrate)
                    .HasColumnName("MINRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Sum)
                    .HasColumnName("SUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Term)
                    .HasColumnName("TERM")
                    .HasColumnType("NUMBER(38)");
            });

            modelBuilder.Entity<VOpenbonds>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OPENBONDS");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Crefbuy)
                    .HasColumnName("CREFBUY")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacrfull)
                    .HasColumnName("NACRFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrate)
                    .HasColumnName("NAVGRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrateres)
                    .HasColumnName("NAVGRATERES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuydealkey)
                    .HasColumnName("NBUYDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryield)
                    .HasColumnName("NCURYIELD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryieldres)
                    .HasColumnName("NCURYIELDRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplacr)
                    .HasColumnName("NPLACR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplfull)
                    .HasColumnName("NPLFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplfullres)
                    .HasColumnName("NPLFULLRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplres)
                    .HasColumnName("NPLRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecalc)
                    .HasColumnName("NRECALC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecalcres)
                    .HasColumnName("NRECALCRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreserv)
                    .HasColumnName("NRESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselldealkey)
                    .HasColumnName("NSELLDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntot)
                    .HasColumnName("NTOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ytm)
                    .HasColumnName("YTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VOpenbonds2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OPENBONDS2");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Crefbuy)
                    .HasColumnName("CREFBUY")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacrfull)
                    .HasColumnName("NACRFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrateres)
                    .HasColumnName("NAVGRATERES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbidrate)
                    .HasColumnName("NBIDRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuydealkey)
                    .HasColumnName("NBUYDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryield)
                    .HasColumnName("NCURYIELD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryieldres)
                    .HasColumnName("NCURYIELDRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplacr)
                    .HasColumnName("NPLACR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplfull)
                    .HasColumnName("NPLFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplfullres)
                    .HasColumnName("NPLFULLRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplres)
                    .HasColumnName("NPLRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecalc)
                    .HasColumnName("NRECALC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecalcres)
                    .HasColumnName("NRECALCRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreserv)
                    .HasColumnName("NRESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nselldealkey)
                    .HasColumnName("NSELLDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntot)
                    .HasColumnName("NTOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ytm)
                    .HasColumnName("YTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VOpenbondsDelivRub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OPENBONDS_DELIV_RUB");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Crefbuy)
                    .HasColumnName("CREFBUY")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrfull)
                    .HasColumnName("NACRFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrate)
                    .HasColumnName("NAVGRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrateres)
                    .HasColumnName("NAVGRATERES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryield)
                    .HasColumnName("NCURYIELD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryieldres)
                    .HasColumnName("NCURYIELDRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplacr)
                    .HasColumnName("NPLACR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplfull)
                    .HasColumnName("NPLFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplfullres)
                    .HasColumnName("NPLFULLRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplres)
                    .HasColumnName("NPLRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecalc)
                    .HasColumnName("NRECALC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecalcres)
                    .HasColumnName("NRECALCRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreserv)
                    .HasColumnName("NRESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntot)
                    .HasColumnName("NTOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ytm)
                    .HasColumnName("YTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VOpenbondsReconc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OPENBONDS_RECONC");

                entity.Property(e => e.Cclassif)
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Crefbuy)
                    .HasColumnName("CREFBUY")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Delivered)
                    .HasColumnName("DELIVERED")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrfull)
                    .HasColumnName("NACRFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrate)
                    .HasColumnName("NAVGRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrateres)
                    .HasColumnName("NAVGRATERES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryield)
                    .HasColumnName("NCURYIELD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryieldres)
                    .HasColumnName("NCURYIELDRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplacr)
                    .HasColumnName("NPLACR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplfull)
                    .HasColumnName("NPLFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplfullres)
                    .HasColumnName("NPLFULLRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplres)
                    .HasColumnName("NPLRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecalc)
                    .HasColumnName("NRECALC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecalcres)
                    .HasColumnName("NRECALCRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreserv)
                    .HasColumnName("NRESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntot)
                    .HasColumnName("NTOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ytm)
                    .HasColumnName("YTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VOpenbondsUndelivRub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OPENBONDS_UNDELIV_RUB");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Crefbuy)
                    .HasColumnName("CREFBUY")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrfull)
                    .HasColumnName("NACRFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrate)
                    .HasColumnName("NAVGRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrateres)
                    .HasColumnName("NAVGRATERES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryield)
                    .HasColumnName("NCURYIELD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncuryieldres)
                    .HasColumnName("NCURYIELDRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplacr)
                    .HasColumnName("NPLACR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplfull)
                    .HasColumnName("NPLFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplfullres)
                    .HasColumnName("NPLFULLRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplres)
                    .HasColumnName("NPLRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecalc)
                    .HasColumnName("NRECALC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrecalcres)
                    .HasColumnName("NRECALCRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreserv)
                    .HasColumnName("NRESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntot)
                    .HasColumnName("NTOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ytm)
                    .HasColumnName("YTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VOrgs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ORGS");

                entity.Property(e => e.Bcrsexpeq).HasColumnName("BCRSEXPEQ");

                entity.Property(e => e.Bcrsexper).HasColumnName("BCRSEXPER");

                entity.Property(e => e.Bcrsexpfx).HasColumnName("BCRSEXPFX");

                entity.Property(e => e.Bcrsexpmm).HasColumnName("BCRSEXPMM");

                entity.Property(e => e.Bcrsexprg).HasColumnName("BCRSEXPRG");

                entity.Property(e => e.Bcrsexpss).HasColumnName("BCRSEXPSS");

                entity.Property(e => e.Bdepopayments)
                    .HasColumnName("BDEPOPAYMENTS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bisbank)
                    .HasColumnName("BISBANK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bisrazvit)
                    .HasColumnName("BISRAZVIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bmmdepart)
                    .HasColumnName("BMMDEPART")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoocp)
                    .HasColumnName("BNOOCP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoresident)
                    .HasColumnName("BNORESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bprefunding)
                    .HasColumnName("BPREFUNDING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bprincipalorbroker)
                    .HasColumnName("BPRINCIPALORBROKER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cathenacode)
                    .HasColumnName("CATHENACODE")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Cbic)
                    .HasColumnName("CBIC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokagreementeq)
                    .HasColumnName("CBROKAGREEMENTEQ")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokagreementfm)
                    .HasColumnName("CBROKAGREEMENTFM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cgridname)
                    .HasColumnName("CGRIDNAME")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Cgridtown)
                    .HasColumnName("CGRIDTOWN")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Cingcode)
                    .HasColumnName("CINGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cinn)
                    .HasColumnName("CINN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicexcode)
                    .HasColumnName("CMICEXCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicexid)
                    .HasColumnName("CMICEXID")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .IsRequired()
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Corgtypecode)
                    .HasColumnName("CORGTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cprefsettcurr)
                    .HasColumnName("CPREFSETTCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Crequisites)
                    .HasColumnName("CREQUISITES")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Creutercode)
                    .HasColumnName("CREUTERCODE")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Crusname)
                    .HasColumnName("CRUSNAME")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescredit)
                    .HasColumnName("CSALESCREDIT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitcode)
                    .HasColumnName("CSUMMITCODE")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Cvtmgroup)
                    .HasColumnName("CVTMGROUP")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Icrsexportallow)
                    .HasColumnName("ICRSEXPORTALLOW")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccountmanagerid)
                    .HasColumnName("NACCOUNTMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nathenaclassified)
                    .HasColumnName("NATHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncombps)
                    .HasColumnName("NCOMBPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncountryid)
                    .HasColumnName("NCOUNTRYID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nportionfm)
                    .HasColumnName("NPORTIONFM")
                    .HasColumnType("NUMBER(3,2)");

                entity.Property(e => e.Npriority)
                    .HasColumnName("NPRIORITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesmanagerid)
                    .HasColumnName("NSALESMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsegmentationid)
                    .HasColumnName("NSEGMENTATIONID")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPkAggrpaym>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_AGGRPAYM");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cacckey)
                    .HasColumnName("CACCKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cathenenum)
                    .HasColumnName("CATHENENUM")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cficlass)
                    .HasColumnName("CFICLASS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naggrpaymkey)
                    .HasColumnName("NAGGRPAYMKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nclientacckey)
                    .HasColumnName("NCLIENTACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(22,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkAssetlocks>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_ASSETLOCKS");

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Casset)
                    .HasColumnName("CASSET")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cassettype)
                    .HasColumnName("CASSETTYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cid)
                    .HasColumnName("CID")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cisin)
                    .HasColumnName("CISIN")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cquikstatus)
                    .HasColumnName("CQUIKSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cticker)
                    .HasColumnName("CTICKER")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradercode)
                    .HasColumnName("CTRADERCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctrdacc)
                    .HasColumnName("CTRDACC")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctreekey)
                    .HasColumnName("CTREEKEY")
                    .HasMaxLength(401)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctypekey)
                    .HasColumnName("CTYPEKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nassetlockskey)
                    .HasColumnName("NASSETLOCKSKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlocked)
                    .HasColumnName("NLOCKED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntypekey)
                    .HasColumnName("NTYPEKEY")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkAssetlocksTree>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_ASSETLOCKS_TREE");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Casset)
                    .HasColumnName("CASSET")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cisin)
                    .HasColumnName("CISIN")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ckey)
                    .HasColumnName("CKEY")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Ctrdacc)
                    .HasColumnName("CTRDACC")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Ctreekey)
                    .HasColumnName("CTREEKEY")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Navailableonexchange)
                    .HasColumnName("NAVAILABLEONEXCHANGE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navalable)
                    .HasColumnName("NAVALABLE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncurrentbalance)
                    .HasColumnName("NCURRENTBALANCE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlocked)
                    .HasColumnName("NLOCKED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlocked2leg)
                    .HasColumnName("NLOCKED2LEG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlockedonexchange)
                    .HasColumnName("NLOCKEDONEXCHANGE")
                    .HasColumnType("NUMBER(19,4)");

                entity.Property(e => e.Openbal)
                    .HasColumnName("OPENBAL")
                    .HasColumnType("NUMBER(19,4)");
            });

            modelBuilder.Entity<VPkAssetlocksTree1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_ASSETLOCKS_TREE1");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Casset)
                    .HasColumnName("CASSET")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cisin)
                    .HasColumnName("CISIN")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ckey)
                    .HasColumnName("CKEY")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Ctrdacc)
                    .HasColumnName("CTRDACC")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Ctreekey)
                    .HasColumnName("CTREEKEY")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Navailableonexchange)
                    .HasColumnName("NAVAILABLEONEXCHANGE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navalable)
                    .HasColumnName("NAVALABLE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncurrentbalance)
                    .HasColumnName("NCURRENTBALANCE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninitialbalance)
                    .HasColumnName("NINITIALBALANCE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlocked)
                    .HasColumnName("NLOCKED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlocked2leg)
                    .HasColumnName("NLOCKED2LEG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlockedonexchange)
                    .HasColumnName("NLOCKEDONEXCHANGE")
                    .HasColumnType("NUMBER(19,4)");
            });

            modelBuilder.Entity<VPkBooks>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_BOOKS");

                entity.Property(e => e.Bactive).HasColumnName("BACTIVE");

                entity.Property(e => e.Bathenaintexport).HasColumnName("BATHENAINTEXPORT");

                entity.Property(e => e.Batlasexport).HasColumnName("BATLASEXPORT");

                entity.Property(e => e.Bcrsexport).HasColumnName("BCRSEXPORT");

                entity.Property(e => e.Bsummitexport).HasColumnName("BSUMMITEXPORT");

                entity.Property(e => e.Cathenabookcode)
                    .HasColumnName("CATHENABOOKCODE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Catlasbookcode)
                    .HasColumnName("CATLASBOOKCODE")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .IsRequired()
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookname)
                    .HasColumnName("CBOOKNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccompany)
                    .HasColumnName("CCOMPANY")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccounterparty)
                    .HasColumnName("CCOUNTERPARTY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftbookcode)
                    .HasColumnName("CDIASOFTBOOKCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitbookcode)
                    .HasColumnName("CSUMMITBOOKCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitdeskcode)
                    .HasColumnName("CSUMMITDESKCODE")
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VPkBrief>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_BRIEF");

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VPkBriefdict>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_BRIEFDICT");

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VPkBroker>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_BROKER");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Creutercode)
                    .HasColumnName("CREUTERCODE")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Nbrokerkey)
                    .HasColumnName("NBROKERKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPkClientacc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_CLIENTACC");

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cathenenum)
                    .HasColumnName("CATHENENUM")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cficlass)
                    .HasColumnName("CFICLASS")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nclientacckey)
                    .HasColumnName("NCLIENTACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkClientpaym>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_CLIENTPAYM");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cacckey)
                    .HasColumnName("CACCKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccountcode)
                    .HasColumnName("CACCOUNTCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdescription)
                    .HasColumnName("CDESCRIPTION")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Clabel)
                    .HasColumnName("CLABEL")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nclientpaymkey)
                    .HasColumnName("NCLIENTPAYMKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(22,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkClientpaymSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_CLIENTPAYM_SETTINGS");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccountcode)
                    .HasColumnName("CACCOUNTCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caction)
                    .HasColumnName("CACTION")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientname)
                    .HasColumnName("CCLIENTNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclienttaxid)
                    .HasColumnName("CCLIENTTAXID")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdoctypelable)
                    .HasColumnName("CDOCTYPELABLE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Crulename)
                    .HasColumnName("CRULENAME")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naction)
                    .HasColumnName("NACTION")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nclientid)
                    .HasColumnName("NCLIENTID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nclientpaymsettkey)
                    .HasColumnName("NCLIENTPAYMSETTKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndoctype)
                    .HasColumnName("NDOCTYPE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkCurracc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_CURRACC");

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Baggregate)
                    .HasColumnName("BAGGREGATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bincludedealpos)
                    .HasColumnName("BINCLUDEDEALPOS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnostro)
                    .HasColumnName("BNOSTRO")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnostrobalance)
                    .HasColumnName("BNOSTROBALANCE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccbal)
                    .HasColumnName("CACCBAL")
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccnum)
                    .HasColumnName("CACCNUM")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cacctypecode)
                    .HasColumnName("CACCTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cathenenum)
                    .HasColumnName("CATHENENUM")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccorrcode)
                    .HasColumnName("CCORRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdefopers)
                    .HasColumnName("CDEFOPERS")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdiasoftcode)
                    .HasColumnName("CDIASOFTCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cminnostrobalance)
                    .HasColumnName("CMINNOSTROBALANCE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpaymforinter)
                    .HasColumnName("CPAYMFORINTER")
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Crequivisits)
                    .HasColumnName("CREQUIVISITS")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradingvenue)
                    .HasColumnName("CTRADINGVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Inostrobalance)
                    .HasColumnName("INOSTROBALANCE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncurracckey)
                    .HasColumnName("NCURRACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkCurrency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_CURRENCY");

                entity.Property(e => e.Beurgroup)
                    .HasColumnName("BEURGROUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrname)
                    .HasColumnName("CCURRNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iocporder)
                    .HasColumnName("IOCPORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Neurrate)
                    .HasColumnName("NEURRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nisocode)
                    .HasColumnName("NISOCODE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPkCurrpaym>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_CURRPAYM");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bstorno)
                    .HasColumnName("BSTORNO")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Btrueflag)
                    .HasColumnName("BTRUEFLAG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpaymtypecode)
                    .HasColumnName("CPAYMTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nclcorr)
                    .HasColumnName("NCLCORR")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncurrpaymkey)
                    .HasColumnName("NCURRPAYMKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncurrpaymkey1)
                    .HasColumnName("NCURRPAYMKEY1")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nremliq)
                    .HasColumnName("NREMLIQ")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nremocp)
                    .HasColumnName("NREMOCP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsettcred)
                    .HasColumnName("NSETTCRED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkCurrweights>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_CURRWEIGHTS");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bweight)
                    .HasColumnName("BWEIGHT")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Iregulusweight)
                    .HasColumnName("IREGULUSWEIGHT")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncurrweightskey)
                    .HasColumnName("NCURRWEIGHTSKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndelta)
                    .HasColumnName("NDELTA")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkDealers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_DEALERS");

                entity.Property(e => e.Cdealercode)
                    .IsRequired()
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealername)
                    .HasColumnName("CDEALERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicexcode)
                    .HasColumnName("CMICEXCODE")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Cquikid)
                    .HasColumnName("CQUIKID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creutercode)
                    .HasColumnName("CREUTERCODE")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPkEqproducts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_EQPRODUCTS");

                entity.Property(e => e.Bown).HasColumnName("BOWN");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cstateregistrationcode)
                    .HasColumnName("CSTATEREGISTRATIONCODE")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPkEqproducts2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_EQPRODUCTS2");

                entity.Property(e => e.Bown).HasColumnName("BOWN");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cstateregistrationcode)
                    .HasColumnName("CSTATEREGISTRATIONCODE")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPkLoropaym>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_LOROPAYM");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cacckey)
                    .HasColumnName("CACCKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdescription)
                    .HasColumnName("CDESCRIPTION")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Clabel)
                    .HasColumnName("CLABEL")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nclassified)
                    .HasColumnName("NCLASSIFIED")
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloropaymkey)
                    .HasColumnName("NLOROPAYMKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(22,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkNettdata>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_NETTDATA");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckeyminus)
                    .HasColumnName("NACCKEYMINUS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckeyplus)
                    .HasColumnName("NACCKEYPLUS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nnettdatakey)
                    .HasColumnName("NNETTDATAKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkOption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_OPTION");

                entity.Property(e => e.Bchange)
                    .HasColumnName("BCHANGE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnotexercise)
                    .HasColumnName("BNOTEXERCISE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bprint)
                    .HasColumnName("BPRINT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bprintselect)
                    .HasColumnName("BPRINTSELECT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccb)
                    .HasColumnName("CACCB")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccp)
                    .HasColumnName("CACCP")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccs)
                    .HasColumnName("CACCS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokcurr)
                    .HasColumnName("CBROKCURR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurcodeb)
                    .HasColumnName("CCURCODEB")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurcodes)
                    .HasColumnName("CCURCODES")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfield72)
                    .HasColumnName("CFIELD72")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Coptcorr)
                    .HasColumnName("COPTCORR")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Coptiontown)
                    .HasColumnName("COPTIONTOWN")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copttime)
                    .HasColumnName("COPTTIME")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpremiumcurr)
                    .HasColumnName("CPREMIUMCURR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cputcall)
                    .HasColumnName("CPUTCALL")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csb)
                    .HasColumnName("CSB")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Doptiondate)
                    .HasColumnName("DOPTIONDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dpremiumdate)
                    .HasColumnName("DPREMIUMDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dsettledate)
                    .HasColumnName("DSETTLEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbroksum)
                    .HasColumnName("NBROKSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Noptionkey)
                    .HasColumnName("NOPTIONKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npct)
                    .HasColumnName("NPCT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npremium)
                    .HasColumnName("NPREMIUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npremiumsum)
                    .HasColumnName("NPREMIUMSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nputcall)
                    .HasColumnName("NPUTCALL")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumbuy)
                    .HasColumnName("NSUMBUY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumsell)
                    .HasColumnName("NSUMSELL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkOptions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_OPTIONS");

                entity.Property(e => e.Bautodefprinter)
                    .HasColumnName("BAUTODEFPRINTER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BautodefprinterMmdp)
                    .HasColumnName("BAUTODEFPRINTER_MMDP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BautodefprinterRepo)
                    .HasColumnName("BAUTODEFPRINTER_REPO")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Brepdefprinter)
                    .HasColumnName("BREPDEFPRINTER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Breutermasync)
                    .HasColumnName("BREUTERMASYNC")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Breutermsmq)
                    .HasColumnName("BREUTERMSMQ")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cathenaexpdir)
                    .HasColumnName("CATHENAEXPDIR")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cathenaflag)
                    .HasColumnName("CATHENAFLAG")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cathenarateimportdir)
                    .HasColumnName("CATHENARATEIMPORTDIR")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookforreport)
                    .HasColumnName("CBOOKFORREPORT")
                    .HasColumnType("CLOB")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookingbranch)
                    .HasColumnName("CBOOKINGBRANCH")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccrsexportdatadirectory)
                    .HasColumnName("CCRSEXPORTDATADIRECTORY")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccrsflag)
                    .HasColumnName("CCRSFLAG")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccrsimportdatadirectory)
                    .HasColumnName("CCRSIMPORTDATADIRECTORY")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdefprinter)
                    .HasColumnName("CDEFPRINTER")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CdefprinterMmdp)
                    .HasColumnName("CDEFPRINTER_MMDP")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CdefprinterRepo)
                    .HasColumnName("CDEFPRINTER_REPO")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdeftrader)
                    .HasColumnName("CDEFTRADER")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdiasoftexpdir)
                    .HasColumnName("CDIASOFTEXPDIR")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdiasoftimpdir)
                    .HasColumnName("CDIASOFTIMPDIR")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cermsexpdir)
                    .HasColumnName("CERMSEXPDIR")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cermsimpdir)
                    .HasColumnName("CERMSIMPDIR")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmicexfxcontr)
                    .HasColumnName("CMICEXFXCONTR")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cplcalcmethod)
                    .HasColumnName("CPLCALCMETHOD")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creuinqueue)
                    .HasColumnName("CREUINQUEUE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creuoutqueue)
                    .HasColumnName("CREUOUTQUEUE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creuterimpdir)
                    .HasColumnName("CREUTERIMPDIR")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitexpdir)
                    .HasColumnName("CSUMMITEXPDIR")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitimpdir)
                    .HasColumnName("CSUMMITIMPDIR")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cvtmcurrency)
                    .HasColumnName("CVTMCURRENCY")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dlastclientimport)
                    .HasColumnName("DLASTCLIENTIMPORT")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nkey)
                    .HasColumnName("NKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloadrows)
                    .HasColumnName("NLOADROWS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Noptionskey)
                    .HasColumnName("NOPTIONSKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nswapnumber)
                    .HasColumnName("NSWAPNUMBER")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkOrgnett>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_ORGNETT");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Inettingtype)
                    .HasColumnName("INETTINGTYPE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Norgnettkey)
                    .HasColumnName("NORGNETTKEY")
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkOrgs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_ORGS");

                entity.Property(e => e.Bcrsexpeq).HasColumnName("BCRSEXPEQ");

                entity.Property(e => e.Bcrsexper).HasColumnName("BCRSEXPER");

                entity.Property(e => e.Bcrsexpfx).HasColumnName("BCRSEXPFX");

                entity.Property(e => e.Bcrsexpmm).HasColumnName("BCRSEXPMM");

                entity.Property(e => e.Bcrsexprg).HasColumnName("BCRSEXPRG");

                entity.Property(e => e.Bcrsexpss).HasColumnName("BCRSEXPSS");

                entity.Property(e => e.Bdepopayments)
                    .HasColumnName("BDEPOPAYMENTS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bisbank)
                    .HasColumnName("BISBANK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bisrazvit)
                    .HasColumnName("BISRAZVIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bmmdepart)
                    .HasColumnName("BMMDEPART")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoocp)
                    .HasColumnName("BNOOCP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoresident)
                    .HasColumnName("BNORESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bprefunding)
                    .HasColumnName("BPREFUNDING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bprincipalorbroker)
                    .HasColumnName("BPRINCIPALORBROKER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cathenacode)
                    .HasColumnName("CATHENACODE")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Cbic)
                    .HasColumnName("CBIC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokagreementeq)
                    .HasColumnName("CBROKAGREEMENTEQ")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokagreementfm)
                    .HasColumnName("CBROKAGREEMENTFM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cgridname)
                    .HasColumnName("CGRIDNAME")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Cgridtown)
                    .HasColumnName("CGRIDTOWN")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Cingcode)
                    .HasColumnName("CINGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cinn)
                    .HasColumnName("CINN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicexcode)
                    .HasColumnName("CMICEXCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicexid)
                    .HasColumnName("CMICEXID")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .IsRequired()
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Corgtypecode)
                    .HasColumnName("CORGTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cprefsettcurr)
                    .HasColumnName("CPREFSETTCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Crequisites)
                    .HasColumnName("CREQUISITES")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Creutercode)
                    .HasColumnName("CREUTERCODE")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Crusname)
                    .HasColumnName("CRUSNAME")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescredit)
                    .HasColumnName("CSALESCREDIT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalesmanagerid)
                    .HasColumnName("CSALESMANAGERID")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitcode)
                    .HasColumnName("CSUMMITCODE")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Cvtmgroup)
                    .HasColumnName("CVTMGROUP")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Icrsexportallow)
                    .HasColumnName("ICRSEXPORTALLOW")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccountmanagerid)
                    .HasColumnName("NACCOUNTMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nathenaclassified)
                    .HasColumnName("NATHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncombps)
                    .HasColumnName("NCOMBPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncountryid)
                    .HasColumnName("NCOUNTRYID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nportionfm)
                    .HasColumnName("NPORTIONFM")
                    .HasColumnType("NUMBER(3,2)");

                entity.Property(e => e.Npriority)
                    .HasColumnName("NPRIORITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesmanagerid)
                    .HasColumnName("NSALESMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsegmentationid)
                    .HasColumnName("NSEGMENTATIONID")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPkPkBrief>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_PK_BRIEF");

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VPkQuikclasses>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_QUIKCLASSES");

                entity.Property(e => e.Bautodiasoftexport)
                    .HasColumnName("BAUTODIASOFTEXPORT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Brepowithcc)
                    .HasColumnName("BREPOWITHCC")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclasscode)
                    .HasColumnName("CCLASSCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclassname)
                    .HasColumnName("CCLASSNAME")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfavoritcode)
                    .HasColumnName("CFAVORITCODE")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cissuertype)
                    .HasColumnName("CISSUERTYPE")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ibrokermc)
                    .HasColumnName("IBROKERMC")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfavoritcode)
                    .HasColumnName("NFAVORITCODE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nissuertype)
                    .HasColumnName("NISSUERTYPE")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nquikclasseskey)
                    .HasColumnName("NQUIKCLASSESKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkQuikclassesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_QUIKCLASSES_DETAIL");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccountmask)
                    .HasColumnName("CACCOUNTMASK")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cfavoritcode)
                    .HasColumnName("CFAVORITCODE")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cinfo)
                    .HasColumnName("CINFO")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfavoritcode)
                    .HasColumnName("NFAVORITCODE")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NquikclassesDetailkey)
                    .HasColumnName("NQUIKCLASSES_DETAILKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkRacepaym>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_RACEPAYM");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cchannel)
                    .HasColumnName("CCHANNEL")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdescription)
                    .HasColumnName("CDESCRIPTION")
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpayer)
                    .HasColumnName("CPAYER")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cracenumber)
                    .HasColumnName("CRACENUMBER")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creciver)
                    .HasColumnName("CRECIVER")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nracepaymkey)
                    .HasColumnName("NRACEPAYMKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(22,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkRatecbrf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_RATECBRF");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nratekey)
                    .HasColumnName("NRATEKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkRecres>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_RECRES");

                entity.Property(e => e.Bconfirmed)
                    .HasColumnName("BCONFIRMED")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bextended)
                    .HasColumnName("BEXTENDED")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bocp)
                    .HasColumnName("BOCP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccorrcode)
                    .HasColumnName("CCORRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdepartkey)
                    .HasColumnName("CDEPARTKEY")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Crecrestypecode)
                    .HasColumnName("CRECRESTYPECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrecreskey)
                    .HasColumnName("NRECRESKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkRemains>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_REMAINS");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Btrueflag)
                    .HasColumnName("BTRUEFLAG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Navail)
                    .HasColumnName("NAVAIL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncred)
                    .HasColumnName("NCRED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndeb)
                    .HasColumnName("NDEB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nremainskey)
                    .HasColumnName("NREMAINSKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nremliq)
                    .HasColumnName("NREMLIQ")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nremocp)
                    .HasColumnName("NREMOCP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsettcred)
                    .HasColumnName("NSETTCRED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkRepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_REPO");

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bcouponreinvestment)
                    .HasColumnName("BCOUPONREINVESTMENT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bdividend)
                    .HasColumnName("BDIVIDEND")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bopenpos)
                    .HasColumnName("BOPENPOS")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bsalestrade)
                    .HasColumnName("BSALESTRADE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cacckey)
                    .HasColumnName("CACCKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokagagreementfm)
                    .HasColumnName("CBROKAGAGREEMENTFM")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrname)
                    .HasColumnName("CCONTRNAME")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealername)
                    .HasColumnName("CDEALERNAME")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdownside)
                    .HasColumnName("CDOWNSIDE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cequitykey)
                    .HasColumnName("CEQUITYKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cequityticker)
                    .HasColumnName("CEQUITYTICKER")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cisin)
                    .HasColumnName("CISIN")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cisinreal)
                    .HasColumnName("CISINREAL")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creutersimportfile)
                    .HasColumnName("CREUTERSIMPORTFILE")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalesname)
                    .HasColumnName("CSALESNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csb)
                    .HasColumnName("CSB")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccomment)
                    .HasColumnName("CSECCOMMENT")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csecdesc)
                    .HasColumnName("CSECDESC")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csecuritykey)
                    .HasColumnName("CSECURITYKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csecuritytypekey)
                    .HasColumnName("CSECURITYTYPEKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettelmenttype)
                    .HasColumnName("CSETTELMENTTYPE")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementplacekey)
                    .HasColumnName("CSETTLEMENTPLACEKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctranshcurr)
                    .HasColumnName("CTRANSHCURR")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctranshkey)
                    .HasColumnName("CTRANSHKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cupside)
                    .HasColumnName("CUPSIDE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dclosedeliverydate)
                    .HasColumnName("DCLOSEDELIVERYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dclosepaymentdate)
                    .HasColumnName("DCLOSEPAYMENTDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddateofcoupon)
                    .HasColumnName("DDATEOFCOUPON")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dstartdeliverydate)
                    .HasColumnName("DSTARTDELIVERYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dstartpaymentdate)
                    .HasColumnName("DSTARTPAYMENTDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icurrweight)
                    .HasColumnName("ICURRWEIGHT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndividendsum)
                    .HasColumnName("NDIVIDENDSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndividendtax)
                    .HasColumnName("NDIVIDENDTAX")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndividentrate)
                    .HasColumnName("NDIVIDENTRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndowntrigger)
                    .HasColumnName("NDOWNTRIGGER")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nduration)
                    .HasColumnName("NDURATION")
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfxrate)
                    .HasColumnName("NFXRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nhaircut)
                    .HasColumnName("NHAIRCUT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarketprice)
                    .HasColumnName("NMARKETPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarketsum2)
                    .HasColumnName("NMARKETSUM2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Noldrepotype)
                    .HasColumnName("NOLDREPOTYPE")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice2)
                    .HasColumnName("NPRICE2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrateofreinvest)
                    .HasColumnName("NRATEOFREINVEST")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrepobase)
                    .HasColumnName("NREPOBASE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrepokey)
                    .HasColumnName("NREPOKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreporate)
                    .HasColumnName("NREPORATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsecnom)
                    .HasColumnName("NSECNOM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsecuritykey)
                    .HasColumnName("NSECURITYKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsecuritytypekey)
                    .HasColumnName("NSECURITYTYPEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsettelmenttype)
                    .HasColumnName("NSETTELMENTTYPE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsettlementplacekey)
                    .HasColumnName("NSETTLEMENTPLACEKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom2)
                    .HasColumnName("NSUMNOM2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumofreinvest)
                    .HasColumnName("NSUMOFREINVEST")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradeplace)
                    .HasColumnName("NTRADEPLACE")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nuptrigger)
                    .HasColumnName("NUPTRIGGER")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkRepoPerform>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_REPO_PERFORM");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nid)
                    .HasColumnName("NID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nqty)
                    .HasColumnName("NQTY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrepo2value)
                    .HasColumnName("NREPO2VALUE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrepoperformkey)
                    .HasColumnName("NREPOPERFORMKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkSbsec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_SBSEC");

                entity.Property(e => e.Bautoprint)
                    .HasColumnName("BAUTOPRINT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bminusport)
                    .HasColumnName("BMINUSPORT")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocurrpaym)
                    .HasColumnName("BNOCURRPAYM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnoreserv)
                    .HasColumnName("BNORESERV")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cisb)
                    .HasColumnName("CISB")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmoexdealid)
                    .HasColumnName("CMOEXDEALID")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmoexstatus)
                    .HasColumnName("CMOEXSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csec)
                    .HasColumnName("CSEC")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csetlcurr)
                    .HasColumnName("CSETLCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementkey)
                    .HasColumnName("CSETTLEMENTKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettplacekey)
                    .HasColumnName("CSETTPLACEKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradeplacekey)
                    .HasColumnName("CTRADEPLACEKEY")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctranshkey1)
                    .HasColumnName("CTRANSHKEY1")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrfulldate)
                    .HasColumnName("DCONTRFULLDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Iwaiver)
                    .HasColumnName("IWAIVER")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbrokerkey)
                    .HasColumnName("NBROKERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncounteracc)
                    .HasColumnName("NCOUNTERACC")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfullamount)
                    .HasColumnName("NFULLAMOUNT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarkup)
                    .HasColumnName("NMARKUP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsbseckey)
                    .HasColumnName("NSBSECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsettlementkey)
                    .HasColumnName("NSETTLEMENTKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsettplacekey)
                    .HasColumnName("NSETTPLACEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumput)
                    .HasColumnName("NSUMPUT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradeplacekey)
                    .HasColumnName("NTRADEPLACEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntscommission)
                    .HasColumnName("NTSCOMMISSION")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkSecacc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_SECACC");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Cacceq)
                    .HasColumnName("CACCEQ")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicexid)
                    .HasColumnName("CMICEXID")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csecacccode)
                    .HasColumnName("CSECACCCODE")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncombps)
                    .HasColumnName("NCOMBPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomrepo)
                    .HasColumnName("NCOMREPO")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPkSecprice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_SECPRICE");

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpricetype)
                    .HasColumnName("CPRICETYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csourcecode)
                    .HasColumnName("CSOURCECODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nchangeprice)
                    .HasColumnName("NCHANGEPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncountvol)
                    .HasColumnName("NCOUNTVOL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npricebid)
                    .HasColumnName("NPRICEBID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npricebuymax)
                    .HasColumnName("NPRICEBUYMAX")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npriceclose)
                    .HasColumnName("NPRICECLOSE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npricedealmax)
                    .HasColumnName("NPRICEDEALMAX")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npricedealmin)
                    .HasColumnName("NPRICEDEALMIN")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npriceoffer)
                    .HasColumnName("NPRICEOFFER")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npriceoffermin)
                    .HasColumnName("NPRICEOFFERMIN")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npriceopen)
                    .HasColumnName("NPRICEOPEN")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Npvbp)
                    .HasColumnName("NPVBP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsecpricekey)
                    .HasColumnName("NSECPRICEKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nvol)
                    .HasColumnName("NVOL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nytmclose)
                    .HasColumnName("NYTMCLOSE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nytmirr)
                    .HasColumnName("NYTMIRR")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nytmour)
                    .HasColumnName("NYTMOUR")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkSecurities>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_SECURITIES");

                entity.Property(e => e.Bsubfederal)
                    .HasColumnName("BSUBFEDERAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cissuer)
                    .IsRequired()
                    .HasColumnName("CISSUER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csecname)
                    .IsRequired()
                    .HasColumnName("CSECNAME")
                    .HasColumnType("CHAR(18)");

                entity.Property(e => e.Csposcode)
                    .HasColumnName("CSPOSCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Icouponyear)
                    .HasColumnName("ICOUPONYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Idaystodelivery)
                    .HasColumnName("IDAYSTODELIVERY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ikupbase)
                    .HasColumnName("IKUPBASE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPkTranshes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_TRANSHES");

                entity.Property(e => e.Bcorp)
                    .HasColumnName("BCORP")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BendflagTmp)
                    .HasColumnName("BENDFLAG_TMP")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bhand)
                    .HasColumnName("BHAND")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binclirr)
                    .HasColumnName("BINCLIRR")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bvar)
                    .HasColumnName("BVAR")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclassif)
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Choldclassif)
                    .HasColumnName("CHOLDCLASSIF")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cissuecode)
                    .HasColumnName("CISSUECODE")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmicextrcode)
                    .HasColumnName("CMICEXTRCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cregnumber)
                    .HasColumnName("CREGNUMBER")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DactualdateTmp)
                    .HasColumnName("DACTUALDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dafterdate)
                    .HasColumnName("DAFTERDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DcreatedateTmp)
                    .HasColumnName("DCREATEDATE_TMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dfirsttradedate)
                    .HasColumnName("DFIRSTTRADEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icouponyear)
                    .HasColumnName("ICOUPONYEAR")
                    .HasColumnType("NUMBER(38)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Irestypenumber)
                    .HasColumnName("IRESTYPENUMBER")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Naccesscontrolfield)
                    .HasColumnName("NACCESSCONTROLFIELD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nissuevolume)
                    .HasColumnName("NISSUEVOLUME")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsecnom)
                    .HasColumnName("NSECNOM")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsinkfactor)
                    .HasColumnName("NSINKFACTOR")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nspecprice)
                    .HasColumnName("NSPECPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntt)
                    .HasColumnName("NTT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NuserkeyTmp)
                    .HasColumnName("NUSERKEY_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NvernumberTmp)
                    .HasColumnName("NVERNUMBER_TMP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VPkTranshes2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_TRANSHES2");

                entity.Property(e => e.Bcorp)
                    .HasColumnName("BCORP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bhand)
                    .HasColumnName("BHAND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binclirr)
                    .HasColumnName("BINCLIRR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bvar)
                    .HasColumnName("BVAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cclassif)
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Choldclassif)
                    .HasColumnName("CHOLDCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cmicextrcode)
                    .HasColumnName("CMICEXTRCODE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dafterdate)
                    .HasColumnName("DAFTERDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dfirsttradedate)
                    .HasColumnName("DFIRSTTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icouponyear)
                    .HasColumnName("ICOUPONYEAR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Irestypenumber)
                    .HasColumnName("IRESTYPENUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Nissuevolume)
                    .HasColumnName("NISSUEVOLUME")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsecnom)
                    .HasColumnName("NSECNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nspecprice)
                    .HasColumnName("NSPECPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPkVtm1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PK_VTM1");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cisocode)
                    .HasColumnName("CISOCODE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Itype).HasColumnName("ITYPE");

                entity.Property(e => e.Ncodekey)
                    .HasColumnName("NCODEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvtm1key)
                    .HasColumnName("NVTM1KEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PL");

                entity.Property(e => e.Criskgroup)
                    .IsRequired()
                    .HasColumnName("CRISKGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .IsRequired()
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndtdrur)
                    .HasColumnName("NDTDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndtdusd)
                    .HasColumnName("NDTDUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtdrur)
                    .HasColumnName("NMTDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtdruryes)
                    .HasColumnName("NMTDRURYES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtdusd)
                    .HasColumnName("NMTDUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtdusdyst)
                    .HasColumnName("NMTDUSDYST")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytdrur)
                    .HasColumnName("NYTDRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytdusd)
                    .HasColumnName("NYTDUSD")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPlQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PL_QUERY");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Coupon)
                    .HasColumnName("COUPON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Intrday)
                    .HasColumnName("INTRDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Marketprice)
                    .HasColumnName("MARKETPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mtm)
                    .HasColumnName("MTM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PAndL)
                    .HasColumnName("P_AND_L")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Position0)
                    .HasColumnName("POSITION0")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VPositionreeval>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_POSITIONREEVAL");

                entity.Property(e => e.Ccurrcode)
                    .IsRequired()
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nbondsres)
                    .HasColumnName("NBONDSRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuy)
                    .HasColumnName("NBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncash)
                    .HasColumnName("NCASH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclient)
                    .HasColumnName("NCLIENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclientonly)
                    .HasColumnName("NCLIENTONLY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncorrect)
                    .HasColumnName("NCORRECT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncreditcorr)
                    .HasColumnName("NCREDITCORR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepog)
                    .HasColumnName("NDEPOG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndepot)
                    .HasColumnName("NDEPOT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfnd)
                    .HasColumnName("NFND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfund)
                    .HasColumnName("NFUND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngaz)
                    .HasColumnName("NGAZ")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnostro)
                    .HasColumnName("NNOSTRO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnostroonly)
                    .HasColumnName("NNOSTROONLY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nother)
                    .HasColumnName("NOTHER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposfx)
                    .HasColumnName("NPOSFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposfxrev)
                    .HasColumnName("NPOSFXREV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposrrev)
                    .HasColumnName("NPOSRREV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nposval)
                    .HasColumnName("NPOSVAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nratetod)
                    .HasColumnName("NRATETOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nratetodrur)
                    .HasColumnName("NRATETODRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrateyes)
                    .HasColumnName("NRATEYES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrateyesrur)
                    .HasColumnName("NRATEYESRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsell)
                    .HasColumnName("NSELL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRates2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RATES2");

                entity.Property(e => e.Ccurrcode1)
                    .HasColumnName("CCURRCODE1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcode2)
                    .HasColumnName("CCURRCODE2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncbrate1)
                    .HasColumnName("NCBRATE1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrate2)
                    .HasColumnName("NCBRATE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrateold1)
                    .HasColumnName("NCBRATEOLD1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncbrateold2)
                    .HasColumnName("NCBRATEOLD2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npresrate)
                    .HasColumnName("NPRESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrrurusdrate)
                    .HasColumnName("NRRURUSDRATE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRegulusDepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REGULUS_DEPO");

                entity.Property(e => e.ActionTi)
                    .HasColumnName("ACTION_TI")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AmortizingtypeLi)
                    .HasColumnName("AMORTIZINGTYPE_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.AuditChangetypeA)
                    .HasColumnName("AUDIT_CHANGETYPE_A_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.AuditDchangedateA)
                    .HasColumnName("AUDIT_DCHANGEDATE_A_")
                    .HasColumnType("DATE");

                entity.Property(e => e.BackofficebookTi)
                    .HasColumnName("BACKOFFICEBOOK_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.BasisconvertionLi)
                    .HasColumnName("BASISCONVERTION_LI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BpvattimeofthedealSifsc)
                    .HasColumnName("BPVATTIMEOFTHEDEAL_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.BpvattimeofthedealSifscN)
                    .HasColumnName("BPVATTIMEOFTHEDEAL_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.BpvcurrencycodeSifsc)
                    .HasColumnName("BPVCURRENCYCODE_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.CdealtableK)
                    .HasColumnName("CDEALTABLE_K_")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.CounterpartyCi)
                    .HasColumnName("COUNTERPARTY_CI")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.CurrencypairTi)
                    .HasColumnName("CURRENCYPAIR_TI")
                    .HasColumnType("CHAR(6)");

                entity.Property(e => e.FoclientcountryCi)
                    .HasColumnName("FOCLIENTCOUNTRY_CI")
                    .IsUnicode(false);

                entity.Property(e => e.FoclientnameCi)
                    .HasColumnName("FOCLIENTNAME_CI")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FocounterpartyidCi)
                    .HasColumnName("FOCOUNTERPARTYID_CI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FocounterpartysystemCi)
                    .HasColumnName("FOCOUNTERPARTYSYSTEM_CI")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.FodealidTi)
                    .HasColumnName("FODEALID_TI")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.FodealidversionTi)
                    .HasColumnName("FODEALIDVERSION_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.FodealidversionTiN)
                    .HasColumnName("FODEALIDVERSION_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.FoproducttypeTi)
                    .HasColumnName("FOPRODUCTTYPE_TI")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.ForwardpriceTi)
                    .HasColumnName("FORWARDPRICE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.ForwardpriceTiN)
                    .HasColumnName("FORWARDPRICE_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.FrontofficebookTi)
                    .HasColumnName("FRONTOFFICEBOOK_TI")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GrididCi)
                    .HasColumnName("GRIDID_CI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.HbospreadamountSifsc)
                    .HasColumnName("HBOSPREADAMOUNT_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.HbospreadamountSifscN)
                    .HasColumnName("HBOSPREADAMOUNT_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.HbospreadcyrrencySifsc)
                    .HasColumnName("HBOSPREADCYRRENCY_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.HbospreadpipsSifsc)
                    .HasColumnName("HBOSPREADPIPS_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.HbospreadpipsSifscN)
                    .HasColumnName("HBOSPREADPIPS_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.InterestLi)
                    .HasColumnName("INTEREST_LI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.InterestLiN)
                    .HasColumnName("INTEREST_LI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.InterestbasisLi)
                    .HasColumnName("INTERESTBASIS_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.InterestspreadLi)
                    .HasColumnName("INTERESTSPREAD_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.InterestspreadLiN)
                    .HasColumnName("INTERESTSPREAD_LI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.InteresttypeLi)
                    .HasColumnName("INTERESTTYPE_LI")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.IsinccodeTi)
                    .HasColumnName("ISINCCODE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.KeyK)
                    .HasColumnName("KEY_K_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.LegnumberLi)
                    .HasColumnName("LEGNUMBER_LI")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LegtypeLi)
                    .HasColumnName("LEGTYPE_LI")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LocationofsourcesystemTi)
                    .HasColumnName("LOCATIONOFSOURCESYSTEM_TI")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.MarcupamountcurrencySifsc)
                    .HasColumnName("MARCUPAMOUNTCURRENCY_SIFSC")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.MarcuppipsSifsc)
                    .HasColumnName("MARCUPPIPS_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.MarcuppipsSifscN)
                    .HasColumnName("MARCUPPIPS_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.MarketpricePR)
                    .HasColumnName("MARKETPRICE_P_R_")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MarkupamountSifsc)
                    .HasColumnName("MARKUPAMOUNT_SIFSC")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MarkupamountSifscN)
                    .HasColumnName("MARKUPAMOUNT_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NominalamountLi)
                    .HasColumnName("NOMINALAMOUNT_LI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NominalamountLiN)
                    .HasColumnName("NOMINALAMOUNT_LI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NominalamountcurrencyLi)
                    .HasColumnName("NOMINALAMOUNTCURRENCY_LI")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.OptiontypeTi)
                    .HasColumnName("OPTIONTYPE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PackagedealidTi)
                    .HasColumnName("PACKAGEDEALID_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PackagedealprincipalTi)
                    .HasColumnName("PACKAGEDEALPRINCIPAL_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PackagedealstructurerTi)
                    .HasColumnName("PACKAGEDEALSTRUCTURER_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumamountP)
                    .HasColumnName("PREMIUMAMOUNT_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumamountPN)
                    .HasColumnName("PREMIUMAMOUNT_P_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PremiummountcurrencyP)
                    .HasColumnName("PREMIUMMOUNTCURRENCY_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumpercentagP)
                    .HasColumnName("PREMIUMPERCENTAG_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumpercentagPN)
                    .HasColumnName("PREMIUMPERCENTAG_P_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PremiumsettlementdateP)
                    .HasColumnName("PREMIUMSETTLEMENTDATE_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumtypeP)
                    .HasColumnName("PREMIUMTYPE_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PricecontributionlacationsTi)
                    .HasColumnName("PRICECONTRIBUTIONLACATIONS_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PricespotpriceTi)
                    .HasColumnName("PRICESPOTPRICE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PricespotpriceTiN)
                    .HasColumnName("PRICESPOTPRICE_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PrimaryfeesSifsc)
                    .HasColumnName("PRIMARYFEES_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PrimaryfeesSifscN)
                    .HasColumnName("PRIMARYFEES_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PrimaryfeescurrencySifsc)
                    .HasColumnName("PRIMARYFEESCURRENCY_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.RatePR)
                    .HasColumnName("RATE_P_R_")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.RatewofxcomPR)
                    .HasColumnName("RATEWOFXCOM_P_R_")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ReferencedfodealidTi)
                    .HasColumnName("REFERENCEDFODEALID_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.RegulusproducttypeTi)
                    .HasColumnName("REGULUSPRODUCTTYPE_TI")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.SalescreditcurrPR)
                    .HasColumnName("SALESCREDITCURR_P_R_")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.SalespersonTi)
                    .HasColumnName("SALESPERSON_TI")
                    .IsUnicode(false);

                entity.Property(e => e.SourcesystemTi)
                    .HasColumnName("SOURCESYSTEM_TI")
                    .HasColumnType("CHAR(7)");

                entity.Property(e => e.SpgpersonTi)
                    .HasColumnName("SPGPERSON_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.TradedateTi)
                    .HasColumnName("TRADEDATE_TI")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TradedateTiD)
                    .HasColumnName("TRADEDATE_TI_D_")
                    .HasColumnType("DATE");

                entity.Property(e => e.TraderTi)
                    .HasColumnName("TRADER_TI")
                    .IsUnicode(false);

                entity.Property(e => e.UnderlyingissuerTi)
                    .HasColumnName("UNDERLYINGISSUER_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.UniquefodealidTi)
                    .HasColumnName("UNIQUEFODEALID_TI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.UvnominalamountTi)
                    .HasColumnName("UVNOMINALAMOUNT_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.UvnominalamountTiN)
                    .HasColumnName("UVNOMINALAMOUNT_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.UvnominalamountcurrTi)
                    .HasColumnName("UVNOMINALAMOUNTCURR_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.ValuedateendTi)
                    .HasColumnName("VALUEDATEEND_TI")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ValuedatestartTi)
                    .HasColumnName("VALUEDATESTART_TI")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ViewK)
                    .HasColumnName("VIEW_K_")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRegulusForex1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REGULUS_FOREX1");

                entity.Property(e => e.ActionTi)
                    .HasColumnName("ACTION_TI")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AmortizingtypeLi)
                    .HasColumnName("AMORTIZINGTYPE_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.AuditChangetypeA)
                    .HasColumnName("AUDIT_CHANGETYPE_A_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.AuditDchangedateA)
                    .HasColumnName("AUDIT_DCHANGEDATE_A_")
                    .HasColumnType("DATE");

                entity.Property(e => e.BackofficebookTi)
                    .HasColumnName("BACKOFFICEBOOK_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.BasisconvertionLi)
                    .HasColumnName("BASISCONVERTION_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.BpvattimeofthedealSifsc)
                    .HasColumnName("BPVATTIMEOFTHEDEAL_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.BpvattimeofthedealSifscN)
                    .HasColumnName("BPVATTIMEOFTHEDEAL_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.BpvcurrencycodeSifsc)
                    .HasColumnName("BPVCURRENCYCODE_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.CdealtableK)
                    .HasColumnName("CDEALTABLE_K_")
                    .HasColumnType("CHAR(5)");

                entity.Property(e => e.CounterpartyCi)
                    .HasColumnName("COUNTERPARTY_CI")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.CurrencypairTi)
                    .HasColumnName("CURRENCYPAIR_TI")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.FoclientcountryCi)
                    .HasColumnName("FOCLIENTCOUNTRY_CI")
                    .IsUnicode(false);

                entity.Property(e => e.FoclientnameCi)
                    .HasColumnName("FOCLIENTNAME_CI")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FocounterpartyidCi)
                    .HasColumnName("FOCOUNTERPARTYID_CI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FocounterpartysystemCi)
                    .HasColumnName("FOCOUNTERPARTYSYSTEM_CI")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.FodealidTi)
                    .HasColumnName("FODEALID_TI")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.FodealidversionTi)
                    .HasColumnName("FODEALIDVERSION_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.FodealidversionTiN)
                    .HasColumnName("FODEALIDVERSION_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.FoproducttypeTi)
                    .HasColumnName("FOPRODUCTTYPE_TI")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ForwardpriceTi)
                    .HasColumnName("FORWARDPRICE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.ForwardpriceTiN)
                    .HasColumnName("FORWARDPRICE_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.FrontofficebookTi)
                    .HasColumnName("FRONTOFFICEBOOK_TI")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GrididCi)
                    .HasColumnName("GRIDID_CI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.HbospreadamountSifsc)
                    .HasColumnName("HBOSPREADAMOUNT_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.HbospreadamountSifscN)
                    .HasColumnName("HBOSPREADAMOUNT_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.HbospreadcyrrencySifsc)
                    .HasColumnName("HBOSPREADCYRRENCY_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.HbospreadpipsSifsc)
                    .HasColumnName("HBOSPREADPIPS_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.HbospreadpipsSifscN)
                    .HasColumnName("HBOSPREADPIPS_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.InterestLi)
                    .HasColumnName("INTEREST_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.InterestLiN)
                    .HasColumnName("INTEREST_LI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.InterestbasisLi)
                    .HasColumnName("INTERESTBASIS_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.InterestspreadLi)
                    .HasColumnName("INTERESTSPREAD_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.InterestspreadLiN)
                    .HasColumnName("INTERESTSPREAD_LI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.InteresttypeLi)
                    .HasColumnName("INTERESTTYPE_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.IsinccodeTi)
                    .HasColumnName("ISINCCODE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.KeyK)
                    .HasColumnName("KEY_K_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.LegnumberLi)
                    .HasColumnName("LEGNUMBER_LI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.LegtypeLi)
                    .HasColumnName("LEGTYPE_LI")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.LocationofsourcesystemTi)
                    .HasColumnName("LOCATIONOFSOURCESYSTEM_TI")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.MarcupamountcurrencySifsc)
                    .HasColumnName("MARCUPAMOUNTCURRENCY_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.MarcuppipsSifsc)
                    .HasColumnName("MARCUPPIPS_SIFSC")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MarcuppipsSifscN)
                    .HasColumnName("MARCUPPIPS_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.MarketpricePR)
                    .HasColumnName("MARKETPRICE_P_R_")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MarkupamountSifsc)
                    .HasColumnName("MARKUPAMOUNT_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.MarkupamountSifscN)
                    .HasColumnName("MARKUPAMOUNT_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NominalamountLi)
                    .HasColumnName("NOMINALAMOUNT_LI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NominalamountLiN)
                    .HasColumnName("NOMINALAMOUNT_LI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NominalamountcurrencyLi)
                    .HasColumnName("NOMINALAMOUNTCURRENCY_LI")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.OptiontypeTi)
                    .HasColumnName("OPTIONTYPE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PackagedealidTi)
                    .HasColumnName("PACKAGEDEALID_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PackagedealprincipalTi)
                    .HasColumnName("PACKAGEDEALPRINCIPAL_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PackagedealstructurerTi)
                    .HasColumnName("PACKAGEDEALSTRUCTURER_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumamountP)
                    .HasColumnName("PREMIUMAMOUNT_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumamountPN)
                    .HasColumnName("PREMIUMAMOUNT_P_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PremiummountcurrencyP)
                    .HasColumnName("PREMIUMMOUNTCURRENCY_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumpercentagP)
                    .HasColumnName("PREMIUMPERCENTAG_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumpercentagPN)
                    .HasColumnName("PREMIUMPERCENTAG_P_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PremiumsettlementdateP)
                    .HasColumnName("PREMIUMSETTLEMENTDATE_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumtypeP)
                    .HasColumnName("PREMIUMTYPE_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PricecontributionlacationsTi)
                    .HasColumnName("PRICECONTRIBUTIONLACATIONS_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PricespotpriceTi)
                    .HasColumnName("PRICESPOTPRICE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PricespotpriceTiN)
                    .HasColumnName("PRICESPOTPRICE_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PrimaryfeesSifsc)
                    .HasColumnName("PRIMARYFEES_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PrimaryfeesSifscN)
                    .HasColumnName("PRIMARYFEES_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PrimaryfeescurrencySifsc)
                    .HasColumnName("PRIMARYFEESCURRENCY_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.RatePR)
                    .HasColumnName("RATE_P_R_")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.RatewofxcomPR)
                    .HasColumnName("RATEWOFXCOM_P_R_")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ReferencedfodealidTi)
                    .HasColumnName("REFERENCEDFODEALID_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.RegulusproducttypeTi)
                    .HasColumnName("REGULUSPRODUCTTYPE_TI")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.SalescreditcurrPR)
                    .HasColumnName("SALESCREDITCURR_P_R_")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SalespersonTi)
                    .HasColumnName("SALESPERSON_TI")
                    .IsUnicode(false);

                entity.Property(e => e.SourcesystemTi)
                    .HasColumnName("SOURCESYSTEM_TI")
                    .HasColumnType("CHAR(7)");

                entity.Property(e => e.SpgpersonTi)
                    .HasColumnName("SPGPERSON_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.TradedateTi)
                    .HasColumnName("TRADEDATE_TI")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TradedateTiD)
                    .HasColumnName("TRADEDATE_TI_D_")
                    .HasColumnType("DATE");

                entity.Property(e => e.TraderTi)
                    .HasColumnName("TRADER_TI")
                    .IsUnicode(false);

                entity.Property(e => e.UnderlyingissuerTi)
                    .HasColumnName("UNDERLYINGISSUER_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.UniquefodealidTi)
                    .HasColumnName("UNIQUEFODEALID_TI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.UvnominalamountTi)
                    .HasColumnName("UVNOMINALAMOUNT_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.UvnominalamountTiN)
                    .HasColumnName("UVNOMINALAMOUNT_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.UvnominalamountcurrTi)
                    .HasColumnName("UVNOMINALAMOUNTCURR_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.ValuedateendTi)
                    .HasColumnName("VALUEDATEEND_TI")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ValuedatestartTi)
                    .HasColumnName("VALUEDATESTART_TI")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ViewK)
                    .HasColumnName("VIEW_K_")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRegulusForex2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REGULUS_FOREX2");

                entity.Property(e => e.ActionTi)
                    .HasColumnName("ACTION_TI")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AmortizingtypeLi)
                    .HasColumnName("AMORTIZINGTYPE_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.AuditChangetypeA)
                    .HasColumnName("AUDIT_CHANGETYPE_A_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.AuditDchangedateA)
                    .HasColumnName("AUDIT_DCHANGEDATE_A_")
                    .HasColumnType("DATE");

                entity.Property(e => e.BackofficebookTi)
                    .HasColumnName("BACKOFFICEBOOK_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.BasisconvertionLi)
                    .HasColumnName("BASISCONVERTION_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.BpvattimeofthedealSifsc)
                    .HasColumnName("BPVATTIMEOFTHEDEAL_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.BpvattimeofthedealSifscN)
                    .HasColumnName("BPVATTIMEOFTHEDEAL_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.BpvcurrencycodeSifsc)
                    .HasColumnName("BPVCURRENCYCODE_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.CdealtableK)
                    .HasColumnName("CDEALTABLE_K_")
                    .HasColumnType("CHAR(5)");

                entity.Property(e => e.CounterpartyCi)
                    .HasColumnName("COUNTERPARTY_CI")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.CurrencypairTi)
                    .HasColumnName("CURRENCYPAIR_TI")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.FoclientcountryCi)
                    .HasColumnName("FOCLIENTCOUNTRY_CI")
                    .IsUnicode(false);

                entity.Property(e => e.FoclientnameCi)
                    .HasColumnName("FOCLIENTNAME_CI")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FocounterpartyidCi)
                    .HasColumnName("FOCOUNTERPARTYID_CI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FocounterpartysystemCi)
                    .HasColumnName("FOCOUNTERPARTYSYSTEM_CI")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.FodealidTi)
                    .HasColumnName("FODEALID_TI")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.FodealidversionTi)
                    .HasColumnName("FODEALIDVERSION_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.FodealidversionTiN)
                    .HasColumnName("FODEALIDVERSION_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.FoproducttypeTi)
                    .HasColumnName("FOPRODUCTTYPE_TI")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ForwardpriceTi)
                    .HasColumnName("FORWARDPRICE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.ForwardpriceTiN)
                    .HasColumnName("FORWARDPRICE_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.FrontofficebookTi)
                    .HasColumnName("FRONTOFFICEBOOK_TI")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GrididCi)
                    .HasColumnName("GRIDID_CI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.HbospreadamountSifsc)
                    .HasColumnName("HBOSPREADAMOUNT_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.HbospreadamountSifscN)
                    .HasColumnName("HBOSPREADAMOUNT_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.HbospreadcyrrencySifsc)
                    .HasColumnName("HBOSPREADCYRRENCY_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.HbospreadpipsSifsc)
                    .HasColumnName("HBOSPREADPIPS_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.HbospreadpipsSifscN)
                    .HasColumnName("HBOSPREADPIPS_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.InterestLi)
                    .HasColumnName("INTEREST_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.InterestLiN)
                    .HasColumnName("INTEREST_LI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.InterestbasisLi)
                    .HasColumnName("INTERESTBASIS_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.InterestspreadLi)
                    .HasColumnName("INTERESTSPREAD_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.InterestspreadLiN)
                    .HasColumnName("INTERESTSPREAD_LI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.InteresttypeLi)
                    .HasColumnName("INTERESTTYPE_LI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.IsinccodeTi)
                    .HasColumnName("ISINCCODE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.KeyK)
                    .HasColumnName("KEY_K_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.LegnumberLi)
                    .HasColumnName("LEGNUMBER_LI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.LegtypeLi)
                    .HasColumnName("LEGTYPE_LI")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.LocationofsourcesystemTi)
                    .HasColumnName("LOCATIONOFSOURCESYSTEM_TI")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.MarcupamountcurrencySifsc)
                    .HasColumnName("MARCUPAMOUNTCURRENCY_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.MarcuppipsSifsc)
                    .HasColumnName("MARCUPPIPS_SIFSC")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MarcuppipsSifscN)
                    .HasColumnName("MARCUPPIPS_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.MarketpricePR)
                    .HasColumnName("MARKETPRICE_P_R_")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MarkupamountSifsc)
                    .HasColumnName("MARKUPAMOUNT_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.MarkupamountSifscN)
                    .HasColumnName("MARKUPAMOUNT_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NominalamountLi)
                    .HasColumnName("NOMINALAMOUNT_LI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NominalamountLiN)
                    .HasColumnName("NOMINALAMOUNT_LI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NominalamountcurrencyLi)
                    .HasColumnName("NOMINALAMOUNTCURRENCY_LI")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.OptiontypeTi)
                    .HasColumnName("OPTIONTYPE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PackagedealidTi)
                    .HasColumnName("PACKAGEDEALID_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PackagedealprincipalTi)
                    .HasColumnName("PACKAGEDEALPRINCIPAL_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PackagedealstructurerTi)
                    .HasColumnName("PACKAGEDEALSTRUCTURER_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumamountP)
                    .HasColumnName("PREMIUMAMOUNT_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumamountPN)
                    .HasColumnName("PREMIUMAMOUNT_P_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PremiummountcurrencyP)
                    .HasColumnName("PREMIUMMOUNTCURRENCY_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumpercentagP)
                    .HasColumnName("PREMIUMPERCENTAG_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumpercentagPN)
                    .HasColumnName("PREMIUMPERCENTAG_P_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PremiumsettlementdateP)
                    .HasColumnName("PREMIUMSETTLEMENTDATE_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PremiumtypeP)
                    .HasColumnName("PREMIUMTYPE_P")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PricecontributionlacationsTi)
                    .HasColumnName("PRICECONTRIBUTIONLACATIONS_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PricespotpriceTi)
                    .HasColumnName("PRICESPOTPRICE_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PricespotpriceTiN)
                    .HasColumnName("PRICESPOTPRICE_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PrimaryfeesSifsc)
                    .HasColumnName("PRIMARYFEES_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.PrimaryfeesSifscN)
                    .HasColumnName("PRIMARYFEES_SIFSC_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PrimaryfeescurrencySifsc)
                    .HasColumnName("PRIMARYFEESCURRENCY_SIFSC")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.RatePR)
                    .HasColumnName("RATE_P_R_")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.RatewofxcomPR)
                    .HasColumnName("RATEWOFXCOM_P_R_")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ReferencedfodealidTi)
                    .HasColumnName("REFERENCEDFODEALID_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.RegulusproducttypeTi)
                    .HasColumnName("REGULUSPRODUCTTYPE_TI")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.SalescreditcurrPR)
                    .HasColumnName("SALESCREDITCURR_P_R_")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SalespersonTi)
                    .HasColumnName("SALESPERSON_TI")
                    .IsUnicode(false);

                entity.Property(e => e.SourcesystemTi)
                    .HasColumnName("SOURCESYSTEM_TI")
                    .HasColumnType("CHAR(7)");

                entity.Property(e => e.SpgpersonTi)
                    .HasColumnName("SPGPERSON_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.TradedateTi)
                    .HasColumnName("TRADEDATE_TI")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TradedateTiD)
                    .HasColumnName("TRADEDATE_TI_D_")
                    .HasColumnType("DATE");

                entity.Property(e => e.TraderTi)
                    .HasColumnName("TRADER_TI")
                    .IsUnicode(false);

                entity.Property(e => e.UnderlyingissuerTi)
                    .HasColumnName("UNDERLYINGISSUER_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.UniquefodealidTi)
                    .HasColumnName("UNIQUEFODEALID_TI")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.UvnominalamountTi)
                    .HasColumnName("UVNOMINALAMOUNT_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.UvnominalamountTiN)
                    .HasColumnName("UVNOMINALAMOUNT_TI_N_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.UvnominalamountcurrTi)
                    .HasColumnName("UVNOMINALAMOUNTCURR_TI")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.ValuedateendTi)
                    .HasColumnName("VALUEDATEEND_TI")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ValuedatestartTi)
                    .HasColumnName("VALUEDATESTART_TI")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ViewK)
                    .HasColumnName("VIEW_K_")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRemrurliq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REMRURLIQ");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.N812micex)
                    .HasColumnName("N812MICEX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncash)
                    .HasColumnName("NCASH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncorrection)
                    .HasColumnName("NCORRECTION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndmicex)
                    .HasColumnName("NDMICEX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfull)
                    .HasColumnName("NFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Noperu)
                    .HasColumnName("NOPERU")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsuspensel)
                    .HasColumnName("NSUSPENSEL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REPO");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER(20)");
            });

            modelBuilder.Entity<VRepoProv1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REPO_PROV_1");

                entity.Property(e => e.Base)
                    .HasColumnName("BASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cheaderreport)
                    .HasColumnName("CHEADERREPORT")
                    .HasMaxLength(74)
                    .IsUnicode(false);

                entity.Property(e => e.CupPcnt)
                    .HasColumnName("CUP_PCNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.CupPeriod)
                    .HasColumnName("CUP_PERIOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dat1)
                    .HasColumnName("DAT1")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dat2)
                    .HasColumnName("DAT2")
                    .HasColumnType("DATE");

                entity.Property(e => e.DatRep)
                    .HasColumnName("DAT_REP")
                    .HasColumnType("DATE");

                entity.Property(e => e.EndReport)
                    .HasColumnName("END_REPORT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Interest1)
                    .HasColumnName("INTEREST1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Interest2)
                    .HasColumnName("INTEREST2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N).HasColumnType("NUMBER");

                entity.Property(e => e.N1Dt3010247404)
                    .HasColumnName("N1_DT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1Dt50118)
                    .HasColumnName("N1_DT_50118")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1Dt501185)
                    .HasColumnName("N1_DT_50118_5")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1Kt501)
                    .HasColumnName("N1_KT_501")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1Kt5015)
                    .HasColumnName("N1_KT_501_5")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1KtPps)
                    .HasColumnName("N1_KT_PPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt501185)
                    .HasColumnName("N2_DT_50118_5")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt5012170607)
                    .HasColumnName("N2_DT_50121_70607")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt70606)
                    .HasColumnName("N2_DT_70606")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Kt47426)
                    .HasColumnName("N2_KT_47426")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Kt70601)
                    .HasColumnName("N2_KT_70601")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Kt7060250120)
                    .HasColumnName("N2_KT_70602_50120")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt47426)
                    .HasColumnName("N3_DT_47426")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt501)
                    .HasColumnName("N3_DT_501")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt501185)
                    .HasColumnName("N3_DT_50118_5")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt5012170607)
                    .HasColumnName("N3_DT_50121_70607")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt5015)
                    .HasColumnName("N3_DT_501_5")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt70606)
                    .HasColumnName("N3_DT_70606")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3DtPps)
                    .HasColumnName("N3_DT_PPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt3010247404)
                    .HasColumnName("N3_KT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt30102474041)
                    .HasColumnName("N3_KT_30102_47404_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt47426)
                    .HasColumnName("N3_KT_47426")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt50118)
                    .HasColumnName("N3_KT_50118")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt501185)
                    .HasColumnName("N3_KT_50118_5")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt70601)
                    .HasColumnName("N3_KT_70601")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt7060250120)
                    .HasColumnName("N3_KT_70602_50120")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ny1)
                    .HasColumnName("NY_1")
                    .IsUnicode(false);

                entity.Property(e => e.Principal1)
                    .HasColumnName("PRINCIPAL1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Principal2)
                    .HasColumnName("PRINCIPAL2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRepoProv2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REPO_PROV_2");

                entity.Property(e => e.Base)
                    .HasColumnName("BASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cheaderreport)
                    .HasColumnName("CHEADERREPORT")
                    .HasMaxLength(77)
                    .IsUnicode(false);

                entity.Property(e => e.CupPcnt)
                    .HasColumnName("CUP_PCNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.CupPeriod)
                    .HasColumnName("CUP_PERIOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dat1)
                    .HasColumnName("DAT1")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dat2)
                    .HasColumnName("DAT2")
                    .HasColumnType("DATE");

                entity.Property(e => e.DatRep)
                    .HasColumnName("DAT_REP")
                    .HasColumnType("DATE");

                entity.Property(e => e.EndReport)
                    .HasColumnName("END_REPORT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Interest1)
                    .HasColumnName("INTEREST1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Interest2)
                    .HasColumnName("INTEREST2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N).HasColumnType("NUMBER");

                entity.Property(e => e.N1Dt99998)
                    .HasColumnName("N1_DT_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1DtPrs)
                    .HasColumnName("N1_DT_PRS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1Kt3010247404)
                    .HasColumnName("N1_KT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1Kt91314)
                    .HasColumnName("N1_KT_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt47427)
                    .HasColumnName("N2_DT_47427")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt9999891314)
                    .HasColumnName("N2_DT_99998_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Kt70601)
                    .HasColumnName("N2_KT_70601")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Kt9131499998)
                    .HasColumnName("N2_KT_91314_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt3010247404)
                    .HasColumnName("N3_DT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt30102474041)
                    .HasColumnName("N3_DT_30102_47404_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt47427)
                    .HasColumnName("N3_DT_47427")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt91314)
                    .HasColumnName("N3_DT_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt9999891314)
                    .HasColumnName("N3_DT_99998_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt47427)
                    .HasColumnName("N3_KT_47427")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt70601)
                    .HasColumnName("N3_KT_70601")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt9131499998)
                    .HasColumnName("N3_KT_91314_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt99998)
                    .HasColumnName("N3_KT_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3KtPrs)
                    .HasColumnName("N3_KT_PRS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ny1)
                    .HasColumnName("NY_1")
                    .IsUnicode(false);

                entity.Property(e => e.Principal1)
                    .HasColumnName("PRINCIPAL1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Principal2)
                    .HasColumnName("PRINCIPAL2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRepoProv3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REPO_PROV_3");

                entity.Property(e => e.Base)
                    .HasColumnName("BASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cheaderreport)
                    .HasColumnName("CHEADERREPORT")
                    .HasMaxLength(88)
                    .IsUnicode(false);

                entity.Property(e => e.CupPcnt)
                    .HasColumnName("CUP_PCNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.CupPeriod)
                    .HasColumnName("CUP_PERIOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dat1)
                    .HasColumnName("DAT1")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dat2)
                    .HasColumnName("DAT2")
                    .HasColumnType("DATE");

                entity.Property(e => e.DatRep)
                    .HasColumnName("DAT_REP")
                    .HasColumnType("DATE");

                entity.Property(e => e.EndReport)
                    .HasColumnName("END_REPORT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Interest1)
                    .HasColumnName("INTEREST1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Interest2)
                    .HasColumnName("INTEREST2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N).HasColumnType("NUMBER");

                entity.Property(e => e.N1Dt99998)
                    .HasColumnName("N1_DT_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1DtPrs)
                    .HasColumnName("N1_DT_PRS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1Kt3010247404)
                    .HasColumnName("N1_KT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1Kt91314)
                    .HasColumnName("N1_KT_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt3010247404)
                    .HasColumnName("N2_DT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt61210)
                    .HasColumnName("N2_DT_61210")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt91314)
                    .HasColumnName("N2_DT_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt9999891314)
                    .HasColumnName("N2_DT_99998_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Kt61210)
                    .HasColumnName("N2_KT_61210")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Kt9131499998)
                    .HasColumnName("N2_KT_91314_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Kt99998)
                    .HasColumnName("N2_KT_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2KtPps44)
                    .HasColumnName("N2_KT_PPS_44")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt47427)
                    .HasColumnName("N3_DT_47427")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt5012170602)
                    .HasColumnName("N3_DT_50121_70602")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt9999891314)
                    .HasColumnName("N3_DT_99998_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt70601)
                    .HasColumnName("N3_KT_70601")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt7060750120)
                    .HasColumnName("N3_KT_70607_50120")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt9131499998)
                    .HasColumnName("N3_KT_91314_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt3010247404)
                    .HasColumnName("N4_DT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt30102474041)
                    .HasColumnName("N4_DT_30102_47404_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt47427)
                    .HasColumnName("N4_DT_47427")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt5012070607)
                    .HasColumnName("N4_DT_50120_70607")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt5012170602)
                    .HasColumnName("N4_DT_50121_70602")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt61210)
                    .HasColumnName("N4_DT_61210")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt612101)
                    .HasColumnName("N4_DT_61210_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt6121070606)
                    .HasColumnName("N4_DT_61210_70606")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt91314)
                    .HasColumnName("N4_DT_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt9999891314)
                    .HasColumnName("N4_DT_99998_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4DtPps44)
                    .HasColumnName("N4_DT_PPS_44")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt47427)
                    .HasColumnName("N4_KT_47427")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt50104)
                    .HasColumnName("N4_KT_501_04")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt501041)
                    .HasColumnName("N4_KT_501_04_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt61210)
                    .HasColumnName("N4_KT_61210")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt70601)
                    .HasColumnName("N4_KT_70601")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt7060161210)
                    .HasColumnName("N4_KT_70601_61210")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt7060250120)
                    .HasColumnName("N4_KT_70602_50120")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt7060250121)
                    .HasColumnName("N4_KT_70602_50121")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt9131499998)
                    .HasColumnName("N4_KT_91314_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt99998)
                    .HasColumnName("N4_KT_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4KtPrs)
                    .HasColumnName("N4_KT_PRS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ny1)
                    .HasColumnName("NY_1")
                    .IsUnicode(false);

                entity.Property(e => e.Principal1)
                    .HasColumnName("PRINCIPAL1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Principal2)
                    .HasColumnName("PRINCIPAL2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRepoProv4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REPO_PROV_4");

                entity.Property(e => e.Base)
                    .HasColumnName("BASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cheaderreport)
                    .HasColumnName("CHEADERREPORT")
                    .HasMaxLength(109)
                    .IsUnicode(false);

                entity.Property(e => e.CupPcnt)
                    .HasColumnName("CUP_PCNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.CupPeriod)
                    .HasColumnName("CUP_PERIOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dat1)
                    .HasColumnName("DAT1")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dat2)
                    .HasColumnName("DAT2")
                    .HasColumnType("DATE");

                entity.Property(e => e.DatRep)
                    .HasColumnName("DAT_REP")
                    .HasColumnType("DATE");

                entity.Property(e => e.EndReport)
                    .HasColumnName("END_REPORT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Interest1)
                    .HasColumnName("INTEREST1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Interest2)
                    .HasColumnName("INTEREST2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N).HasColumnType("NUMBER");

                entity.Property(e => e.N1Dt99998)
                    .HasColumnName("N1_DT_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1DtPrs)
                    .HasColumnName("N1_DT_PRS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1Kt3010247404)
                    .HasColumnName("N1_KT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N1Kt91314)
                    .HasColumnName("N1_KT_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt3010247404)
                    .HasColumnName("N2_DT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Dt9999891314)
                    .HasColumnName("N2_DT_99998_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2Kt9131499998)
                    .HasColumnName("N2_KT_91314_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N2KtPps44)
                    .HasColumnName("N2_KT_PPS_44")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt47427)
                    .HasColumnName("N3_DT_47427")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt70606)
                    .HasColumnName("N3_DT_70606")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Dt9999891314)
                    .HasColumnName("N3_DT_99998_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt47426)
                    .HasColumnName("N3_KT_47426")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt70601)
                    .HasColumnName("N3_KT_70601")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N3Kt9131499998)
                    .HasColumnName("N3_KT_91314_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt47426)
                    .HasColumnName("N4_DT_47426")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Dt70606)
                    .HasColumnName("N4_DT_70606")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4DtPps44)
                    .HasColumnName("N4_DT_PPS_44")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt3010247404)
                    .HasColumnName("N4_KT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt30102474041)
                    .HasColumnName("N4_KT_30102_47404_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N4Kt47426)
                    .HasColumnName("N4_KT_47426")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5Dt3010247404)
                    .HasColumnName("N5_DT_30102_47404")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5Dt30102474041)
                    .HasColumnName("N5_DT_30102_47404_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5Dt47427)
                    .HasColumnName("N5_DT_47427")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5Dt91314)
                    .HasColumnName("N5_DT_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5Dt9999891314)
                    .HasColumnName("N5_DT_99998_91314")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5Kt47427)
                    .HasColumnName("N5_KT_47427")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5Kt70601)
                    .HasColumnName("N5_KT_70601")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5Kt9131499998)
                    .HasColumnName("N5_KT_91314_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5Kt99998)
                    .HasColumnName("N5_KT_99998")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N5KtPrs)
                    .HasColumnName("N5_KT_PRS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ny1)
                    .HasColumnName("NY_1")
                    .IsUnicode(false);

                entity.Property(e => e.Principal1)
                    .HasColumnName("PRINCIPAL1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Principal2)
                    .HasColumnName("PRINCIPAL2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VReportstatTick>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REPORTSTAT_TICK");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cparams)
                    .HasColumnName("CPARAMS")
                    .IsUnicode(false);

                entity.Property(e => e.Cprinter)
                    .HasColumnName("CPRINTER")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Creportfilename)
                    .HasColumnName("CREPORTFILENAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cvalues)
                    .HasColumnName("CVALUES")
                    .IsUnicode(false);

                entity.Property(e => e.Dlaunchtime)
                    .HasColumnName("DLAUNCHTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dreadydate)
                    .HasColumnName("DREADYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dreadytime)
                    .HasColumnName("DREADYTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dreportdate)
                    .HasColumnName("DREPORTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nkey)
                    .HasColumnName("NKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VReposums>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_REPOSUMS");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlastmc)
                    .HasColumnName("NLASTMC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarginsum)
                    .HasColumnName("NMARGINSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtm)
                    .HasColumnName("NMTM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmplusmc)
                    .HasColumnName("NMTMPLUSMC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmprice)
                    .HasColumnName("NMTMPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnewmc)
                    .HasColumnName("NNEWMC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ROLES");

                entity.Property(e => e.Bmandatory)
                    .HasColumnName("BMANDATORY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Crolecode)
                    .HasColumnName("CROLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Crolename)
                    .HasColumnName("CROLENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrolekey)
                    .HasColumnName("NROLEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsystemkey)
                    .HasColumnName("NSYSTEMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsysytemkey)
                    .HasColumnName("NSYSYTEMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Owner)
                    .HasColumnName("OWNER")
                    .HasColumnType("CHAR(9)");
            });

            modelBuilder.Entity<VRptDepoatlas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_DEPOATLAS");

                entity.Property(e => e.Batlasexport).HasColumnName("BATLASEXPORT");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.BooksCbookcode)
                    .HasColumnName("BOOKS_CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookname)
                    .HasColumnName("CBOOKNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmessage)
                    .HasColumnName("CMESSAGE")
                    .IsUnicode(false);

                entity.Property(e => e.Crate)
                    .HasColumnName("CRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterest)
                    .HasColumnName("NINTEREST")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ninterfacekey)
                    .HasColumnName("NINTERFACEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VRptForexPlrub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_FOREX_PLRUB");

                entity.Property(e => e.Bathenaexported)
                    .HasColumnName("BATHENAEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap).HasColumnName("BSWAP");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cathenaexported)
                    .HasColumnName("CATHENAEXPORTED")
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ratebt)
                    .HasColumnName("RATEBT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ratest)
                    .HasColumnName("RATEST")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRptGkorskBook>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_GKORSK_BOOK");

                entity.Property(e => e.Cbondcomment)
                    .HasColumnName("CBONDCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dt)
                    .HasColumnName("DT")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dt1)
                    .HasColumnName("DT_1")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Naccruedcoupon)
                    .HasColumnName("NACCRUEDCOUPON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfaceamount)
                    .HasColumnName("NFACEAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmprofit)
                    .HasColumnName("NMTMPROFIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet)
                    .HasColumnName("NPRICET")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet1)
                    .HasColumnName("NPRICET_1")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRptGkorskBook1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_GKORSK_BOOK1");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Coupon)
                    .HasColumnName("COUPON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dreportdate)
                    .HasColumnName("DREPORTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Intrday)
                    .HasColumnName("INTRDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Marketprice0)
                    .HasColumnName("MARKETPRICE0")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Marketprice1)
                    .HasColumnName("MARKETPRICE1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mtm0)
                    .HasColumnName("MTM0")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mtm1)
                    .HasColumnName("MTM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PAndL)
                    .HasColumnName("P_AND_L")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Position0)
                    .HasColumnName("POSITION0")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Position1)
                    .HasColumnName("POSITION1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Posreval)
                    .HasColumnName("POSREVAL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRptGkorskBook10>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_GKORSK_BOOK10");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Coupon)
                    .HasColumnName("COUPON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dreportdate)
                    .HasColumnName("DREPORTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Intrday)
                    .HasColumnName("INTRDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Marketprice0)
                    .HasColumnName("MARKETPRICE0")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Marketprice1)
                    .HasColumnName("MARKETPRICE1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mtm0)
                    .HasColumnName("MTM0")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mtm1)
                    .HasColumnName("MTM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PAndL)
                    .HasColumnName("P_AND_L")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Position0)
                    .HasColumnName("POSITION0")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Position1)
                    .HasColumnName("POSITION1")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRptGkorskBook11>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_GKORSK_BOOK11");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Coupon)
                    .HasColumnName("COUPON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dreportdate)
                    .HasColumnName("DREPORTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Intrday)
                    .HasColumnName("INTRDAY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Marketprice0)
                    .HasColumnName("MARKETPRICE0")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Marketprice1)
                    .HasColumnName("MARKETPRICE1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mtm0)
                    .HasColumnName("MTM0")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Mtm1)
                    .HasColumnName("MTM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.PAndL)
                    .HasColumnName("P_AND_L")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Position0)
                    .HasColumnName("POSITION0")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Position1)
                    .HasColumnName("POSITION1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Posreval)
                    .HasColumnName("POSREVAL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRptGkorskBookPl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_GKORSK_BOOK_PL");

                entity.Property(e => e.Cbondcomment)
                    .HasColumnName("CBONDCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dt)
                    .HasColumnName("DT")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dt1)
                    .HasColumnName("DT_1")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Naccruedcoupon)
                    .HasColumnName("NACCRUEDCOUPON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccruedcoupont1)
                    .HasColumnName("NACCRUEDCOUPONT_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpricebuy)
                    .HasColumnName("NAVGPRICEBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgpricesell)
                    .HasColumnName("NAVGPRICESELL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbuyamount)
                    .HasColumnName("NBUYAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncouponrate)
                    .HasColumnName("NCOUPONRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfaceamount)
                    .HasColumnName("NFACEAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NfaceamountT1)
                    .HasColumnName("NFACEAMOUNT_T_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nincomingbalancerev)
                    .HasColumnName("NINCOMINGBALANCEREV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmprofit)
                    .HasColumnName("NMTMPROFIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NmtmprofitT1)
                    .HasColumnName("NMTMPROFIT_T_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet)
                    .HasColumnName("NPRICET")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricet1)
                    .HasColumnName("NPRICET_1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsellamount)
                    .HasColumnName("NSELLAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRptPos1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_POS1");

                entity.Property(e => e.Bcommpct).HasColumnName("BCOMMPCT");

                entity.Property(e => e.Bcpclient).HasColumnName("BCPCLIENT");

                entity.Property(e => e.Btrueagredate).HasColumnName("BTRUEAGREDATE");

                entity.Property(e => e.Btruecashsettl).HasColumnName("BTRUECASHSETTL");

                entity.Property(e => e.Btrueeqsettl).HasColumnName("BTRUEEQSETTL");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Camendcomment)
                    .HasColumnName("CAMENDCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokagreement)
                    .HasColumnName("CBROKAGREEMENT")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccporgcode)
                    .HasColumnName("CCPORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Cnetgross)
                    .HasColumnName("CNETGROSS")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cordernum)
                    .HasColumnName("CORDERNUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csecondref)
                    .HasColumnName("CSECONDREF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlcurrcode)
                    .HasColumnName("CSETTLCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlecode)
                    .HasColumnName("CSETTLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlmenttype)
                    .HasColumnName("CSETTLMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cversion)
                    .HasColumnName("CVERSION")
                    .HasMaxLength(43)
                    .IsUnicode(false);

                entity.Property(e => e.Dagreementdate)
                    .HasColumnName("DAGREEMENTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcashsettldate)
                    .HasColumnName("DCASHSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dchangedate)
                    .HasColumnName("DCHANGEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcloseeqdate)
                    .HasColumnName("DCLOSEEQDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Deqsettldate)
                    .HasColumnName("DEQSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtickettime)
                    .HasColumnName("DTICKETTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibd).HasColumnName("IBD");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nbps)
                    .HasColumnName("NBPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nchangereason)
                    .HasColumnName("NCHANGEREASON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionrub)
                    .HasColumnName("NCOMISSIONRUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionusd)
                    .HasColumnName("NCOMISSIONUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndayinc)
                    .HasColumnName("NDAYINC")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantityb)
                    .HasColumnName("NQUANTITYB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantitys)
                    .HasColumnName("NQUANTITYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nraterub)
                    .HasColumnName("NRATERUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntotalamount)
                    .HasColumnName("NTOTALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Ntradeprice)
                    .HasColumnName("NTRADEPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nversion)
                    .HasColumnName("NVERSION")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRptRepobrockClientposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_REPOBROCK_CLIENTPOSITION");

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cisin)
                    .HasColumnName("CISIN")
                    .IsUnicode(false);

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .IsUnicode(false);

                entity.Property(e => e.Csecdesc)
                    .HasColumnName("CSECDESC")
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsecuritytypekey)
                    .HasColumnName("NSECURITYTYPEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NsumnomDirect)
                    .HasColumnName("NSUMNOM_DIRECT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NsumnomNett)
                    .HasColumnName("NSUMNOM_NETT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NsumnomProp)
                    .HasColumnName("NSUMNOM_PROP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.NsumnomReverce)
                    .HasColumnName("NSUMNOM_REVERCE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRptRepobrockMatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_REPOBROCK_MATCH");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Bopenpos).HasColumnName("BOPENPOS");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlinkdealkey)
                    .HasColumnName("NLINKDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlowerdiscount)
                    .HasColumnName("NLOWERDISCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum2)
                    .HasColumnName("NMARKETSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice2)
                    .HasColumnName("NPRICE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntyperpt)
                    .HasColumnName("NTYPERPT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nupperdiscount)
                    .HasColumnName("NUPPERDISCOUNT")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRptRepobrockTurnover>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RPT_REPOBROCK_TURNOVER");

                entity.Property(e => e.Cacckey)
                    .HasColumnName("CACCKEY")
                    .IsUnicode(false);

                entity.Property(e => e.Casset)
                    .HasColumnName("CASSET")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Crpttype)
                    .HasColumnName("CRPTTYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cticker)
                    .HasColumnName("CTICKER")
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRurbondscurr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RURBONDSCURR");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRurbondsinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RURBONDSINFO");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Naccrint)
                    .HasColumnName("NACCRINT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navg)
                    .HasColumnName("NAVG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgdel)
                    .HasColumnName("NAVGDEL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclose)
                    .HasColumnName("NCLOSE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nclosedel)
                    .HasColumnName("NCLOSEDEL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nconcaj)
                    .HasColumnName("NCONCAJ")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nconcres)
                    .HasColumnName("NCONCRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndkdur)
                    .HasColumnName("NDKDUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndkmdur)
                    .HasColumnName("NDKMDUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndkpvbp)
                    .HasColumnName("NDKPVBP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndtm)
                    .HasColumnName("NDTM")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Nface)
                    .HasColumnName("NFACE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nholdres)
                    .HasColumnName("NHOLDRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmax)
                    .HasColumnName("NMAX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmaxdel)
                    .HasColumnName("NMAXDEL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmin)
                    .HasColumnName("NMIN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmindel)
                    .HasColumnName("NMINDEL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtm)
                    .HasColumnName("NMTM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npvaj)
                    .HasColumnName("NPVAJ")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npvres)
                    .HasColumnName("NPVRES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nregvol)
                    .HasColumnName("NREGVOL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvol)
                    .HasColumnName("NVOL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytm)
                    .HasColumnName("NYTM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytmclose)
                    .HasColumnName("NYTMCLOSE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytmdel)
                    .HasColumnName("NYTMDEL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Pvbp)
                    .HasColumnName("PVBP")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRurbsc2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RURBSC2");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRurrepoProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RURREPO_PROV");

                entity.Property(e => e.Base)
                    .HasColumnName("BASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.CupPcnt)
                    .HasColumnName("CUP_PCNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.CupPeriod)
                    .HasColumnName("CUP_PERIOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.DI)
                    .HasColumnName("D_I")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dat1)
                    .HasColumnName("DAT1")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dat2)
                    .HasColumnName("DAT2")
                    .HasColumnType("DATE");

                entity.Property(e => e.DatMov)
                    .HasColumnName("DAT_MOV")
                    .HasColumnType("DATE");

                entity.Property(e => e.DatRep)
                    .HasColumnName("DAT_REP")
                    .HasColumnType("DATE");

                entity.Property(e => e.DatSell)
                    .HasColumnName("DAT_SELL")
                    .HasColumnType("DATE");

                entity.Property(e => e.Datcup)
                    .HasColumnName("DATCUP")
                    .HasColumnType("DATE");

                entity.Property(e => e.IntBase)
                    .HasColumnName("INT_BASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Interest1)
                    .HasColumnName("INTEREST1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Interest2)
                    .HasColumnName("INTEREST2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.M).HasColumnType("NUMBER");

                entity.Property(e => e.MI)
                    .HasColumnName("M_I")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.N).HasColumnType("NUMBER");

                entity.Property(e => e.NI)
                    .HasColumnName("N_I")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nominal)
                    .HasColumnName("NOMINAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Principal1)
                    .HasColumnName("PRINCIPAL1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Principal2)
                    .HasColumnName("PRINCIPAL2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VRurrepopl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RURREPOPL");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bopenpos).HasColumnName("BOPENPOS");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Creutersimportfile)
                    .HasColumnName("CREUTERSIMPORTFILE")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Irepobase)
                    .HasColumnName("IREPOBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndailypl)
                    .HasColumnName("NDAILYPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarketsum2)
                    .HasColumnName("NMARKETSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nperiod)
                    .HasColumnName("NPERIOD")
                    .HasColumnType("NUMBER(38)");

                entity.Property(e => e.Npl)
                    .HasColumnName("NPL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice2)
                    .HasColumnName("NPRICE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSalespersons>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SALESPERSONS");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cisocode)
                    .HasColumnName("CISOCODE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Itype).HasColumnName("ITYPE");

                entity.Property(e => e.Ncodekey)
                    .HasColumnName("NCODEKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSbsec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SBSEC");

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cathenabookcode)
                    .HasColumnName("CATHENABOOKCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokagreementfm)
                    .HasColumnName("CBROKAGREEMENTFM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientname)
                    .HasColumnName("CCLIENTNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrname)
                    .HasColumnName("CCONTRNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccounteracc)
                    .HasColumnName("CCOUNTERACC")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrossgroup)
                    .HasColumnName("CCROSSGROUP")
                    .HasColumnType("CHAR(6)");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftbook)
                    .HasColumnName("CDIASOFTBOOK")
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftcounter)
                    .HasColumnName("CDIASOFTCOUNTER")
                    .IsUnicode(false);

                entity.Property(e => e.Cissuer)
                    .IsRequired()
                    .HasColumnName("CISSUER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuername)
                    .HasColumnName("CISSUERNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csecid)
                    .IsRequired()
                    .HasColumnName("CSECID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csetlcurr)
                    .HasColumnName("CSETLCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibase)
                    .HasColumnName("IBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncounteracc)
                    .HasColumnName("NCOUNTERACC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullamount)
                    .HasColumnName("NFULLAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmamount)
                    .HasColumnName("NMTMAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmprice)
                    .HasColumnName("NMTMPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Сsalespersonid)
                    .HasColumnName("СSALESPERSONID")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSbsecminnom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SBSECMINNOM");

                entity.Property(e => e.Bminusport)
                    .HasColumnName("BMINUSPORT")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocurrpaym)
                    .HasColumnName("BNOCURRPAYM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoreserv)
                    .HasColumnName("BNORESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbondcomment)
                    .HasColumnName("CBONDCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumput)
                    .HasColumnName("NSUMPUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSbsecsaldo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SBSECSALDO");

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncoupb)
                    .HasColumnName("NCOUPB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncoups)
                    .HasColumnName("NCOUPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsumb)
                    .HasColumnName("NFULLSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsums)
                    .HasColumnName("NFULLSUMS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Noffer)
                    .HasColumnName("NOFFER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnomb)
                    .HasColumnName("NSUMNOMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnoms)
                    .HasColumnName("NSUMNOMS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSecop>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SECOP");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSecop2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SECOP2");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsuma)
                    .HasColumnName("NSUMA")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSecprice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SECPRICE");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Cpricetype)
                    .HasColumnName("CPRICETYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csourcecode)
                    .IsRequired()
                    .HasColumnName("CSOURCECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nchangeprice)
                    .HasColumnName("NCHANGEPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncountvol)
                    .HasColumnName("NCOUNTVOL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricebid)
                    .HasColumnName("NPRICEBID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricebuymax)
                    .HasColumnName("NPRICEBUYMAX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npriceclose)
                    .HasColumnName("NPRICECLOSE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricedealmax)
                    .HasColumnName("NPRICEDEALMAX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npricedealmin)
                    .HasColumnName("NPRICEDEALMIN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npriceoffer)
                    .HasColumnName("NPRICEOFFER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npriceoffermin)
                    .HasColumnName("NPRICEOFFERMIN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npriceopen)
                    .HasColumnName("NPRICEOPEN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npvbp)
                    .HasColumnName("NPVBP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvol)
                    .HasColumnName("NVOL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytmclose)
                    .HasColumnName("NYTMCLOSE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytmirr)
                    .HasColumnName("NYTMIRR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nytmour)
                    .HasColumnName("NYTMOUR")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSecrates>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SECRATES");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacrfull)
                    .HasColumnName("NACRFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrint)
                    .HasColumnName("NACRINT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrate)
                    .HasColumnName("NAVGRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbid)
                    .HasColumnName("NBID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmidbuy)
                    .HasColumnName("NMIDBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmiddays)
                    .HasColumnName("NMIDDAYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Noffer)
                    .HasColumnName("NOFFER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreserv)
                    .HasColumnName("NRESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsecnom)
                    .HasColumnName("NSECNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSecrates2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SECRATES2");

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .IsRequired()
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .IsRequired()
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nacrfull)
                    .HasColumnName("NACRFULL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrint)
                    .HasColumnName("NACRINT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Navgrate)
                    .HasColumnName("NAVGRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbid)
                    .HasColumnName("NBID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmidbuy)
                    .HasColumnName("NMIDBUY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmiddays)
                    .HasColumnName("NMIDDAYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Noffer)
                    .HasColumnName("NOFFER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nreserv)
                    .HasColumnName("NRESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsecnom)
                    .HasColumnName("NSECNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSecurityprofiles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SECURITYPROFILES");

                entity.Property(e => e.Cprofilekey)
                    .HasColumnName("CPROFILEKEY")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cprofilename)
                    .HasColumnName("CPROFILENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Dexpirationdate)
                    .HasColumnName("DEXPIRATIONDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ioneusersess)
                    .HasColumnName("IONEUSERSESS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ipasswtrycount)
                    .HasColumnName("IPASSWTRYCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nchangeperiod)
                    .HasColumnName("NCHANGEPERIOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nminpasswlength)
                    .HasColumnName("NMINPASSWLENGTH")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprofilekey)
                    .HasColumnName("NPROFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Owner)
                    .HasColumnName("OWNER")
                    .HasColumnType("CHAR(9)");
            });

            modelBuilder.Entity<VSummitDepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SUMMIT_DEPO");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Book)
                    .HasColumnName("BOOK")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE_")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE_")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtable)
                    .HasColumnName("CDEALTABLE_")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE_")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitreference)
                    .HasColumnName("CSUMMITREFERENCE_")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE_")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Cust)
                    .HasColumnName("CUST")
                    .IsUnicode(false);

                entity.Property(e => e.Desk)
                    .HasColumnName("DESK")
                    .IsUnicode(false);

                entity.Property(e => e.Discount)
                    .HasColumnName("DISCOUNT")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.Enddate)
                    .HasColumnName("ENDDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Exportaction)
                    .HasColumnName("EXPORTACTION_")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid)
                    .HasColumnName("EXTTRADEID")
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid1)
                    .HasColumnName("EXTTRADEID_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Feed)
                    .HasColumnName("FEED")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Fixrate)
                    .HasColumnName("FIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Fraindex)
                    .HasColumnName("FRAINDEX")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.Headerword)
                    .HasColumnName("HEADERWORD_")
                    .HasColumnType("CHAR(4)");

                entity.Property(e => e.Mmbasis)
                    .HasColumnName("MMBASIS")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Mmccy)
                    .HasColumnName("MMCCY")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Mmtype)
                    .HasColumnName("MMTYPE")
                    .HasColumnType("CHAR(7)");

                entity.Property(e => e.Notional)
                    .HasColumnName("NOTIONAL")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Paycalendar)
                    .HasColumnName("PAYCALENDAR")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.Payfrequency)
                    .HasColumnName("PAYFREQUENCY")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Pors)
                    .HasColumnName("PORS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Startdate)
                    .HasColumnName("STARTDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate)
                    .HasColumnName("TRADEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate1)
                    .HasColumnName("TRADEDATE_")
                    .HasColumnType("DATE");

                entity.Property(e => e.Trader)
                    .HasColumnName("TRADER")
                    .HasColumnType("CHAR(2000)");
            });

            modelBuilder.Entity<VSummitFi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SUMMIT_FI");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bondprice)
                    .HasColumnName("BONDPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bondvaluedate)
                    .HasColumnName("BONDVALUEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Book)
                    .HasColumnName("BOOK")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE_")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE_")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtable)
                    .HasColumnName("CDEALTABLE_")
                    .HasColumnType("CHAR(5)");

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE_")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitreference)
                    .HasColumnName("CSUMMITREFERENCE_")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE_")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Cust)
                    .HasColumnName("CUST")
                    .IsUnicode(false);

                entity.Property(e => e.Desk)
                    .HasColumnName("DESK")
                    .IsUnicode(false);

                entity.Property(e => e.Exportaction)
                    .HasColumnName("EXPORTACTION_")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid)
                    .HasColumnName("EXTTRADEID")
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid1)
                    .HasColumnName("EXTTRADEID_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Feed)
                    .HasColumnName("FEED")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Headerword)
                    .HasColumnName("HEADERWORD_")
                    .HasColumnType("CHAR(9)");

                entity.Property(e => e.Notional)
                    .HasColumnName("NOTIONAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Pors)
                    .HasColumnName("PORS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Securityid)
                    .HasColumnName("SECURITYID")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Settledate)
                    .HasColumnName("SETTLEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate)
                    .HasColumnName("TRADEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate1)
                    .HasColumnName("TRADEDATE_")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<VSummitForex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SUMMIT_FOREX");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Book)
                    .HasColumnName("BOOK")
                    .IsUnicode(false);

                entity.Property(e => e.Boughtamount)
                    .HasColumnName("BOUGHTAMOUNT")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Boughtccy)
                    .HasColumnName("BOUGHTCCY")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE_")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE_")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtable)
                    .HasColumnName("CDEALTABLE_")
                    .HasColumnType("CHAR(5)");

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE_")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitreference)
                    .HasColumnName("CSUMMITREFERENCE_")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE_")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cust)
                    .HasColumnName("CUST")
                    .IsUnicode(false);

                entity.Property(e => e.Desk)
                    .HasColumnName("DESK")
                    .IsUnicode(false);

                entity.Property(e => e.Exportaction)
                    .HasColumnName("EXPORTACTION_")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid)
                    .HasColumnName("EXTTRADEID")
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid1)
                    .HasColumnName("EXTTRADEID_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Feed)
                    .HasColumnName("FEED")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Fwdrate)
                    .HasColumnName("FWDRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Headerword)
                    .HasColumnName("HEADERWORD_")
                    .IsUnicode(false);

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Soldamount)
                    .HasColumnName("SOLDAMOUNT")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Soldccy)
                    .HasColumnName("SOLDCCY")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Spotrate)
                    .HasColumnName("SPOTRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Tradedate)
                    .HasColumnName("TRADEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate1)
                    .HasColumnName("TRADEDATE_")
                    .HasColumnType("DATE");

                entity.Property(e => e.Trader)
                    .HasColumnName("TRADER")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.Valdate)
                    .HasColumnName("VALDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSummitFutures>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SUMMIT_FUTURES");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Book)
                    .HasColumnName("BOOK")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE_")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE_")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Cdealtable)
                    .HasColumnName("CDEALTABLE_")
                    .HasColumnType("CHAR(7)");

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE_")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Clearbrokerrate)
                    .HasColumnName("CLEARBROKERRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Clearbrokervalue)
                    .HasColumnName("CLEARBROKERVALUE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .IsUnicode(false);

                entity.Property(e => e.Contractmonth)
                    .HasColumnName("CONTRACTMONTH")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Contractname)
                    .HasColumnName("CONTRACTNAME")
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitreference)
                    .HasColumnName("CSUMMITREFERENCE_")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE_")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Cust)
                    .HasColumnName("CUST")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.Desk)
                    .HasColumnName("DESK")
                    .HasColumnType("CHAR(10)");

                entity.Property(e => e.Execbroker)
                    .HasColumnName("EXECBROKER")
                    .HasColumnType("CHAR(2000)");

                entity.Property(e => e.Execbrokerrate)
                    .HasColumnName("EXECBROKERRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Execbrokervalue)
                    .HasColumnName("EXECBROKERVALUE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Exportaction)
                    .HasColumnName("EXPORTACTION_")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid)
                    .HasColumnName("EXTTRADEID")
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid1)
                    .HasColumnName("EXTTRADEID_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Feed)
                    .HasColumnName("FEED")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Futureamount)
                    .HasColumnName("FUTUREAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Futureprice)
                    .HasColumnName("FUTUREPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Headerword)
                    .HasColumnName("HEADERWORD_")
                    .HasColumnType("CHAR(11)");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Pors)
                    .HasColumnName("PORS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate)
                    .HasColumnName("TRADEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate1)
                    .HasColumnName("TRADEDATE_")
                    .HasColumnType("DATE");

                entity.Property(e => e.Trader)
                    .HasColumnName("TRADER")
                    .HasColumnType("CHAR(2000)");
            });

            modelBuilder.Entity<VSummitRepoi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SUMMIT_REPOI");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bondprice)
                    .HasColumnName("BONDPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bondvaluedate)
                    .HasColumnName("BONDVALUEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Book)
                    .HasColumnName("BOOK")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE_")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE_")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtable)
                    .HasColumnName("CDEALTABLE_")
                    .HasColumnType("CHAR(9)");

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE_")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitreference)
                    .HasColumnName("CSUMMITREFERENCE_")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE_")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Cust)
                    .HasColumnName("CUST")
                    .IsUnicode(false);

                entity.Property(e => e.Desk)
                    .HasColumnName("DESK")
                    .IsUnicode(false);

                entity.Property(e => e.Enddate)
                    .HasColumnName("ENDDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Exportaction)
                    .HasColumnName("EXPORTACTION_")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid)
                    .HasColumnName("EXTTRADEID")
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid1)
                    .HasColumnName("EXTTRADEID_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Feed)
                    .HasColumnName("FEED")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Fixrate)
                    .HasColumnName("FIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Headerword)
                    .HasColumnName("HEADERWORD_")
                    .HasColumnType("CHAR(9)");

                entity.Property(e => e.Mmbasis)
                    .HasColumnName("MMBASIS")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Mmccy)
                    .HasColumnName("MMCCY")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Notional)
                    .HasColumnName("NOTIONAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Repotype)
                    .HasColumnName("REPOTYPE")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Securityid)
                    .HasColumnName("SECURITYID")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Settledate)
                    .HasColumnName("SETTLEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Startdate)
                    .HasColumnName("STARTDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate)
                    .HasColumnName("TRADEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate1)
                    .HasColumnName("TRADEDATE_")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<VSummitSbsec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SUMMIT_SBSEC");

                entity.Property(e => e.Action)
                    .HasColumnName("ACTION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bondprice)
                    .HasColumnName("BONDPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bondvaluedate)
                    .HasColumnName("BONDVALUEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Book)
                    .HasColumnName("BOOK")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE_")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE_")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealtable)
                    .HasColumnName("CDEALTABLE_")
                    .HasColumnType("CHAR(5)");

                entity.Property(e => e.Cdealtype)
                    .HasColumnName("CDEALTYPE_")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .IsUnicode(false);

                entity.Property(e => e.Csummitreference)
                    .HasColumnName("CSUMMITREFERENCE_")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE_")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Cust)
                    .HasColumnName("CUST")
                    .IsUnicode(false);

                entity.Property(e => e.Desk)
                    .HasColumnName("DESK")
                    .IsUnicode(false);

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP_")
                    .HasColumnType("DATE");

                entity.Property(e => e.Exportaction)
                    .HasColumnName("EXPORTACTION_")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid)
                    .HasColumnName("EXTTRADEID")
                    .HasMaxLength(41)
                    .IsUnicode(false);

                entity.Property(e => e.Exttradeid1)
                    .HasColumnName("EXTTRADEID_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Feed)
                    .HasColumnName("FEED")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Headerword)
                    .HasColumnName("HEADERWORD_")
                    .HasColumnType("CHAR(9)");

                entity.Property(e => e.Notional)
                    .HasColumnName("NOTIONAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsummitdealkey)
                    .HasColumnName("NSUMMITDEALKEY_")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Pors)
                    .HasColumnName("PORS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Securityid)
                    .HasColumnName("SECURITYID")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Settledate)
                    .HasColumnName("SETTLEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate)
                    .HasColumnName("TRADEDATE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tradedate1)
                    .HasColumnName("TRADEDATE_")
                    .HasColumnType("DATE");

                entity.Property(e => e.Trader)
                    .HasColumnName("TRADER")
                    .HasColumnType("CHAR(2000)");
            });

            modelBuilder.Entity<VSwappos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SWAPPOS");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Currpos)
                    .HasColumnName("CURRPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<VSwappos1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SWAPPOS1");

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSwappos2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SWAPPOS2");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSwappos3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SWAPPOS3");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Currpos)
                    .HasColumnName("CURRPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<VSwappos4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SWAPPOS4");

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Sum)
                    .HasColumnName("SUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VSwpdpl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SWPDPL");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cswaprate)
                    .HasColumnName("CSWAPRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb2)
                    .HasColumnName("DVALUEDATEB2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncbrate)
                    .HasColumnName("NCBRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplrur)
                    .HasColumnName("NDPLRUR")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndplusd)
                    .HasColumnName("NDPLUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nrate2)
                    .HasColumnName("NRATE2")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumb2)
                    .HasColumnName("NSUMB2")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums2)
                    .HasColumnName("NSUMS2")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<VSystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SYSTEM");

                entity.Property(e => e.Bmandatory)
                    .HasColumnName("BMANDATORY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csystemcode)
                    .HasColumnName("CSYSTEMCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csystemname)
                    .HasColumnName("CSYSTEMNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nsystemkey)
                    .HasColumnName("NSYSTEMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Owner)
                    .HasColumnName("OWNER")
                    .HasColumnType("CHAR(9)");
            });

            modelBuilder.Entity<VSystemmenu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SYSTEMMENU");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cfunctioncode)
                    .HasColumnName("CFUNCTIONCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmenuname)
                    .HasColumnName("CMENUNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nlevel)
                    .HasColumnName("NLEVEL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmenukey)
                    .HasColumnName("NMENUKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nparentmenukey)
                    .HasColumnName("NPARENTMENUKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrepkey)
                    .HasColumnName("NREPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsystemkey)
                    .HasColumnName("NSYSTEMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Owner)
                    .HasColumnName("OWNER")
                    .HasColumnType("CHAR(9)");
            });

            modelBuilder.Entity<VSystemmenu3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SYSTEMMENU3");

                entity.Property(e => e.Caccrightname)
                    .HasColumnName("CACCRIGHTNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cmenuname)
                    .HasColumnName("CMENUNAME")
                    .IsUnicode(false);

                entity.Property(e => e.Cmenupath)
                    .HasColumnName("CMENUPATH")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Crolename)
                    .HasColumnName("CROLENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Naccrightkey)
                    .HasColumnName("NACCRIGHTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmenukey)
                    .HasColumnName("NMENUKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrolekey)
                    .HasColumnName("NROLEKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VTmpNorm6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TMP_NORM6");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navail)
                    .HasColumnName("NAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexceed)
                    .HasColumnName("NEXCEED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfulllimit)
                    .HasColumnName("NFULLLIMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npct)
                    .HasColumnName("NPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusdsum)
                    .HasColumnName("NUSDSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VTmpNorm6detail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TMP_NORM6DETAIL");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Celmname)
                    .HasColumnName("CELMNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ncoeff)
                    .HasColumnName("NCOEFF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nperiod)
                    .HasColumnName("NPERIOD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusdsum)
                    .HasColumnName("NUSDSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VTmpsbsec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TMPSBSEC");

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VTotpaym>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TOTPAYM");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccorrcode)
                    .HasColumnName("CCORRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrorder)
                    .HasColumnName("CCURRORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VTotpaymsettl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TOTPAYMSETTL");

                entity.Property(e => e.Cacc)
                    .HasColumnName("CACC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccorrcode)
                    .HasColumnName("CCORRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrorder)
                    .HasColumnName("CCURRORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngriid)
                    .HasColumnName("NGRIID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VTransferdepts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TRANSFERDEPTS");

                entity.Property(e => e.Cnamefrom)
                    .HasColumnName("CNAMEFROM")
                    .IsUnicode(false);

                entity.Property(e => e.Cnameto)
                    .HasColumnName("CNAMETO")
                    .IsUnicode(false);

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VTries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TRIES");

                entity.Property(e => e.Itrycount)
                    .HasColumnName("ITRYCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Owner)
                    .HasColumnName("OWNER")
                    .HasColumnType("CHAR(9)");
            });

            modelBuilder.Entity<VUsedpasswords>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_USEDPASSWORDS");

                entity.Property(e => e.Cpasswd)
                    .HasColumnName("CPASSWD")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Denddate)
                    .HasColumnName("DENDDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Owner)
                    .HasColumnName("OWNER")
                    .HasColumnType("CHAR(9)");
            });

            modelBuilder.Entity<VUserCurrratehist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_USER_CURRRATEHIST");

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VUserCurrratehistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_USER_CURRRATEHISTORY");

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VUserprofiles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_USERPROFILES");

                entity.Property(e => e.Bmandatory)
                    .HasColumnName("BMANDATORY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprofilekey)
                    .HasColumnName("NPROFILEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrolekey)
                    .HasColumnName("NROLEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsystemkey)
                    .HasColumnName("NSYSTEMKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Owner)
                    .HasColumnName("OWNER")
                    .HasColumnType("CHAR(9)");
            });

            modelBuilder.Entity<VUserroles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_USERROLES");

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Crolecode)
                    .HasColumnName("CROLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Crolename)
                    .HasColumnName("CROLENAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Csystemname)
                    .HasColumnName("CSYSTEMNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_USERS");

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bfirstlogin)
                    .HasColumnName("BFIRSTLOGIN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bgroup)
                    .HasColumnName("BGROUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bmandatory)
                    .HasColumnName("BMANDATORY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cphoneforsms)
                    .HasColumnName("CPHONEFORSMS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Dpasswchangedate)
                    .HasColumnName("DPASSWCHANGEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Itryescount)
                    .HasColumnName("ITRYESCOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nusergroupkey)
                    .HasColumnName("NUSERGROUPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Owner)
                    .HasColumnName("OWNER")
                    .HasColumnType("CHAR(9)");
            });

            modelBuilder.Entity<VVtm1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_VTM1");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cisocode)
                    .HasColumnName("CISOCODE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Itype).HasColumnName("ITYPE");

                entity.Property(e => e.Ncodekey)
                    .HasColumnName("NCODEKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VVtmAfinaSelect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_VTM_AFINA_SELECT");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cgridid)
                    .HasColumnName("CGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cingcode)
                    .HasColumnName("CINGCODE")
                    .IsUnicode(false);

                entity.Property(e => e.Classified)
                    .HasColumnName("CLASSIFIED")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Nregionid)
                    .HasColumnName("NREGIONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Operdate)
                    .HasColumnName("OPERDATE")
                    .HasColumnType("DATE");
            });

            modelBuilder.Entity<VVtmDepoClients>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_VTM_DEPO_CLIENTS");

                entity.Property(e => e.Bathenaexported)
                    .HasColumnName("BATHENAEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bisbank)
                    .HasColumnName("BISBANK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Blong)
                    .HasColumnName("BLONG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnetting2)
                    .HasColumnName("BNETTING2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoresident)
                    .HasColumnName("BNORESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Boncall)
                    .HasColumnName("BONCALL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cathenaexported)
                    .HasColumnName("CATHENAEXPORTED")
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccommited)
                    .HasColumnName("CCOMMITED")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepogt)
                    .HasColumnName("CDEPOGT")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cingcode)
                    .HasColumnName("CINGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Clongref)
                    .HasColumnName("CLONGREF")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Crate)
                    .HasColumnName("CRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Crptcurr)
                    .HasColumnName("CRPTCURR")
                    .IsUnicode(false);

                entity.Property(e => e.Csalescredit)
                    .HasColumnName("CSALESCREDIT")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csalesperson)
                    .HasColumnName("CSALESPERSON")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cvtmgroup)
                    .HasColumnName("CVTMGROUP")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dlineexpiry)
                    .HasColumnName("DLINEEXPIRY")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtranexpiry)
                    .HasColumnName("DTRANEXPIRY")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibase)
                    .HasColumnName("IBASE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccountmanagerid)
                    .HasColumnName("NACCOUNTMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncountryid)
                    .HasColumnName("NCOUNTRYID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninterest)
                    .HasColumnName("NINTEREST")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER(19,6)");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalesmanagerid)
                    .HasColumnName("NSALESMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsegmentationid)
                    .HasColumnName("NSEGMENTATIONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumconv)
                    .HasColumnName("NSUMCONV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvtm)
                    .HasColumnName("NVTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VVtmFxClients>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_VTM_FX_CLIENTS");

                entity.Property(e => e.Bathenaexported)
                    .HasColumnName("BATHENAEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bisbank)
                    .HasColumnName("BISBANK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoresident)
                    .HasColumnName("BNORESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Cingcode)
                    .HasColumnName("CINGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Crptcurr)
                    .HasColumnName("CRPTCURR")
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csalesperson)
                    .HasColumnName("CSALESPERSON")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Cvtmgroup)
                    .HasColumnName("CVTMGROUP")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccountmanagerid)
                    .HasColumnName("NACCOUNTMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncountryid)
                    .HasColumnName("NCOUNTRYID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalesmanagerid)
                    .HasColumnName("NSALESMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsegmentationid)
                    .HasColumnName("NSEGMENTATIONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsumconv)
                    .HasColumnName("NSUMCONV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nvtm)
                    .HasColumnName("NVTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VVtmSbsecClients>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_VTM_SBSEC_CLIENTS");

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bisbank)
                    .HasColumnName("BISBANK")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bminusport)
                    .HasColumnName("BMINUSPORT")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocurrpaym)
                    .HasColumnName("BNOCURRPAYM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoreserv)
                    .HasColumnName("BNORESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoresident)
                    .HasColumnName("BNORESIDENT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cingcode)
                    .HasColumnName("CINGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corggroup)
                    .HasColumnName("CORGGROUP")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Crptcurr)
                    .HasColumnName("CRPTCURR")
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Csalesperson)
                    .HasColumnName("CSALESPERSON")
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cvtmgroup)
                    .HasColumnName("CVTMGROUP")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Naccountmanagerid)
                    .HasColumnName("NACCOUNTMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncountryid)
                    .HasColumnName("NCOUNTRYID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesmanagerid)
                    .HasColumnName("NSALESMANAGERID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsegmentationid)
                    .HasColumnName("NSEGMENTATIONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumconv)
                    .HasColumnName("NSUMCONV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumput)
                    .HasColumnName("NSUMPUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nvtm)
                    .HasColumnName("NVTM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VYearequiv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_YEAREQUIV");

                entity.Property(e => e.Cperiod)
                    .IsRequired()
                    .HasColumnName("CPERIOD")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequiv)
                    .HasColumnName("NEQUIV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtm)
                    .HasColumnName("NMTM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnom)
                    .HasColumnName("NNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Npldown)
                    .HasColumnName("NPLDOWN")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nyield)
                    .HasColumnName("NYIELD")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Valuedictionary>(entity =>
            {
                entity.HasKey(e => new { e.Cchapcode, e.Nelmnumber })
                    .HasName("SYS_C008987");

                entity.ToTable("VALUEDICTIONARY");

                entity.Property(e => e.Cchapcode)
                    .HasColumnName("CCHAPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nelmnumber)
                    .HasColumnName("NELMNUMBER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Celmname)
                    .HasColumnName("CELMNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Classifkey)
                    .HasColumnName("CLASSIFKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(255);

                entity.Property(e => e.Elmnumber)
                    .HasColumnName("ELMNUMBER")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Isortorder)
                    .HasColumnName("ISORTORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(255);

                entity.Property(e => e.Nclassifkey)
                    .HasColumnName("NCLASSIFKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Vcurrpos>(entity =>
            {
                entity.ToTable("VCURRPOS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(255);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(255);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(255);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(255);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(255);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(255);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(255);

                entity.Property(e => e.Ddealdatetime)
                    .HasColumnName("DDEALDATETIME")
                    .HasColumnType("TIMESTAMP(4)");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("TIMESTAMP(4)");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,5)");
            });

            modelBuilder.Entity<VtmCodes>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("SYS_C008991");

                entity.ToTable("VTM_CODES");

                entity.Property(e => e.Id)
                    .HasColumnName("NCODEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ccode)
                    .HasColumnName("CCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cisocode)
                    .HasColumnName("CISOCODE")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Iso)
                    .HasColumnName("ISO")
                    .HasMaxLength(255);

				entity.Property(e => e.Itype)
					.HasColumnName("ITYPE");
                   // .ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(255);

                entity.Property(e => e.Type).HasColumnName("TYPE");
            });

            modelBuilder.Entity<VtmPeriods>(entity =>
            {
                entity.HasKey(e => e.Nperiodkey)
                    .HasName("SYS_C008995");

                entity.ToTable("VTM_PERIODS");

                entity.HasIndex(e => new { e.Copcode, e.Nend })
                    .HasName("I2_VTM_PERIODS");

                entity.HasIndex(e => new { e.Copcode, e.Nstart })
                    .HasName("I1_VTM_PERIODS");

                entity.Property(e => e.Nperiodkey)
                    .HasColumnName("NPERIODKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nend)
                    .HasColumnName("NEND")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norder)
                    .HasColumnName("NORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nstart)
                    .HasColumnName("NSTART")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VtmProducts>(entity =>
            {
                entity.HasKey(e => e.Nproductkey)
                    .HasName("SYS_C008999");

                entity.ToTable("VTM_PRODUCTS");

                entity.HasIndex(e => e.Copcode)
                    .HasName("I1_VTM_PRODUCTS");

                entity.Property(e => e.Nproductkey)
                    .HasColumnName("NPRODUCTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cproductcode)
                    .HasColumnName("CPRODUCTCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Norder)
                    .HasColumnName("NORDER")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VtmSpreads>(entity =>
            {
                entity.HasKey(e => new { e.Nproductkey, e.Nperiodkey, e.Ddate, e.Cvtmgroup })
                    .HasName("SYS_C009003");

                entity.ToTable("VTM_SPREADS");

                entity.HasIndex(e => new { e.Ddate, e.Nproductkey, e.Nperiodkey })
                    .HasName("I1_VTM_SPREADS");

                entity.Property(e => e.Nproductkey)
                    .HasColumnName("NPRODUCTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nperiodkey)
                    .HasColumnName("NPERIODKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Cvtmgroup)
                    .HasColumnName("CVTMGROUP")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Nvalue)
                    .HasColumnName("NVALUE")
                    .HasColumnType("NUMBER(4,2)");

                entity.HasOne(d => d.NperiodkeyNavigation)
                    .WithMany(p => p.VtmSpreads)
                    .HasForeignKey(d => d.Nperiodkey)
                    .HasConstraintName("SYS_C0010147");

                entity.HasOne(d => d.NproductkeyNavigation)
                    .WithMany(p => p.VtmSpreads)
                    .HasForeignKey(d => d.Nproductkey)
                    .HasConstraintName("SYS_C0010148");
            });

            modelBuilder.Entity<VxFxn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VX_FXN");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr1)
                    .HasColumnName("CCURR1")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr2)
                    .HasColumnName("CCURR2")
                    .IsUnicode(false);

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Navail)
                    .HasColumnName("NAVAIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nex)
                    .HasColumnName("NEX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nutil)
                    .HasColumnName("NUTIL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nutilsign)
                    .HasColumnName("NUTILSIGN")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VxFxn2a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VX_FXN2A");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr1)
                    .HasColumnName("CCURR1")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr2)
                    .HasColumnName("CCURR2")
                    .IsUnicode(false);

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VxFxn4a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VX_FXN4A");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr1)
                    .HasColumnName("CCURR1")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr2)
                    .HasColumnName("CCURR2")
                    .IsUnicode(false);

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nlimcom)
                    .HasColumnName("NLIMCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlimfx)
                    .HasColumnName("NLIMFX")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nutil)
                    .HasColumnName("NUTIL")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VxNetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VX_NETTING");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr1)
                    .HasColumnName("CCURR1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurr2)
                    .HasColumnName("CCURR2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<VxNetting2a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VX_NETTING2A");

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr1)
                    .HasColumnName("CCURR1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurr2)
                    .HasColumnName("CCURR2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cnettcode)
                    .HasColumnName("CNETTCODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nsum1)
                    .HasColumnName("NSUM1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Workspaces>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WORKSPACES");

                entity.Property(e => e.Bactive)
                    .HasColumnName("BACTIVE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Caccess)
                    .HasColumnName("CACCESS")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cadditionalparams)
                    .HasColumnName("CADDITIONALPARAMS")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cformname)
                    .HasColumnName("CFORMNAME")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER")
                    .HasDefaultValueSql("0 ");

                entity.Property(e => e.Istate)
                    .HasColumnName("ISTATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nheight)
                    .HasColumnName("NHEIGHT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nleft)
                    .HasColumnName("NLEFT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntop)
                    .HasColumnName("NTOP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nwidth)
                    .HasColumnName("NWIDTH")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Xcurrratehist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XCURRRATEHIST");

                entity.Property(e => e.Cboside)
                    .HasColumnName("CBOSIDE")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurr1)
                    .HasColumnName("CCURR1")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurr2)
                    .HasColumnName("CCURR2")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdate)
                    .HasColumnName("CDATE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cservreqstatus)
                    .HasColumnName("CSERVREQSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cusername)
                    .HasColumnName("CUSERNAME")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Nboside)
                    .HasColumnName("NBOSIDE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nchangekey)
                    .HasColumnName("NCHANGEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nnewvalue)
                    .HasColumnName("NNEWVALUE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Noldvalue)
                    .HasColumnName("NOLDVALUE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Xdates>(entity =>
            {
                entity.HasKey(e => e.Ddate)
                    .HasName("SYS_C009014");

                entity.ToTable("XDATES");

                entity.HasIndex(e => e.Bworkday)
                    .HasName("I1_XDATES");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bworkday)
                    .HasColumnName("BWORKDAY")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Xdepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XDEPO");

                entity.Property(e => e.Accinterest)
                    .HasColumnName("ACCINTEREST")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bautoprint)
                    .HasColumnName("BAUTOPRINT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bcollateral)
                    .HasColumnName("BCOLLATERAL")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bkeeprubpaym)
                    .HasColumnName("BKEEPRUBPAYM")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Blong)
                    .HasColumnName("BLONG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting2)
                    .HasColumnName("BNETTING2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Boncall)
                    .HasColumnName("BONCALL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cathenaexported)
                    .HasColumnName("CATHENAEXPORTED")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cathenaexportedstatus)
                    .HasColumnName("CATHENAEXPORTEDSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Catlasstatus)
                    .HasColumnName("CATLASSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccommited)
                    .HasColumnName("CCOMMITED")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Clongref)
                    .HasColumnName("CLONGREF")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cprintstatus)
                    .HasColumnName("CPRINTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Crate)
                    .HasColumnName("CRATE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescredit)
                    .HasColumnName("CSALESCREDIT")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalespersonid)
                    .HasColumnName("CSALESPERSONID")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dlineexpiry)
                    .HasColumnName("DLINEEXPIRY")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtranexpiry)
                    .HasColumnName("DTRANEXPIRY")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dvaluedate2)
                    .HasColumnName("DVALUEDATE2")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Given)
                    .HasColumnName("GIVEN")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ibase)
                    .HasColumnName("IBASE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ibullet)
                    .HasColumnName("IBULLET")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninterest)
                    .HasColumnName("NINTEREST")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nperiod)
                    .HasColumnName("NPERIOD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,6)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER(19,6)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum2)
                    .HasColumnName("NSUM2")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Taken)
                    .HasColumnName("TAKEN")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Xeqdeals>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XEQDEALS");

                entity.Property(e => e.Bcommpct)
                    .HasColumnName("BCOMMPCT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bcpclient)
                    .HasColumnName("BCPCLIENT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Btrueagredate)
                    .HasColumnName("BTRUEAGREDATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Btruecashsettl)
                    .HasColumnName("BTRUECASHSETTL")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Btrueeqsettl)
                    .HasColumnName("BTRUEEQSETTL")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Camendcomment)
                    .HasColumnName("CAMENDCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbrokagreement)
                    .HasColumnName("CBROKAGREEMENT")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccporgcode)
                    .HasColumnName("CCPORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdiasoftstatus2)
                    .HasColumnName("CDIASOFTSTATUS2")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cnetgross)
                    .HasColumnName("CNETGROSS")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cordernum)
                    .HasColumnName("CORDERNUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csecondref)
                    .HasColumnName("CSECONDREF")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlcurrcode)
                    .HasColumnName("CSETTLCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlecode)
                    .HasColumnName("CSETTLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlmenttype)
                    .HasColumnName("CSETTLMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cversion)
                    .HasColumnName("CVERSION")
                    .HasMaxLength(43)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dagreementdate)
                    .HasColumnName("DAGREEMENTDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcashsettldate)
                    .HasColumnName("DCASHSETTLDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dchangedate)
                    .HasColumnName("DCHANGEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Deqsettldate)
                    .HasColumnName("DEQSETTLDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtickettime)
                    .HasColumnName("DTICKETTIME")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ibd)
                    .HasColumnName("IBD")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nbps)
                    .HasColumnName("NBPS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nchangereason)
                    .HasColumnName("NCHANGEREASON")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncomissionrub)
                    .HasColumnName("NCOMISSIONRUB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ncomissionusd)
                    .HasColumnName("NCOMISSIONUSD")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndayinc)
                    .HasColumnName("NDAYINC")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER(16,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nquantityb)
                    .HasColumnName("NQUANTITYB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nquantitys)
                    .HasColumnName("NQUANTITYS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nraterub)
                    .HasColumnName("NRATERUB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntotalamount)
                    .HasColumnName("NTOTALAMOUNT")
                    .HasColumnType("NUMBER(16,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradeprice)
                    .HasColumnName("NTRADEPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nversion)
                    .HasColumnName("NVERSION")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Xeqdeals2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XEQDEALS2");

                entity.Property(e => e.Bcommpct).HasColumnName("BCOMMPCT");

                entity.Property(e => e.Btrueagredate).HasColumnName("BTRUEAGREDATE");

                entity.Property(e => e.Btruecashsettl).HasColumnName("BTRUECASHSETTL");

                entity.Property(e => e.Btrueeqsettl).HasColumnName("BTRUEEQSETTL");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Camendcomment)
                    .HasColumnName("CAMENDCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccporgcode)
                    .HasColumnName("CCPORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Cnetgross)
                    .HasColumnName("CNETGROSS")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cordernum)
                    .HasColumnName("CORDERNUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csecondref)
                    .HasColumnName("CSECONDREF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlcurrcode)
                    .HasColumnName("CSETTLCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlecode)
                    .HasColumnName("CSETTLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlmenttype)
                    .HasColumnName("CSETTLMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cversion)
                    .HasColumnName("CVERSION")
                    .HasMaxLength(43)
                    .IsUnicode(false);

                entity.Property(e => e.Dagreementdate)
                    .HasColumnName("DAGREEMENTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcashsettldate)
                    .HasColumnName("DCASHSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dchangedate)
                    .HasColumnName("DCHANGEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Deqsettldate)
                    .HasColumnName("DEQSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibd).HasColumnName("IBD");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Isb0)
                    .HasColumnName("ISB0")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbps)
                    .HasColumnName("NBPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nchangereason)
                    .HasColumnName("NCHANGEREASON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionrub)
                    .HasColumnName("NCOMISSIONRUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionusd)
                    .HasColumnName("NCOMISSIONUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantityb)
                    .HasColumnName("NQUANTITYB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantitys)
                    .HasColumnName("NQUANTITYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nraterub)
                    .HasColumnName("NRATERUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntotalamount)
                    .HasColumnName("NTOTALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Ntradeprice)
                    .HasColumnName("NTRADEPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nversion)
                    .HasColumnName("NVERSION")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<XeqdealsH>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XEQDEALS_H");

                entity.Property(e => e.Bcommpct).HasColumnName("BCOMMPCT");

                entity.Property(e => e.Bcpclient).HasColumnName("BCPCLIENT");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Btrueagredate).HasColumnName("BTRUEAGREDATE");

                entity.Property(e => e.Btruecashsettl).HasColumnName("BTRUECASHSETTL");

                entity.Property(e => e.Btrueeqsettl).HasColumnName("BTRUEEQSETTL");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Camendcomment)
                    .HasColumnName("CAMENDCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccporgcode)
                    .HasColumnName("CCPORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus2)
                    .HasColumnName("CDIASOFTSTATUS2")
                    .IsUnicode(false);

                entity.Property(e => e.Cfidessaid)
                    .HasColumnName("CFIDESSAID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Cnetgross)
                    .HasColumnName("CNETGROSS")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cordernum)
                    .HasColumnName("CORDERNUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csecondref)
                    .HasColumnName("CSECONDREF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Csetlplace)
                    .HasColumnName("CSETLPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlcurrcode)
                    .HasColumnName("CSETTLCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlecode)
                    .HasColumnName("CSETTLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlmenttype)
                    .HasColumnName("CSETTLMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatusrec)
                    .HasColumnName("CSTATUSREC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cversion)
                    .HasColumnName("CVERSION")
                    .HasMaxLength(43)
                    .IsUnicode(false);

                entity.Property(e => e.Dagreementdate)
                    .HasColumnName("DAGREEMENTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcashsettldate)
                    .HasColumnName("DCASHSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Deqsettldate)
                    .HasColumnName("DEQSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibd).HasColumnName("IBD");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nbps)
                    .HasColumnName("NBPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nchangereason)
                    .HasColumnName("NCHANGEREASON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionrub)
                    .HasColumnName("NCOMISSIONRUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionusd)
                    .HasColumnName("NCOMISSIONUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndayinc)
                    .HasColumnName("NDAYINC")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfidessaversion)
                    .HasColumnName("NFIDESSAVERSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantityb)
                    .HasColumnName("NQUANTITYB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantitys)
                    .HasColumnName("NQUANTITYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nraterub)
                    .HasColumnName("NRATERUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntotalamount)
                    .HasColumnName("NTOTALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Ntradeprice)
                    .HasColumnName("NTRADEPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nversion)
                    .HasColumnName("NVERSION")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<XeqdealsH1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XEQDEALS_H1");

                entity.Property(e => e.Bcommpct).HasColumnName("BCOMMPCT");

                entity.Property(e => e.Bcpclient).HasColumnName("BCPCLIENT");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Btrueagredate).HasColumnName("BTRUEAGREDATE");

                entity.Property(e => e.Btruecashsettl).HasColumnName("BTRUECASHSETTL");

                entity.Property(e => e.Btrueeqsettl).HasColumnName("BTRUEEQSETTL");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Camendcomment)
                    .HasColumnName("CAMENDCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccporgcode)
                    .HasColumnName("CCPORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus2)
                    .HasColumnName("CDIASOFTSTATUS2")
                    .IsUnicode(false);

                entity.Property(e => e.Cfidessaid)
                    .HasColumnName("CFIDESSAID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Cnetgross)
                    .HasColumnName("CNETGROSS")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cordernum)
                    .HasColumnName("CORDERNUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csecondref)
                    .HasColumnName("CSECONDREF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Csetlplace)
                    .HasColumnName("CSETLPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlcurrcode)
                    .HasColumnName("CSETTLCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlecode)
                    .HasColumnName("CSETTLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlmenttype)
                    .HasColumnName("CSETTLMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatusrec)
                    .HasColumnName("CSTATUSREC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cversion)
                    .HasColumnName("CVERSION")
                    .HasMaxLength(43)
                    .IsUnicode(false);

                entity.Property(e => e.Dagreementdate)
                    .HasColumnName("DAGREEMENTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcashsettldate)
                    .HasColumnName("DCASHSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Deqsettldate)
                    .HasColumnName("DEQSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibd).HasColumnName("IBD");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nbps)
                    .HasColumnName("NBPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nchangereason)
                    .HasColumnName("NCHANGEREASON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionrub)
                    .HasColumnName("NCOMISSIONRUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionusd)
                    .HasColumnName("NCOMISSIONUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndayinc)
                    .HasColumnName("NDAYINC")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfidessaversion)
                    .HasColumnName("NFIDESSAVERSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantityb)
                    .HasColumnName("NQUANTITYB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantitys)
                    .HasColumnName("NQUANTITYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nraterub)
                    .HasColumnName("NRATERUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntotalamount)
                    .HasColumnName("NTOTALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Ntradeprice)
                    .HasColumnName("NTRADEPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nversion)
                    .HasColumnName("NVERSION")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<XeqdealsHForm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XEQDEALS_H_FORM");

                entity.Property(e => e.Bcommpct).HasColumnName("BCOMMPCT");

                entity.Property(e => e.Bcpclient).HasColumnName("BCPCLIENT");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Btrueagredate).HasColumnName("BTRUEAGREDATE");

                entity.Property(e => e.Btruecashsettl).HasColumnName("BTRUECASHSETTL");

                entity.Property(e => e.Btrueeqsettl).HasColumnName("BTRUEEQSETTL");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Camendcomment)
                    .HasColumnName("CAMENDCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccporgcode)
                    .HasColumnName("CCPORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus2)
                    .HasColumnName("CDIASOFTSTATUS2")
                    .IsUnicode(false);

                entity.Property(e => e.Cfidessaid)
                    .HasColumnName("CFIDESSAID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Cnetgross)
                    .HasColumnName("CNETGROSS")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cordernum)
                    .HasColumnName("CORDERNUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csecondref)
                    .HasColumnName("CSECONDREF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Csetlplace)
                    .HasColumnName("CSETLPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlcurrcode)
                    .HasColumnName("CSETTLCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlecode)
                    .HasColumnName("CSETTLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlmenttype)
                    .HasColumnName("CSETTLMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatusrec)
                    .HasColumnName("CSTATUSREC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cversion)
                    .HasColumnName("CVERSION")
                    .HasMaxLength(43)
                    .IsUnicode(false);

                entity.Property(e => e.Dagreementdate)
                    .HasColumnName("DAGREEMENTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcashsettldate)
                    .HasColumnName("DCASHSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Deqsettldate)
                    .HasColumnName("DEQSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibd).HasColumnName("IBD");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nbps)
                    .HasColumnName("NBPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nchangereason)
                    .HasColumnName("NCHANGEREASON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionrub)
                    .HasColumnName("NCOMISSIONRUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionusd)
                    .HasColumnName("NCOMISSIONUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndayinc)
                    .HasColumnName("NDAYINC")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfidessaversion)
                    .HasColumnName("NFIDESSAVERSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantityb)
                    .HasColumnName("NQUANTITYB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantitys)
                    .HasColumnName("NQUANTITYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nraterub)
                    .HasColumnName("NRATERUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntotalamount)
                    .HasColumnName("NTOTALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Ntradeprice)
                    .HasColumnName("NTRADEPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nversion)
                    .HasColumnName("NVERSION")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<XeqdealsPrints>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XEQDEALS_PRINTS");

                entity.Property(e => e.Bcommpct).HasColumnName("BCOMMPCT");

                entity.Property(e => e.Bcpclient).HasColumnName("BCPCLIENT");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Btrueagredate).HasColumnName("BTRUEAGREDATE");

                entity.Property(e => e.Btruecashsettl).HasColumnName("BTRUECASHSETTL");

                entity.Property(e => e.Btrueeqsettl).HasColumnName("BTRUEEQSETTL");

                entity.Property(e => e.Caccount)
                    .HasColumnName("CACCOUNT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Camendcomment)
                    .HasColumnName("CAMENDCOMMENT")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokagreement)
                    .HasColumnName("CBROKAGREEMENT")
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ccountercode)
                    .HasColumnName("CCOUNTERCODE")
                    .HasColumnType("CHAR(1)");

                entity.Property(e => e.Ccporgcode)
                    .HasColumnName("CCPORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus)
                    .HasColumnName("CDIASOFTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdiasoftstatus2)
                    .HasColumnName("CDIASOFTSTATUS2")
                    .IsUnicode(false);

                entity.Property(e => e.Cfidessaid)
                    .HasColumnName("CFIDESSAID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cinsttype)
                    .HasColumnName("CINSTTYPE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cisincode)
                    .HasColumnName("CISINCODE")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cissuer)
                    .HasColumnName("CISSUER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cmarketcode)
                    .HasColumnName("CMARKETCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cname)
                    .HasColumnName("CNAME")
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Cnetgross)
                    .HasColumnName("CNETGROSS")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasColumnType("CHAR(2)");

                entity.Property(e => e.Cordernum)
                    .HasColumnName("CORDERNUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Corgcode)
                    .HasColumnName("CORGCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Corgname)
                    .HasColumnName("CORGNAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cproducttype)
                    .HasColumnName("CPRODUCTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csecondref)
                    .HasColumnName("CSECONDREF")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Csecurity)
                    .HasColumnName("CSECURITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csedolcode)
                    .HasColumnName("CSEDOLCODE")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Csetlplace)
                    .HasColumnName("CSETLPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlcurrcode)
                    .HasColumnName("CSETTLCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlecode)
                    .HasColumnName("CSETTLECODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlmenttype)
                    .HasColumnName("CSETTLMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cstateregistrationcode)
                    .HasColumnName("CSTATEREGISTRATIONCODE")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatusrec)
                    .HasColumnName("CSTATUSREC")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradecurrcode)
                    .HasColumnName("CTRADECURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Cversion)
                    .HasColumnName("CVERSION")
                    .HasMaxLength(43)
                    .IsUnicode(false);

                entity.Property(e => e.Dagreementdate)
                    .HasColumnName("DAGREEMENTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcashsettldate)
                    .HasColumnName("DCASHSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dchangedate)
                    .HasColumnName("DCHANGEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dchangedatetime)
                    .HasColumnName("DCHANGEDATETIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Deqsettldate)
                    .HasColumnName("DEQSETTLDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregtime)
                    .HasColumnName("DREGTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtickettime)
                    .HasColumnName("DTICKETTIME")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ibd).HasColumnName("IBD");

                entity.Property(e => e.Isb).HasColumnName("ISB");

                entity.Property(e => e.Nbps)
                    .HasColumnName("NBPS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nchangereason)
                    .HasColumnName("NCHANGEREASON")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncharges)
                    .HasColumnName("NCHARGES")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomission)
                    .HasColumnName("NCOMISSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionrub)
                    .HasColumnName("NCOMISSIONRUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncomissionusd)
                    .HasColumnName("NCOMISSIONUSD")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndayinc)
                    .HasColumnName("NDAYINC")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfidessaversion)
                    .HasColumnName("NFIDESSAVERSION")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprincipalamount)
                    .HasColumnName("NPRINCIPALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantityb)
                    .HasColumnName("NQUANTITYB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nquantitys)
                    .HasColumnName("NQUANTITYS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nraterub)
                    .HasColumnName("NRATERUB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntotalamount)
                    .HasColumnName("NTOTALAMOUNT")
                    .HasColumnType("NUMBER(16,2)");

                entity.Property(e => e.Ntradeprice)
                    .HasColumnName("NTRADEPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nuserkey)
                    .HasColumnName("NUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nversion)
                    .HasColumnName("NVERSION")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Xforex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XFOREX");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bautoprint).HasColumnName("BAUTOPRINT");

                entity.Property(e => e.Bdraftdeal).HasColumnName("BDRAFTDEAL");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bkeeprubpaym).HasColumnName("BKEEPRUBPAYM");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoexchtrans)
                    .HasColumnName("BNOEXCHTRANS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap).HasColumnName("BSWAP");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cathenaexported)
                    .HasColumnName("CATHENAEXPORTED")
                    .IsUnicode(false);

                entity.Property(e => e.Cathenaexportedstatus)
                    .HasColumnName("CATHENAEXPORTEDSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientname)
                    .HasColumnName("CCLIENTNAME")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cprintstatus)
                    .HasColumnName("CPRINTSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csalespersonid)
                    .HasColumnName("CSALESPERSONID")
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iswaptype).HasColumnName("ISWAPTYPE");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ngridid)
                    .HasColumnName("NGRIDID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexid)
                    .HasColumnName("NMUREXID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmurexoid)
                    .HasColumnName("NMUREXOID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nswapkey)
                    .HasColumnName("NSWAPKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<XforexNett>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XFOREX_NETT");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bautoprint).HasColumnName("BAUTOPRINT");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap).HasColumnName("BSWAP");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cathenaexported)
                    .HasColumnName("CATHENAEXPORTED")
                    .IsUnicode(false);

                entity.Property(e => e.Cathenaexportedstatus)
                    .HasColumnName("CATHENAEXPORTEDSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<XforexNettBo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XFOREX_NETT_BO");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bautoprint).HasColumnName("BAUTOPRINT");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap).HasColumnName("BSWAP");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cathenaexported)
                    .HasColumnName("CATHENAEXPORTED")
                    .IsUnicode(false);

                entity.Property(e => e.Cathenaexportedstatus)
                    .HasColumnName("CATHENAEXPORTEDSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<XforexNettRm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XFOREX_NETT_RM");

                entity.Property(e => e.Bathenaimported).HasColumnName("BATHENAIMPORTED");

                entity.Property(e => e.Bautoprint).HasColumnName("BAUTOPRINT");

                entity.Property(e => e.Bexcltradepos)
                    .HasColumnName("BEXCLTRADEPOS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal).HasColumnName("BINTERNAL");

                entity.Property(e => e.Bndfnetting)
                    .HasColumnName("BNDFNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettingb)
                    .HasColumnName("BNETTINGB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnettings)
                    .HasColumnName("BNETTINGS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnosummit).HasColumnName("BNOSUMMIT");

                entity.Property(e => e.Bsummitexported)
                    .HasColumnName("BSUMMITEXPORTED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bswap).HasColumnName("BSWAP");

                entity.Property(e => e.Bvcflag)
                    .HasColumnName("BVCFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cathenaexported)
                    .HasColumnName("CATHENAEXPORTED")
                    .IsUnicode(false);

                entity.Property(e => e.Cathenaexportedstatus)
                    .HasColumnName("CATHENAEXPORTEDSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcode)
                    .HasColumnName("CBROKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrokcurrcode)
                    .HasColumnName("CBROKCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcodeb)
                    .HasColumnName("CCURRCODEB")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Ccurrcodes)
                    .HasColumnName("CCURRCODES")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cdepartcode)
                    .HasColumnName("CDEPARTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfixcurr)
                    .HasColumnName("CFIXCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cimportfile)
                    .HasColumnName("CIMPORTFILE")
                    .IsUnicode(false);

                entity.Property(e => e.Cndfticket)
                    .HasColumnName("CNDFTICKET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpair)
                    .HasColumnName("CPAIR")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cpiemessageid)
                    .HasColumnName("CPIEMESSAGEID")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Creuterscontr)
                    .HasColumnName("CREUTERSCONTR")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradevenue)
                    .HasColumnName("CTRADEVENUE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ctype)
                    .HasColumnName("CTYPE")
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtimestamp)
                    .HasColumnName("DTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedateb)
                    .HasColumnName("DVALUEDATEB")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedates)
                    .HasColumnName("DVALUEDATES")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ireuterimpflag)
                    .HasColumnName("IREUTERIMPFLAG")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nahenaclassified)
                    .HasColumnName("NAHENACLASSIFIED")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokcom)
                    .HasColumnName("NBROKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixdeal)
                    .HasColumnName("NFIXDEAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixrate)
                    .HasColumnName("NFIXRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfixsum)
                    .HasColumnName("NFIXSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER(19,9)");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumb)
                    .HasColumnName("NSUMB")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Nsums)
                    .HasColumnName("NSUMS")
                    .HasColumnType("NUMBER(19,2)");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Xfutures>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XFUTURES");

                entity.Property(e => e.Cathenaexported)
                    .HasColumnName("CATHENAEXPORTED")
                    .IsUnicode(false);

                entity.Property(e => e.Cathenaexportedstatus)
                    .HasColumnName("CATHENAEXPORTEDSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontractname)
                    .HasColumnName("CCONTRACTNAME")
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Celmname)
                    .HasColumnName("CELMNAME")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Cmonth)
                    .HasColumnName("CMONTH")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cticket)
                    .HasColumnName("CTICKET")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Dmaturitycont)
                    .HasColumnName("DMATURITYCONT")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dtradedate)
                    .HasColumnName("DTRADEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Imatchathena)
                    .HasColumnName("IMATCHATHENA")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER(19,7)");

                entity.Property(e => e.Nquantity)
                    .HasColumnName("NQUANTITY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum).HasColumnName("NTRADENUM");

                entity.Property(e => e.Nvalue)
                    .HasColumnName("NVALUE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Xinteroffpaym>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XINTEROFFPAYM");

                entity.Property(e => e.Caccbalto)
                    .HasColumnName("CACCBALTO")
                    .HasMaxLength(35)
                    .IsUnicode(false);
                 //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccfrom)
                    .HasColumnName("CACCFROM")
                    .HasMaxLength(100)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caccto)
                    .HasColumnName("CACCTO")
                    .HasMaxLength(100)
                    .IsUnicode(false);
                //       .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbenacc)
                    .HasColumnName("CBENACC")
                    .HasMaxLength(35)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbenbankacc)
                    .HasColumnName("CBENBANKACC")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbenbankbic)
                    .HasColumnName("CBENBANKBIC")
                    .HasMaxLength(10)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbenbankname)
                    .HasColumnName("CBENBANKNAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbenbankplace)
                    .HasColumnName("CBENBANKPLACE")
                    .HasMaxLength(160)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbenbankswift)
                    .HasColumnName("CBENBANKSWIFT")
                    .HasMaxLength(100)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbeninn)
                    .HasColumnName("CBENINN")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbenkpp)
                    .HasColumnName("CBENKPP")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbenname)
                    .HasColumnName("CBENNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbenplace)
                    .HasColumnName("CBENPLACE")
                    .HasMaxLength(160)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbenstate)
                    .HasColumnName("CBENSTATE")
                    .HasMaxLength(40)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccodstateben)
                    .HasColumnName("CCODSTATEBEN")
                    .HasMaxLength(10)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccommisaccount)
                    .HasColumnName("CCOMMISACCOUNT")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccorrcodeto)
                    .HasColumnName("CCORRCODETO")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Cintermediary)
                    .HasColumnName("CINTERMEDIARY")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Cintermediaryaccount)
                    .HasColumnName("CINTERMEDIARYACCOUNT")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cnostro)
                    .HasColumnName("CNOSTRO")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //  .ValueGeneratedOnAdd();

                entity.Property(e => e.Corgcodeto)
                    .HasColumnName("CORGCODETO")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Coriginacorbankcode)
                    .HasColumnName("CORIGINACORBANKCODE")
                    .HasMaxLength(10)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpayeracc)
                    .HasColumnName("CPAYERACC")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpayeraddress)
                    .HasColumnName("CPAYERADDRESS")
                    .HasMaxLength(200)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpayerbirthplace)
                    .HasColumnName("CPAYERBIRTHPLACE")
                    .HasMaxLength(100)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpayerinn)
                    .HasColumnName("CPAYERINN")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpayerkpp)
                    .HasColumnName("CPAYERKPP")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpayername)
                    .HasColumnName("CPAYERNAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpayertown)
                    .HasColumnName("CPAYERTOWN")
                    .HasMaxLength(40)
                    .IsUnicode(false);
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpaymforinter)
                    .HasColumnName("CPAYMFORINTER")
                    .HasMaxLength(300)
                    .IsUnicode(false);
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpaythruaccount)
                    .HasColumnName("CPAYTHRUACCOUNT")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cpaythrucode)
                    .HasColumnName("CPAYTHRUCODE")
                    .HasMaxLength(12)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cresponsibleperson)
                    .HasColumnName("CRESPONSIBLEPERSON")
                    .HasMaxLength(160)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csign1)
                    .HasColumnName("CSIGN1")
                    .HasMaxLength(200)
                    .IsUnicode(false);
                //       .ValueGeneratedOnAdd();

                entity.Property(e => e.Csign2)
                    .HasColumnName("CSIGN2")
                    .HasMaxLength(200)
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Dpayerbirthdate)
                    .HasColumnName("DPAYERBIRTHDATE")
                    .HasColumnType("DATE");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckeyfrom)
                    .HasColumnName("NACCKEYFROM")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nacckeyto)
                    .HasColumnName("NACCKEYTO")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Nrubtype)
                    .HasColumnName("NRUBTYPE")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Xrepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XREPO");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasColumnType("NUMBER(20)");
                //       .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bopenpos)
                    .HasColumnName("BOPENPOS");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(40)
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .IsUnicode(false);
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .IsUnicode(false);
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false);
                //       .ValueGeneratedOnAdd();

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE");
                //        .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");
                //   .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Irepobase)
                    .HasColumnName("IREPOBASE")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER(20)");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER(20)");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");
                //    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER");
                //     .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");
                //      .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");
                //       .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Xreposums>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XREPOSUMS");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL");
                //       .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposumkey)
                    .HasColumnName("NREPOSUMKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Xrurrepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XRURREPO");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bopenpos)
                    .HasColumnName("BOPENPOS")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creporate)
                    .HasColumnName("CREPORATE")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Creutersimportfile)
                    .HasColumnName("CREUTERSIMPORTFILE")
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dclosedate)
                    .HasColumnName("DCLOSEDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dstartdate)
                    .HasColumnName("DSTARTDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Irepobase)
                    .HasColumnName("IREPOBASE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nheircut)
                    .HasColumnName("NHEIRCUT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarketsum)
                    .HasColumnName("NMARKETSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nmarketsum2)
                    .HasColumnName("NMARKETSUM2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice2)
                    .HasColumnName("NPRICE2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum)
                    .HasColumnName("NREPOSUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposum2)
                    .HasColumnName("NREPOSUM2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nstep)
                    .HasColumnName("NSTEP")
                    .HasColumnType("NUMBER(20)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumkup2)
                    .HasColumnName("NSUMKUP2")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Xrurreposums>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XRURREPOSUMS");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nequitykey)
                    .HasColumnName("NEQUITYKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nreposumkey)
                    .HasColumnName("NREPOSUMKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER(19,2)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Xsbsec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XSBSEC");

                entity.Property(e => e.Bbrokerage)
                    .HasColumnName("BBROKERAGE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Binternal)
                    .HasColumnName("BINTERNAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bminusport)
                    .HasColumnName("BMINUSPORT")
                    .HasColumnType("NUMBER(20)");

                entity.Property(e => e.Bnetting)
                    .HasColumnName("BNETTING")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocrs)
                    .HasColumnName("BNOCRS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnocurrpaym)
                    .HasColumnName("BNOCURRPAYM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnoreserv)
                    .HasColumnName("BNORESERV")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Bnosummit)
                    .HasColumnName("BNOSUMMIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cbrief)
                    .HasColumnName("CBRIEF")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccpclientcode)
                    .HasColumnName("CCPCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccrsstatus)
                    .HasColumnName("CCRSSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealercode)
                    .HasColumnName("CDEALERCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Celmname)
                    .HasColumnName("CELMNAME")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcomment)
                    .HasColumnName("CSALESCREDITCOMMENT")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Csalescreditcurr)
                    .HasColumnName("CSALESCREDITCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csetlcurr)
                    .HasColumnName("CSETLCURR")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Csettlementtype)
                    .HasColumnName("CSETTLEMENTTYPE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csettplace)
                    .HasColumnName("CSETTPLACE")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Csummitstatus)
                    .HasColumnName("CSUMMITSTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Ctradeplace)
                    .HasColumnName("CTRADEPLACE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctradetime)
                    .HasColumnName("CTRADETIME")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Daudittimestamp)
                    .HasColumnName("DAUDITTIMESTAMP")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Icrsstatus)
                    .HasColumnName("ICRSSTATUS")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isb)
                    .HasColumnName("ISB")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Isin)
                    .HasColumnName("ISIN")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Iwaiver)
                    .HasColumnName("IWAIVER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckey)
                    .HasColumnName("NACCKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Namount)
                    .HasColumnName("NAMOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbankcom)
                    .HasColumnName("NBANKCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nbrokerkey)
                    .HasColumnName("NBROKERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ncounteracc)
                    .HasColumnName("NCOUNTERACC")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nexcom)
                    .HasColumnName("NEXCOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ninternalkey)
                    .HasColumnName("NINTERNALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmarkup)
                    .HasColumnName("NMARKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Norderkey)
                    .HasColumnName("NORDERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nplpct)
                    .HasColumnName("NPLPCT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nrate)
                    .HasColumnName("NRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescredit)
                    .HasColumnName("NSALESCREDIT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalescreditsum)
                    .HasColumnName("NSALESCREDITSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalespersonid)
                    .HasColumnName("NSALESPERSONID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsalesrate)
                    .HasColumnName("NSALESRATE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsecnom)
                    .HasColumnName("NSECNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsettlementkey)
                    .HasColumnName("NSETTLEMENTKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumput)
                    .HasColumnName("NSUMPUT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntradenum)
                    .HasColumnName("NTRADENUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntranshkey)
                    .HasColumnName("NTRANSHKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Xsbsecreval>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XSBSECREVAL");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclassif)
                    .IsRequired()
                    .HasColumnName("CCLASSIF")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cclientcode)
                    .HasColumnName("CCLIENTCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccouponrate)
                    .HasColumnName("CCOUPONRATE")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Celmname)
                    .HasColumnName("CELMNAME")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cseccode)
                    .HasColumnName("CSECCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Dcontrdate)
                    .HasColumnName("DCONTRDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ddeliverydate)
                    .HasColumnName("DDELIVERYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dmaturitydate)
                    .HasColumnName("DMATURITYDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacrint)
                    .HasColumnName("NACRINT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nfullsum)
                    .HasColumnName("NFULLSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmbid)
                    .HasColumnName("NMTMBID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmoffer)
                    .HasColumnName("NMTMOFFER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmpricebid)
                    .HasColumnName("NMTMPRICEBID")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtmpriceoffer)
                    .HasColumnName("NMTMPRICEOFFER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice)
                    .HasColumnName("NPRICE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumkup)
                    .HasColumnName("NSUMKUP")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsumnom)
                    .HasColumnName("NSUMNOM")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Xticketprint>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XTICKETPRINT");

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Ccontrcode)
                    .HasColumnName("CCONTRCODE")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Clog)
                    .HasColumnName("CLOG")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Cstatus)
                    .HasColumnName("CSTATUS")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ctablename)
                    .HasColumnName("CTABLENAME")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dadddate)
                    .HasColumnName("DADDDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dprintdate)
                    .HasColumnName("DPRINTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprinttype)
                    .HasColumnName("NPRINTTYPE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntprintkey)
                    .HasColumnName("NTPRINTKEY")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Xtrans>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XTRANS");

                entity.Property(e => e.Burgentpayment).HasColumnName("BURGENTPAYMENT");

                entity.Property(e => e.Caccbalfrom)
                    .HasColumnName("CACCBALFROM")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Caccbalto)
                    .HasColumnName("CACCBALTO")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Caccfrom)
                    .HasColumnName("CACCFROM")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Caccto)
                    .HasColumnName("CACCTO")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cathenaexportdate)
                    .HasColumnName("CATHENAEXPORTDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Cathenastatus)
                    .HasColumnName("CATHENASTATUS")
                    .IsUnicode(false);

                entity.Property(e => e.Cbicfrom)
                    .HasColumnName("CBICFROM")
                    .IsUnicode(false);

                entity.Property(e => e.Cbicto)
                    .HasColumnName("CBICTO")
                    .IsUnicode(false);

                entity.Property(e => e.Cbookcode)
                    .HasColumnName("CBOOKCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccodefrom)
                    .HasColumnName("CCODEFROM")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccodeto)
                    .HasColumnName("CCODETO")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccomment)
                    .HasColumnName("CCOMMENT")
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Ccorrcodefrom)
                    .HasColumnName("CCORRCODEFROM")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccorrcodeto)
                    .HasColumnName("CCORRCODETO")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ccorrnamefrom)
                    .HasColumnName("CCORRNAMEFROM")
                    .IsUnicode(false);

                entity.Property(e => e.Ccorrnameto)
                    .HasColumnName("CCORRNAMETO")
                    .IsUnicode(false);

                entity.Property(e => e.Ccurrcode)
                    .HasColumnName("CCURRCODE")
                    .HasColumnType("CHAR(3)");

                entity.Property(e => e.Cdealnumber)
                    .HasColumnName("CDEALNUMBER")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cinnfrom)
                    .HasColumnName("CINNFROM")
                    .IsUnicode(false);

                entity.Property(e => e.Cinnto)
                    .HasColumnName("CINNTO")
                    .IsUnicode(false);

                entity.Property(e => e.Cnamefrom)
                    .HasColumnName("CNAMEFROM")
                    .IsUnicode(false);

                entity.Property(e => e.Cnameto)
                    .HasColumnName("CNAMETO")
                    .IsUnicode(false);

                entity.Property(e => e.Copcode)
                    .HasColumnName("COPCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cpaymforinter)
                    .HasColumnName("CPAYMFORINTER")
                    .IsUnicode(false);

                entity.Property(e => e.Cpaympurpose)
                    .HasColumnName("CPAYMPURPOSE")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Creportcomment)
                    .HasColumnName("CREPORTCOMMENT")
                    .HasColumnType("CHAR(71)");

                entity.Property(e => e.Creqfrom)
                    .HasColumnName("CREQFROM")
                    .IsUnicode(false);

                entity.Property(e => e.Creqto)
                    .HasColumnName("CREQTO")
                    .IsUnicode(false);

                entity.Property(e => e.Dregdate)
                    .HasColumnName("DREGDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Dvaluedate)
                    .HasColumnName("DVALUEDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Ilogverify)
                    .HasColumnName("ILOGVERIFY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckeyfrom)
                    .HasColumnName("NACCKEYFROM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nacckeyto)
                    .HasColumnName("NACCKEYTO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ndealkey)
                    .HasColumnName("NDEALKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nlogreckey)
                    .HasColumnName("NLOGRECKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nloguserkey)
                    .HasColumnName("NLOGUSERKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsendathene)
                    .HasColumnName("NSENDATHENE")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsourcekey)
                    .HasColumnName("NSOURCEKEY")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nsum)
                    .HasColumnName("NSUM")
                    .HasColumnType("NUMBER(19,2)");
            });

            modelBuilder.Entity<Yieldcvalue>(entity =>
            {
                entity.HasKey(e => new { e.Ddate, e.Cperiodcode, e.Csource })
                    .HasName("SYS_C009018");

                entity.ToTable("YIELDCVALUE");

                entity.Property(e => e.Ddate)
                    .HasColumnName("DDATE")
                    .HasColumnType("DATE");

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Csource)
                    .HasColumnName("CSOURCE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ncurveval)
                    .HasColumnName("NCURVEVAL")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nmtm)
                    .HasColumnName("NMTM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Noneyeareq)
                    .HasColumnName("NONEYEAREQ")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice1)
                    .HasColumnName("NPRICE1")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Nprice2)
                    .HasColumnName("NPRICE2")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Ntenpctmove)
                    .HasColumnName("NTENPCTMOVE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.Entity<Yieldperiods>(entity =>
            {
                entity.HasKey(e => e.Cperiodcode)
                    .HasName("SYS_C009020");

                entity.ToTable("YIELDPERIODS");

                entity.Property(e => e.Cperiodcode)
                    .HasColumnName("CPERIODCODE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Icount)
                    .HasColumnName("ICOUNT")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Idaysfrom)
                    .HasColumnName("IDAYSFROM")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Idaysto)
                    .HasColumnName("IDAYSTO")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Iorder)
                    .HasColumnName("IORDER")
                    .HasColumnType("NUMBER");

                entity.Property(e => e.Itype)
                    .HasColumnName("ITYPE")
                    .HasColumnType("NUMBER");
            });

            modelBuilder.HasSequence("AUDITSEQ");

            modelBuilder.HasSequence("FVS_TEST_MESPARAM_NNUM");

            modelBuilder.HasSequence("IESEQ");

            modelBuilder.HasSequence("MMGAPSEQ");

            modelBuilder.HasSequence("PLSQL_PROFILER_RUNNUMBER");

            modelBuilder.HasSequence("QUIKSEQ");

            modelBuilder.HasSequence("SYSSEQ");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
